var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var CBaijialeHallView_1 = require("./game/gameList/baijiale/hall/CBaijialeHallView");
var CBaijialeHallController_1 = require("./game/gameList/baijiale/hall/CBaijialeHallController");
var CBaijialeView_1 = require("./game/gameList/baijiale/room/CBaijialeView");
var CBottomView_1 = require("./game/gameList/_commonView/bottom/CBottomView");
var CBaijialeController_1 = require("./game/gameList/baijiale/room/CBaijialeController");
var CRoadView_1 = require("./game/gameList/_commonView/road/CRoadView");
var CBaijialeRuleView_1 = require("./game/gameList/baijiale/room/rule/CBaijialeRuleView");
var CBaijialeRuleController_1 = require("./game/gameList/baijiale/room/rule/CBaijialeRuleController");
var CBetsHistroyView_1 = require("./game/gameList/_commonView/betsHistory/CBetsHistroyView");
var CBetsHistroyController_1 = require("./game/gameList/_commonView/betsHistory/CBetsHistroyController");
var CBottomController_1 = require("./game/gameList/_commonView/bottom/CBottomController");
var CLookPokersView_1 = require("./game/gameList/_commonView/lookPokers/CLookPokersView");
var CLookPokersController_1 = require("./game/gameList/_commonView/lookPokers/CLookPokersController");
var CMD5CheckView_1 = require("./game/gameList/_commonView/md5/CMD5CheckView");
var CMD5CheckController_1 = require("./game/gameList/_commonView/md5/CMD5CheckController");
var CPaiCaiView_1 = require("./game/gameList/_commonView/paicai/CPaiCaiView");
var CPaiCaiController_1 = require("./game/gameList/_commonView/paicai/CPaiCaiController");
var CRoadDetailView_1 = require("./game/gameList/_commonView/road/subView/CRoadDetailView");
var CRoadItem_1 = require("./game/gameList/_commonView/road/subView/CRoadItem");
var CRoadDetailController_1 = require("./game/gameList/_commonView/road/subView/CRoadDetailController");
var CRoadController_1 = require("./game/gameList/_commonView/road/CRoadController");
var CTutorialView_1 = require("./game/gameList/_commonView/tutorial/CTutorialView");
var CTutorialController_1 = require("./game/gameList/_commonView/tutorial/CTutorialController");
var CP21HallView_1 = require("./game/gameList/dian21/hall/CP21HallView");
var CP21HallController_1 = require("./game/gameList/dian21/hall/CP21HallController");
var CP21View_1 = require("./game/gameList/dian21/room/CP21View");
var CP21Controller_1 = require("./game/gameList/dian21/room/CP21Controller");
var CP21RuleView_1 = require("./game/gameList/dian21/room/rule/CP21RuleView");
var CP21RuleController_1 = require("./game/gameList/dian21/room/rule/CP21RuleController");
var CHallView_1 = require("./game/hall/CHallView");
var CHallController_1 = require("./game/hall/CHallController");
var AccRecoredView_1 = require("./game/hall/user/accrecord/AccRecoredView");
var AccRecoredController_1 = require("./game/hall/user/accrecord/AccRecoredController");
var CRuleView_1 = require("./game/hall/rule/CRuleView");
var CRuleController_1 = require("./game/hall/rule/CRuleController");
var CUserView_1 = require("./game/hall/user/CUserView");
var CUserController_1 = require("./game/hall/user/CUserController");
var CLoading_1 = require("./game/loading/CLoading");
var CChoiceCoinView_1 = require("./game/login/CChoiceCoinView");
var CChoiceCoinController_1 = require("./game/login/CChoiceCoinController");
var CLoginView_1 = require("./game/login/CLoginView");
var CLoginController_1 = require("./game/login/CLoginController");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("game/gameList/baijiale/hall/CBaijialeHallView.ts", CBaijialeHallView_1.default);
        reg("game/gameList/baijiale/hall/CBaijialeHallController.ts", CBaijialeHallController_1.default);
        reg("game/gameList/baijiale/room/CBaijialeView.ts", CBaijialeView_1.default);
        reg("game/gameList/_commonView/bottom/CBottomView.ts", CBottomView_1.default);
        reg("game/gameList/baijiale/room/CBaijialeController.ts", CBaijialeController_1.default);
        reg("game/gameList/_commonView/road/CRoadView.ts", CRoadView_1.default);
        reg("game/gameList/baijiale/room/rule/CBaijialeRuleView.ts", CBaijialeRuleView_1.default);
        reg("game/gameList/baijiale/room/rule/CBaijialeRuleController.ts", CBaijialeRuleController_1.default);
        reg("game/gameList/_commonView/betsHistory/CBetsHistroyView.ts", CBetsHistroyView_1.default);
        reg("game/gameList/_commonView/betsHistory/CBetsHistroyController.ts", CBetsHistroyController_1.default);
        reg("game/gameList/_commonView/bottom/CBottomController.ts", CBottomController_1.default);
        reg("game/gameList/_commonView/lookPokers/CLookPokersView.ts", CLookPokersView_1.default);
        reg("game/gameList/_commonView/lookPokers/CLookPokersController.ts", CLookPokersController_1.default);
        reg("game/gameList/_commonView/md5/CMD5CheckView.ts", CMD5CheckView_1.default);
        reg("game/gameList/_commonView/md5/CMD5CheckController.ts", CMD5CheckController_1.default);
        reg("game/gameList/_commonView/paicai/CPaiCaiView.ts", CPaiCaiView_1.default);
        reg("game/gameList/_commonView/paicai/CPaiCaiController.ts", CPaiCaiController_1.default);
        reg("game/gameList/_commonView/road/subView/CRoadDetailView.ts", CRoadDetailView_1.default);
        reg("game/gameList/_commonView/road/subView/CRoadItem.ts", CRoadItem_1.default);
        reg("game/gameList/_commonView/road/subView/CRoadDetailController.ts", CRoadDetailController_1.default);
        reg("game/gameList/_commonView/road/CRoadController.ts", CRoadController_1.default);
        reg("game/gameList/_commonView/tutorial/CTutorialView.ts", CTutorialView_1.default);
        reg("game/gameList/_commonView/tutorial/CTutorialController.ts", CTutorialController_1.default);
        reg("game/gameList/dian21/hall/CP21HallView.ts", CP21HallView_1.default);
        reg("game/gameList/dian21/hall/CP21HallController.ts", CP21HallController_1.default);
        reg("game/gameList/dian21/room/CP21View.ts", CP21View_1.default);
        reg("game/gameList/dian21/room/CP21Controller.ts", CP21Controller_1.default);
        reg("game/gameList/dian21/room/rule/CP21RuleView.ts", CP21RuleView_1.default);
        reg("game/gameList/dian21/room/rule/CP21RuleController.ts", CP21RuleController_1.default);
        reg("game/hall/CHallView.ts", CHallView_1.default);
        reg("game/hall/CHallController.ts", CHallController_1.default);
        reg("game/hall/user/accrecord/AccRecoredView.ts", AccRecoredView_1.default);
        reg("game/hall/user/accrecord/AccRecoredController.ts", AccRecoredController_1.default);
        reg("game/hall/rule/CRuleView.ts", CRuleView_1.default);
        reg("game/hall/rule/CRuleController.ts", CRuleController_1.default);
        reg("game/hall/user/CUserView.ts", CUserView_1.default);
        reg("game/hall/user/CUserController.ts", CUserController_1.default);
        reg("game/loading/CLoading.ts", CLoading_1.default);
        reg("game/login/CChoiceCoinView.ts", CChoiceCoinView_1.default);
        reg("game/login/CChoiceCoinController.ts", CChoiceCoinController_1.default);
        reg("game/login/CLoginView.ts", CLoginView_1.default);
        reg("game/login/CLoginController.ts", CLoginController_1.default);
    };
    GameConfig.width = 720;
    GameConfig.height = 1230;
    GameConfig.scaleMode = "exactfit";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "login/Login.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./game/gameList/_commonView/betsHistory/CBetsHistroyController":24,"./game/gameList/_commonView/betsHistory/CBetsHistroyView":26,"./game/gameList/_commonView/bottom/CBottomController":28,"./game/gameList/_commonView/bottom/CBottomView":30,"./game/gameList/_commonView/lookPokers/CLookPokersController":32,"./game/gameList/_commonView/lookPokers/CLookPokersView":34,"./game/gameList/_commonView/md5/CMD5CheckController":36,"./game/gameList/_commonView/md5/CMD5CheckView":38,"./game/gameList/_commonView/paicai/CPaiCaiController":40,"./game/gameList/_commonView/paicai/CPaiCaiView":42,"./game/gameList/_commonView/road/CRoadController":43,"./game/gameList/_commonView/road/CRoadView":46,"./game/gameList/_commonView/road/subView/CRoadDetailController":54,"./game/gameList/_commonView/road/subView/CRoadDetailView":58,"./game/gameList/_commonView/road/subView/CRoadItem":62,"./game/gameList/_commonView/tutorial/CTutorialController":63,"./game/gameList/_commonView/tutorial/CTutorialView":64,"./game/gameList/baijiale/hall/CBaijialeHallController":68,"./game/gameList/baijiale/hall/CBaijialeHallView":70,"./game/gameList/baijiale/room/CBaijialeController":75,"./game/gameList/baijiale/room/CBaijialeView":77,"./game/gameList/baijiale/room/rule/CBaijialeRuleController":120,"./game/gameList/baijiale/room/rule/CBaijialeRuleView":121,"./game/gameList/dian21/hall/CP21HallController":125,"./game/gameList/dian21/hall/CP21HallView":126,"./game/gameList/dian21/room/CP21Controller":133,"./game/gameList/dian21/room/CP21View":134,"./game/gameList/dian21/room/rule/CP21RuleController":185,"./game/gameList/dian21/room/rule/CP21RuleView":186,"./game/hall/CHallController":187,"./game/hall/CHallView":189,"./game/hall/rule/CRuleController":195,"./game/hall/rule/CRuleView":196,"./game/hall/user/CUserController":197,"./game/hall/user/CUserView":199,"./game/hall/user/accrecord/AccRecoredController":201,"./game/hall/user/accrecord/AccRecoredView":202,"./game/loading/CLoading":209,"./game/login/CChoiceCoinController":210,"./game/login/CChoiceCoinView":211,"./game/login/CLoginController":212,"./game/login/CLoginView":214}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var GM_1 = require("./gm/GM");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GM_1.GM.instance.initilize();
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, function (e) {
            // console.log('-----');
        });
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./gm/GM":221}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../gm/GM");
var coin_1 = require("./coin");
var CoinView;
(function (CoinView) {
    var CCoinClip = /** @class */ (function (_super) {
        __extends(CCoinClip, _super);
        function CCoinClip(url) {
            var _this = _super.call(this, url, 12, 1) || this;
            // super('common/clip_chouma.png', 1, 5);
            _this.isSelf = false;
            _this.baseScale = _this.scaleX = _this.scaleY = 0.35;
            _this.isOnDesk = false;
            var res = Laya.loader.getRes(_this.skin);
            if (!res) {
                _this.on(Laya.Event.LOADED, _this, _this._onLoaded);
                // console.log('unload');
            }
            else {
                _this._onLoaded();
                // console.log('loaded');
            }
            return _this;
        }
        CCoinClip.prototype.reset = function () {
            this.isOnDesk = false;
            this.isSelf = false;
            this.alpha = 1;
            this.owner = -1;
        };
        CCoinClip.prototype._onLoaded = function () {
            // 这时候clipwidth, clipheight还没值。很坑 , 不过width, height也是clipwidth, clipheight的值
            this.pivotX = (this.width) * 0.5 * this.scaleX;
            this.pivotY = (this.height) * 0.5 * this.scaleY;
        };
        CCoinClip.SIGN = 'CCoinClip';
        return CCoinClip;
    }(Laya.Clip));
    CoinView.CCoinClip = CCoinClip;
    function buildCoin() {
        var url = getCoinUrl();
        var view;
        Laya.Pool.getItemByCreateFun(CCoinClip.SIGN, function () {
            view = new CCoinClip(url);
            return view;
        });
        if (!view) {
            view = new CCoinClip(url);
        }
        view.reset();
        if (url != view.skin) {
            view.skin = url;
        }
        return view;
    }
    CoinView.buildCoin = buildCoin;
    function recoverCoin(coin) {
        Laya.Pool.recover(CCoinClip.SIGN, coin);
    }
    CoinView.recoverCoin = recoverCoin;
    function getCoinUrl() {
        var url;
        var coinType = GM_1.GM.coinData.coinType;
        switch (coinType) {
            case coin_1.coin.ECoinType.BCB.key:
                url = 'common/coin/clip_bcb.png';
                break;
            case coin_1.coin.ECoinType.DC.key:
                url = 'common/coin/clip_dc.png';
                break;
        }
        return url;
    }
    CoinView.getCoinUrl = getCoinUrl;
    function formatCoin(coin) {
        var url = getCoinUrl();
        if (coin.skin != url) {
            coin.skin = url;
        }
    }
    CoinView.formatCoin = formatCoin;
})(CoinView = exports.CoinView || (exports.CoinView = {}));
},{"../../gm/GM":221,"./coin":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var coin;
(function (coin_1) {
    var CCoinTypeData = /** @class */ (function () {
        function CCoinTypeData(type, key) {
            this.type = type;
            this.key = key;
        }
        return CCoinTypeData;
    }());
    coin_1.CCoinTypeData = CCoinTypeData;
    coin_1.ECoinType = {
        BCB: (new CCoinTypeData(0, 'BCB')),
        DC: (new CCoinTypeData(1, 'DC'))
    };
    function getDefaultCoinList() {
        var ret = [];
        for (var key in coin_1.ECoinType) {
            var coinType = coin_1.ECoinType[key];
            ret.push({ currencyCode: key, balance: 0 });
        }
        return ret;
    }
    coin_1.getDefaultCoinList = getDefaultCoinList;
    function getCoinTypeByIndex(idx) {
        for (var key in coin_1.ECoinType) {
            var coinType = coin_1.ECoinType[key];
            if (coinType.type == idx) {
                return coinType;
            }
        }
        return null;
    }
    coin_1.getCoinTypeByIndex = getCoinTypeByIndex;
    function getCoinTypeByKey(currencyCode) {
        for (var key in coin_1.ECoinType) {
            var coinType = coin_1.ECoinType[key];
            if (coinType.key == currencyCode) {
                return coinType;
            }
        }
        return null;
    }
    coin_1.getCoinTypeByKey = getCoinTypeByKey;
    var CCoin = /** @class */ (function () {
        function CCoin(v, typeData, idx) {
            this.value = v;
            this.typeData = typeData;
            this.index = idx;
        }
        return CCoin;
    }());
    coin_1.CCoin = CCoin;
    // bcb
    var CBcbCoin = /** @class */ (function (_super) {
        __extends(CBcbCoin, _super);
        function CBcbCoin(v, idx) {
            return _super.call(this, v, coin_1.ECoinType.BCB, idx) || this;
        }
        return CBcbCoin;
    }(CCoin));
    coin_1.CBcbCoin = CBcbCoin;
    // dc
    var CDCCoin = /** @class */ (function (_super) {
        __extends(CDCCoin, _super);
        function CDCCoin(v, idx) {
            return _super.call(this, v, coin_1.ECoinType.DC, idx) || this;
        }
        return CDCCoin;
    }(CCoin));
    coin_1.CDCCoin = CDCCoin;
    var CCoinMap = /** @class */ (function () {
        function CCoinMap(vList, cList) {
            this.valueList = vList;
            this.coinList = cList;
        }
        CCoinMap.prototype.getCoinType = function () { return this.getCoinByIndex(0).typeData; };
        CCoinMap.prototype.getCoinByIndex = function (index) { return this.coinList[index]; };
        CCoinMap.prototype.getCoinByValue = function (value) {
            for (var _i = 0, _a = this.coinList; _i < _a.length; _i++) {
                var coin_2 = _a[_i];
                if (coin_2.value == value) {
                    return coin_2;
                }
            }
            return null; // error
        };
        // 不同等级的房间，使用不同的币
        CCoinMap.prototype.getCoinListByStage = function (stage) {
            var coinList;
            switch (stage) {
                case 1:
                    coinList = [this.getCoinByIndex(0), this.getCoinByIndex(1), this.getCoinByIndex(2), this.getCoinByIndex(3), this.getCoinByIndex(4)];
                    break;
                case 2:
                    coinList = [this.getCoinByIndex(4), this.getCoinByIndex(5), this.getCoinByIndex(6), this.getCoinByIndex(7), this.getCoinByIndex(8)];
                    break;
                case 0:
                case 3:
                    coinList = [this.getCoinByIndex(6), this.getCoinByIndex(7), this.getCoinByIndex(9), this.getCoinByIndex(10), this.getCoinByIndex(11)];
                    break;
            }
            return coinList;
        };
        CCoinMap.prototype.transCoinListToValueList = function (coinList) {
            var ret = [];
            for (var i = 0; i < coinList.length; ++i) {
                ret.push(coinList[i].value);
            }
            return ret;
        };
        CCoinMap.bcb = new CCoinMap(([0.02, 0.04, 0.06, 0.1, 0.2, 0.5, 1, 2, 4, 5, 10, 20]), ([new CBcbCoin(0.02, 0), new CBcbCoin(0.04, 1), new CBcbCoin(0.06, 2),
            new CBcbCoin(0.1, 3), new CBcbCoin(0.2, 4), new CBcbCoin(0.5, 5),
            new CBcbCoin(1, 6), new CBcbCoin(2, 7), new CBcbCoin(4, 8), new CBcbCoin(5, 9),
            new CBcbCoin(10, 10), new CBcbCoin(20, 11)]));
        CCoinMap.dc = new CCoinMap(([1, 2, 3, 5, 10, 25, 50, 100, 200, 250, 500, 1000]), ([new CDCCoin(1, 0), new CDCCoin(2, 1), new CDCCoin(3, 2),
            new CDCCoin(5, 3), new CDCCoin(10, 4), new CDCCoin(25, 5),
            new CDCCoin(50, 6), new CDCCoin(100, 7), new CDCCoin(200, 8), new CDCCoin(250, 9),
            new CDCCoin(500, 10), new CDCCoin(1000, 11)]));
        return CCoinMap;
    }());
    coin_1.CCoinMap = CCoinMap;
})(coin = exports.coin || (exports.coin = {}));
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Event = Laya.Event;
// usage : 
/**
let topBox = this.view.topViewBase;
this.view.topView = new CGameTopView(topBox);
this.view.topView.register(this, onReturn_uiHandler, onSound_uiHandler,
    onRule_uiHandler, onRecord_uiHandler, onLookAll_uiHandler);
*/
var CGameTopView = /** @class */ (function () {
    function CGameTopView(pTopView) {
        this.m_topView = pTopView;
    }
    CGameTopView.prototype.dispose = function () {
        this.unregister();
        this.m_pCaller = null;
        this.m_pReturnCallback = null;
        this.m_pSoundCallback = null;
        this.m_pRuleCallback = null;
        this.m_pRecordCallback = null;
        this.m_pLookAllCallback = null;
    };
    CGameTopView.prototype.updateSignal = function (signalLevel) {
        if (!this.signal) {
            return;
        }
        if (signalLevel < 1) {
            signalLevel = 1;
        }
        this.signal.index = signalLevel - 1;
    };
    CGameTopView.prototype.register = function (caller, returnCallback, soundCallback, ruleCallback, recordCallback, lookAllCallback) {
        this.m_pCaller = caller;
        this.m_pReturnCallback = returnCallback;
        this.m_pSoundCallback = soundCallback;
        this.m_pRuleCallback = ruleCallback;
        this.m_pRecordCallback = recordCallback;
        this.m_pLookAllCallback = lookAllCallback;
        if (!caller) {
            return;
        }
        this.m_pReturnCallback && this.home_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pReturnCallback);
        this.m_pSoundCallback && this.sound_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pSoundCallback);
        this.m_pSoundCallback && this.sound_close_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pSoundCallback);
        this.m_pRuleCallback && this.rule_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pRuleCallback);
        this.m_pRecordCallback && this.record_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pRecordCallback);
        this.m_pLookAllCallback && this.look_all_btn.on(Event.MOUSE_UP, this.m_pCaller, this.m_pLookAllCallback);
    };
    CGameTopView.prototype.unregister = function () {
        if (!this.m_pCaller) {
            return;
        }
        this.m_pReturnCallback && this.home_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pReturnCallback);
        this.m_pSoundCallback && this.sound_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pSoundCallback);
        this.m_pSoundCallback && this.sound_close_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pSoundCallback);
        this.m_pRuleCallback && this.rule_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pRuleCallback);
        this.m_pRecordCallback && this.record_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pRecordCallback);
        this.m_pLookAllCallback && this.look_all_btn.off(Event.MOUSE_UP, this.m_pCaller, this.m_pLookAllCallback);
    };
    Object.defineProperty(CGameTopView.prototype, "home_btn", {
        get: function () { return this.m_topView.getChildByName('home_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "rule_btn", {
        get: function () { return this.m_topView.getChildByName('rule_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "record_btn", {
        get: function () { return this.m_topView.getChildByName('record_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "sound_btn", {
        get: function () { return this.m_topView.getChildByName('sound_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "sound_close_btn", {
        get: function () { return this.m_topView.getChildByName('sound_close_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "look_all_btn", {
        get: function () { return this.m_topView.getChildByName('look_all_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameTopView.prototype, "signal", {
        get: function () { return this.m_topView.getChildByName('signal'); },
        enumerable: true,
        configurable: true
    });
    return CGameTopView;
}());
exports.default = CGameTopView;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FuncUtil_1 = require("../../hbcore/util/FuncUtil");
var ApiUtil_1 = require("../../hbcore/util/ApiUtil");
var CImageNumber2 = /** @class */ (function (_super) {
    __extends(CImageNumber2, _super);
    // imageType : 
    // 0 : 1-90,  0在最后
    // 1: 0-9 0在最前
    // calcUseK : 使用千位表现, 即 12345 => 12,345
    // align : 0 居中, -1 : 左, 1右(右没实现)
    function CImageNumber2(skin, itemCount, itemSize, align, toFix, imageType, calcUseK) {
        if (align === void 0) { align = 0; }
        var _this = _super.call(this) || this;
        _this.m_size = itemSize;
        _this._clipX = itemCount;
        _this.m_skin = skin;
        _this.m_aling = align;
        if (!imageType) {
            _this.imageType = CImageNumber2.IMAGE_TYPE_190;
        }
        else {
            _this.imageType = imageType;
        }
        if (!calcUseK) {
            _this.m_calcUseK = false;
        }
        else {
            _this.m_calcUseK = calcUseK;
        }
        if (!toFix) {
            _this.m_toFix = -1;
        }
        else {
            _this.m_toFix = toFix;
        }
        _this.specialDelta = 0;
        return _this;
    }
    CImageNumber2.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
        this._clipAry = [];
    };
    Object.defineProperty(CImageNumber2.prototype, "timeNum", {
        get: function () {
            return this._timeNum;
        },
        set: function (v) {
            this._timeNum = v;
            Laya.timer.callLater(this, this._updateNum);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CImageNumber2.prototype, "num", {
        get: function () {
            return this._num;
        },
        set: function (value) {
            this._num = value;
            Laya.timer.callLater(this, this._updateNum);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CImageNumber2.prototype, "skin", {
        get: function () {
            return this.m_skin;
        },
        set: function (value) {
            this.m_skin = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CImageNumber2.prototype, "clipX", {
        get: function () {
            return this._clipX;
        },
        set: function (value) {
            this._clipX = value;
            Laya.timer.callLater(this, this._updateNum);
        },
        enumerable: true,
        configurable: true
    });
    CImageNumber2.prototype._updateNum = function () {
        this._clearLastClip();
        // let res = Laya.loader.getRes(this.m_skin);
        this._updateNumB();
    };
    CImageNumber2.prototype._updateNumB = function () {
        var charList = this._getDisplayList();
        this._initilizeClip(charList);
        this._buildClip(charList);
        this._setClipPos(charList);
        // this.centerX = this.centerX;
        dispatchEvent(new Event(Laya.Event.CHANGE));
    };
    CImageNumber2.prototype._clearLastClip = function () {
        while (this.numChildren > 0) {
            this.removeChildAt(0);
        }
    };
    CImageNumber2.prototype._getDisplayList = function () {
        var isTime = this.timeNum && true;
        var str;
        if (isTime) {
            // 时间格式, 传的是一个字符串
            str = this._timeNum;
        }
        else {
            var value = this._num;
            // 去掉浮点数的.xx.xxxxxxxxxxxxxxxxxx1
            if (this.m_toFix != -1) {
                value = ApiUtil_1.ApiUtil.formatNumber(value, this.m_toFix);
            }
            else {
                value = ApiUtil_1.ApiUtil.formatNumber(value);
            }
            if (this.m_calcUseK) {
                str = FuncUtil_1.FuncUtil.numToKStr(value, this.m_toFix);
            }
            else {
                str = value.toString();
            }
        }
        var charList = new Array();
        for (var i = 0; i < str.length; i++) {
            charList[i] = str.charAt(i);
        }
        return charList;
    };
    CImageNumber2.prototype._initilizeClip = function (charList) {
        var i;
        var len = charList.length - this._clipAry.length;
        if (len > 0) {
            for (i = 0; i < len; i++) {
                this._clipAry.push(this._createClip());
            }
        }
    };
    CImageNumber2.prototype._buildClip = function (charList) {
        var clip;
        var value;
        for (var i = 0; i < charList.length; i++) {
            clip = this._clipAry[i];
            value = charList[i];
            this.addChild(clip);
            if (value == '.' || ',' == value || ':' == value) {
                clip.index = 10;
            }
            else if (value == '0') {
                if (this.imageType == CImageNumber2.IMAGE_TYPE_190) {
                    clip.index = 9;
                }
                else {
                    clip.index = Number(value);
                }
            }
            else {
                // 1-9
                if (this.imageType == CImageNumber2.IMAGE_TYPE_190) {
                    clip.index = Number(value) - 1;
                }
                else {
                    clip.index = Number(value);
                }
            }
        }
    };
    CImageNumber2.prototype._setClipPos = function (charList) {
        var clip;
        var w = 0;
        var value;
        var nextStartX = 0;
        var x = 0;
        for (var i = 0; i < charList.length; i++) {
            clip = this._clipAry[i];
            value = charList[i];
            clip.x = nextStartX;
            nextStartX = clip.x + this.m_size;
            if (value == '.' || ',' == value || ':' == value) {
                // 当前为.,:, 下一个往前移
                nextStartX += this.specialDelta * 2;
            }
            else {
                if (i + 1 < charList.length) {
                    // 下一个
                    value = charList[i + 1];
                    if (value == '.' || ',' == value || ':' == value) {
                        // 下一个为.,:, 下一个的坐标往前移
                        nextStartX += this.specialDelta;
                    }
                }
            }
            if (i == charList.length - 1) {
                w = clip.x + this.m_size;
            }
        }
        if (this.m_aling == CImageNumber2.ALIGN_CENTER) {
            this.x = -w * 0.5;
        }
        else {
            // 没有右，只有左了
            this.x = 0;
        }
    };
    CImageNumber2.prototype._createClip = function () {
        var clip = this.__createClip();
        clip.skin = this.skin;
        clip.clipX = this.clipX;
        return clip;
    };
    CImageNumber2.prototype.__createClip = function () {
        return new Laya.Clip();
    };
    CImageNumber2.prototype._removeClip = function (clip) {
    };
    CImageNumber2.IMAGE_TYPE_190 = 0;
    CImageNumber2.IMAGE_TYPE_019 = 1;
    CImageNumber2.ALIGN_CENTER = 0;
    CImageNumber2.ALIGN_LEFT = -1;
    return CImageNumber2;
}(Laya.Box));
exports.default = CImageNumber2;
},{"../../hbcore/util/ApiUtil":266,"../../hbcore/util/FuncUtil":268}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CMD5TipsView = /** @class */ (function () {
    function CMD5TipsView(view) {
        this.m_pView = view;
    }
    Object.defineProperty(CMD5TipsView.prototype, "view", {
        get: function () {
            return this.m_pView;
        },
        set: function (v) {
            this.m_pView = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "visible", {
        get: function () {
            return this.m_pView.visible;
        },
        set: function (v) {
            this.m_pView.visible = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "zzImg", {
        get: function () { return this.m_pView.getChildByName('img2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "bg", {
        get: function () { return this.m_pView.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "zz1", {
        get: function () { return this.m_pView.getChildByName('zz1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "zz2", {
        get: function () { return this.m_pView.getChildByName('zz2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "mark", {
        get: function () { return this.m_pView.getChildByName('mark'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "icon", {
        get: function () { return this.m_pView.getChildByName('icon'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5TipsView.prototype, "head", {
        get: function () { return this.m_pView.getChildByName('head'); },
        enumerable: true,
        configurable: true
    });
    return CMD5TipsView;
}());
exports.default = CMD5TipsView;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CWarnView_1 = require("./CWarnView");
var NetTranslateErrorCode_1 = require("../net/NetTranslateErrorCode");
var CTipsType1View_1 = require("./CTipsType1View");
var CMessageBox = /** @class */ (function () {
    function CMessageBox() {
        this.m_flyingList = new Array();
    }
    Object.defineProperty(CMessageBox, "instance", {
        get: function () {
            (!this.m_instance) && (this.m_instance = new CMessageBox());
            return this.m_instance;
        },
        enumerable: true,
        configurable: true
    });
    CMessageBox.prototype.showNetError = function (errorCode, type, deltaY, fontColor, isSkipSame) {
        if (type === void 0) { type = CMessageBox.TYPE_FLY; }
        if (deltaY === void 0) { deltaY = 0; }
        if (fontColor === void 0) { fontColor = null; }
        if (isSkipSame === void 0) { isSkipSame = true; }
        var msg = NetTranslateErrorCode_1.NetTranslateErrorCode.translateHallErroCode(errorCode);
        this.showMsg(msg, type, deltaY, fontColor, isSkipSame);
    };
    // deltaY : 文字出现时, Y偏移量
    CMessageBox.prototype.showMsg = function (msg, type, deltaY, fontColor, isSkipSame, pParent, autoClose, bCancle) {
        if (type === void 0) { type = CMessageBox.TYPE_FLY; }
        if (deltaY === void 0) { deltaY = 0; }
        if (fontColor === void 0) { fontColor = null; }
        if (isSkipSame === void 0) { isSkipSame = true; }
        if (pParent === void 0) { pParent = null; }
        if (autoClose === void 0) { autoClose = true; }
        if (bCancle === void 0) { bCancle = false; }
        if (fontColor) {
            fontColor = fontColor;
        }
        else {
            fontColor = '#ffffff';
        }
        if (!pParent) {
            pParent = Laya.stage;
        }
        if (type == CMessageBox.NONE) {
            type = CMessageBox.TYPE_FLY;
        }
        if (type == CMessageBox.TYPE_BOX) {
            CWarnView_1.default.instance().showMsg(msg, bCancle);
        }
        else {
            if (isSkipSame && this._isFlying(msg)) {
                return;
            }
            if (isSkipSame) {
                this.m_flyingList.push(msg);
            }
            if (this.m_flyingList.length > 0) {
                deltaY += 80 * this.m_flyingList.length;
            }
            CTipsType1View_1.default.Show(pParent, msg, fontColor, autoClose, deltaY, this, this._onFlyFinish);
        }
    };
    CMessageBox.prototype._isFlying = function (msg) {
        for (var _i = 0, _a = this.m_flyingList; _i < _a.length; _i++) {
            var flyData = _a[_i];
            if (flyData == msg) {
                return true;
            }
        }
        return false;
    };
    CMessageBox.prototype._onFlyFinish = function (msg) {
        if (!this.m_flyingList || this.m_flyingList.length == 0) {
            return;
        }
        for (var i = 0; i < this.m_flyingList.length; i++) {
            if (msg == this.m_flyingList[i]) {
                this.m_flyingList.splice(i, 1);
                break;
            }
        }
    };
    CMessageBox.NONE = -1;
    CMessageBox.TYPE_FLY = 0;
    CMessageBox.TYPE_BOX = 1;
    return CMessageBox;
}());
exports.default = CMessageBox;
},{"../net/NetTranslateErrorCode":217,"./CTipsType1View":10,"./CWarnView":12}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CPokerData_1 = require("../gameList/_commonModel/CPokerData");
var FuncUtil_1 = require("../../hbcore/util/FuncUtil");
var CPath_1 = require("../const/CPath");
var CPokerView = /** @class */ (function () {
    function CPokerView(view) {
        this.m_pView = view;
    }
    // isSpecialPoker : false, md5信息显示是正常的, true, 用另一个显示方面, 百家乐中的补牌
    CPokerView.prototype.updateView = function (pokerData, forceHide, showZZ, isOpening, isSpecialPoker, isShowPokerOnly, isBlue, isForceHideZZ) {
        if (isOpening === void 0) { isOpening = false; }
        if (isSpecialPoker === void 0) { isSpecialPoker = false; }
        if (isShowPokerOnly === void 0) { isShowPokerOnly = false; }
        if (isBlue === void 0) { isBlue = false; }
        if (isForceHideZZ === void 0) { isForceHideZZ = false; }
        if (isBlue) {
            this.md5BoxV.visible = false;
            this.md5BgAll.visible = false;
            this.md5Box.visible = false;
            this.idLbl.visible = false;
            this.tipsImg1.visible = false;
            this.tipsImg2.visible = false;
            this.pokerImg.visible = false;
            this.backImg.visible = false;
            this.blank && (this.blank.visible = false);
            this.blueImg.visible = true;
            return;
        }
        this.blueImg.visible = false;
        this.idLbl.text = pokerData.id.toString();
        this.md5FianlLbl.text = FuncUtil_1.FuncUtil.toOmitString(pokerData.mark, 6);
        this.md5FianlLblV.text = FuncUtil_1.FuncUtil.toOmitString(pokerData.mark, 6);
        this.md5Box.visible = false;
        this.md5BoxV.visible = false;
        var md5Box, md5BgAll, md5BgTop, md5Pen, md5ZZ, md5ZZLbl;
        if (isSpecialPoker) {
            md5Box = this.md5BoxV;
            md5BgAll = this.md5BgAllV;
            md5BgTop = this.md5BgTopV;
            md5Pen = this.md5PenV;
            md5ZZ = this.md5ZZV;
            md5ZZLbl = this.md5ZZLblV;
        }
        else {
            md5Box = this.md5Box;
            md5BgAll = this.md5BgAll;
            md5BgTop = this.md5BgTop;
            md5Pen = this.md5Pen;
            md5ZZ = this.md5ZZ;
            md5ZZLbl = this.md5ZZLbl;
        }
        if (!forceHide && pokerData.poker && pokerData.poker.length > 0) {
            md5Box.visible = true;
            md5BgAll.visible = true;
            md5BgTop.visible = false;
            md5Pen.visible = true;
            md5ZZ.visible = true;
            this.pokerImg.visible = true;
            this.backImg.visible = false;
            md5ZZLbl.visible = true;
            md5ZZLbl.text = FuncUtil_1.FuncUtil.toOmitString(pokerData.seed, 6);
            this.tipsImg2.visible = false;
            this.tipsImg1.visible = true;
            this.idLbl.visible = false;
            this.pokerImg.skin = CPath_1.CPath.getPokerPath(CPokerData_1.CPokerData.getPokerStr(pokerData));
        }
        else {
            md5Box.visible = true;
            md5BgAll.visible = false;
            md5BgTop.visible = true;
            md5Pen.visible = true;
            md5ZZ.visible = false;
            md5ZZLbl.visible = false;
            this.tipsImg1.visible = true;
            this.tipsImg2.visible = false;
            this.pokerImg.visible = false;
            this.backImg.visible = true;
            this.idLbl.visible = true;
            md5Box.visible = showZZ; // 未开的牌。可以有不显示信息的情况
        }
        if (isOpening) {
            this.idLbl.visible = false;
            this.tipsImg1.visible = false;
            this.tipsImg2.visible = false;
        }
        if (isShowPokerOnly) {
            this.md5Box.visible = false;
            this.idLbl.visible = false;
            this.tipsImg1.visible = false;
            this.tipsImg2.visible = false;
        }
        if (isForceHideZZ) {
            this.md5Box.visible = false;
        }
    };
    Object.defineProperty(CPokerView.prototype, "view", {
        get: function () {
            return this.m_pView;
        },
        set: function (v) {
            this.m_pView = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "blank", {
        get: function () {
            return this.m_pView.getChildByName('blank');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "backImg", {
        get: function () {
            return this.m_pView.getChildByName('back');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "blueImg", {
        get: function () {
            return this.m_pView.getChildByName('blue');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "pokerImg", {
        get: function () {
            return this.m_pView.getChildByName('pokerImg');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "tipsImg1", {
        // 白
        get: function () {
            return this.m_pView.getChildByName('tips1');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "tipsImg2", {
        // 黑
        get: function () {
            return this.m_pView.getChildByName('tips2');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "idLbl", {
        // 序号
        get: function () {
            return this.m_pView.getChildByName('pokerID');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5Box", {
        // 种子
        get: function () {
            return this.m_pView.getChildByName('md5');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5BgAll", {
        get: function () {
            return this.md5Box.getChildByName('bgAll');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5BgTop", {
        get: function () {
            return this.md5Box.getChildByName('bgFinal');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5Pen", {
        get: function () {
            return this.md5Box.getChildByName('pen');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5ZZ", {
        get: function () {
            return this.md5Box.getChildByName('zz');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5FianlLbl", {
        get: function () {
            return this.md5Box.getChildByName('finalLbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5ZZLbl", {
        get: function () {
            return this.md5Box.getChildByName('zzLbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5BoxV", {
        // 下面补牌用的
        get: function () {
            return this.m_pView.getChildByName('md5V');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5BgAllV", {
        get: function () {
            return this.md5BoxV.getChildByName('bgAll');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5BgTopV", {
        get: function () {
            return this.md5BoxV.getChildByName('bgFinal');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5PenV", {
        get: function () {
            return this.md5BoxV.getChildByName('pen');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5ZZV", {
        get: function () {
            return this.md5BoxV.getChildByName('zz');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5FianlLblV", {
        get: function () {
            return this.md5BoxV.getChildByName('finalLbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerView.prototype, "md5ZZLblV", {
        get: function () {
            return this.md5BoxV.getChildByName('zzLbl');
        },
        enumerable: true,
        configurable: true
    });
    return CPokerView;
}());
exports.default = CPokerView;
},{"../../hbcore/util/FuncUtil":268,"../const/CPath":19,"../gameList/_commonModel/CPokerData":21}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var CTipsType1View = /** @class */ (function (_super) {
    __extends(CTipsType1View, _super);
    function CTipsType1View() {
        var _this = _super.call(this) || this;
        _this.ID = -1;
        _this.deltaY = 0;
        return _this;
    }
    CTipsType1View.Show = function (parent, tips, tipsColor, autoClose, deltaY, caller, hideCallback) {
        if (tipsColor === void 0) { tipsColor = '#00aa00'; }
        if (autoClose === void 0) { autoClose = true; }
        if (deltaY === void 0) { deltaY = 0; }
        if (caller === void 0) { caller = null; }
        if (hideCallback === void 0) { hideCallback = null; }
        var tipsView = Laya.Pool.getItemByClass(CTipsType1View.SIGN, CTipsType1View);
        if (tipsView.ID == -1) {
            tipsView.ID = CTipsType1View.S_ID;
            CTipsType1View.S_ID++;
        }
        tipsView.m_pCaller = caller;
        tipsView.m_pHideCallback = hideCallback;
        tipsView._show(parent, tips, tipsColor, autoClose, deltaY);
        return tipsView;
    };
    CTipsType1View.prototype._show = function (parent, tips, tipsColor, autoClose, deltaY) {
        if (tipsColor === void 0) { tipsColor = '#00aa00'; }
        if (autoClose === void 0) { autoClose = true; }
        Laya.Tween.clearAll(this);
        Laya.timer.clearAll(this);
        // this._hideB(); // 拿到一个还没关闭的
        this.m_msg = tips;
        this.m_hiding = false;
        this.m_msgColor = tipsColor;
        this.deltaY = deltaY;
        this.m_autoClose = autoClose;
        if (!parent) {
            Laya.stage.addChild(this);
        }
        else {
            parent.addChild(this);
        }
    };
    CTipsType1View.prototype._showB = function (autoClose) {
        var _this = this;
        this.alpha = 0;
        var toY = this.y - 100;
        Laya.Tween.to(this, { alpha: 1, y: toY }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            Laya.timer.once(2000, _this, function () {
                _this._hide();
            });
        }));
    };
    CTipsType1View.Hide = function (view) {
        view._hide();
    };
    CTipsType1View.prototype._hide = function () {
        var _this = this;
        if (this.m_hiding) {
            return;
        }
        this.m_hiding = true;
        var toY = this.y - 150;
        Laya.Tween.to(this, { alpha: 0, y: toY }, 500, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this._hideB();
        }));
    };
    CTipsType1View.prototype._hideB = function () {
        if (this.parent) {
            this.m_hiding = false;
            if (this.m_pHideCallback) {
                this.m_pHideCallback.call(this.m_pCaller, [this.m_msg]);
            }
            this.m_pHideCallback = null;
            this.m_pCaller = null;
            Laya.Pool.recover(CTipsType1View.SIGN, this);
            this.removeSelf();
        }
    };
    CTipsType1View.prototype.onEnable = function () {
        this.alpha = 1.0;
        this.msg.text = this.m_msg;
        ;
        this.msg.color = this.m_msgColor;
        this.x = (Laya.stage.width - this.width) * 0.5;
        this.y = (Laya.stage.height - 50) * 0.5 + this.deltaY - 40;
        this._showB(this.m_autoClose);
    };
    CTipsType1View.prototype.onDisable = function () {
    };
    Object.defineProperty(CTipsType1View.prototype, "msg", {
        get: function () {
            return this.getChildByName('lbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTipsType1View.prototype, "bg", {
        get: function () {
            return this.getChildByName('bg');
        },
        enumerable: true,
        configurable: true
    });
    CTipsType1View.SIGN = 'CTipsType1View';
    CTipsType1View.S_ID = 0;
    return CTipsType1View;
}(layaMaxUI_1.ui.common.TipsYype1ViewUI));
exports.default = CTipsType1View;
},{"../../ui/layaMaxUI":271}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Event = Laya.Event;
var FuncUtil_1 = require("../../hbcore/util/FuncUtil");
var CTopView = /** @class */ (function () {
    function CTopView(pView) {
        this.m_pView = pView;
    }
    CTopView.prototype.dispose = function () {
        this.unregister();
        this.m_pCaller = null;
        this.m_pReturnCallback = null;
        this.m_pUserCallback = null;
        this.m_pRuleCallback = null;
    };
    CTopView.prototype.register = function (caller, returnCallback, userCallback, ruleCallback, addMoneyCallback) {
        this.m_pCaller = caller;
        this.m_pReturnCallback = returnCallback;
        this.m_pUserCallback = userCallback;
        this.m_pRuleCallback = ruleCallback;
        this.m_pAddMoneyCallback = addMoneyCallback;
        if (!caller) {
            return;
        }
        returnCallback && this.returnBtn.on(Event.MOUSE_DOWN, caller, returnCallback);
        userCallback && this.userBtn.on(Event.MOUSE_DOWN, caller, userCallback);
        ruleCallback && this.ruleBtn.on(Event.MOUSE_DOWN, caller, ruleCallback);
        if (addMoneyCallback) {
            this.getMoneyAddIcon(this.moneyTop).on(Event.MOUSE_DOWN, caller, addMoneyCallback);
            this.getMoneyAddIcon(this.moneyInfo).on(Event.MOUSE_DOWN, caller, addMoneyCallback);
        }
    };
    CTopView.prototype.unregister = function () {
        if (!this.m_pCaller) {
            return;
        }
        this.m_pReturnCallback && this.returnBtn.off(Event.MOUSE_DOWN, this.m_pCaller, this.m_pReturnCallback);
        this.m_pUserCallback && this.userBtn.off(Event.MOUSE_DOWN, this.m_pCaller, this.m_pUserCallback);
        this.m_pRuleCallback && this.ruleBtn.off(Event.MOUSE_DOWN, this.m_pCaller, this.m_pRuleCallback);
        if (this.m_pAddMoneyCallback) {
            this.getMoneyAddIcon(this.moneyTop).off(Event.MOUSE_DOWN, this.m_pCaller, this.m_pAddMoneyCallback);
            this.getMoneyAddIcon(this.moneyInfo).off(Event.MOUSE_DOWN, this.m_pCaller, this.m_pAddMoneyCallback);
        }
    };
    // isHall : 大厅(不是游戏房间列表那个大厅)
    CTopView.prototype.updateView = function (displayData, coinType, isHall) {
        var moneyBox = this.moneyTop;
        this._updateMoneyViewB(moneyBox, displayData, coinType);
        moneyBox = this.moneyInfo;
        this._updateMoneyViewB(moneyBox, displayData, coinType);
        this.moneyTop.visible = isHall;
        this.moneyInfo.visible = !(this.moneyTop.visible);
        this.title.visible = !(isHall);
        this.userBtn.visible = isHall;
        this.userNameLbl.text = FuncUtil_1.FuncUtil.toOmitString(displayData.userName, 10);
    };
    CTopView.prototype._updateMoneyViewB = function (moneyBox, displayData, coinType) {
        this.getMoneyLabel(moneyBox).text = displayData.money.toString();
        this.getMoneyIcon(moneyBox).index = coinType.type;
    };
    Object.defineProperty(CTopView.prototype, "returnBtn", {
        get: function () {
            return this.m_pView.getChildByName('return_btn');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "userBtn", {
        get: function () {
            return this.m_pView.getChildByName('user_img');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "ruleBtn", {
        get: function () {
            return this.m_pView.getChildByName('rule_img');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "infoBox", {
        get: function () {
            return this.m_pView.getChildByName('info_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "userIcon", {
        get: function () {
            return this.infoBox.getChildByName('user_icon');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "userNameLbl", {
        // get moneyIcon() : Laya.Clip {
        // 	return this.infoBox.getChildByName('gold_icon') as Laya.Clip;
        // }
        get: function () {
            return this.infoBox.getChildByName('user_name');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "title", {
        get: function () {
            return this.m_pView.getChildByName('title');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "moneyTop", {
        // get moneyLbl() : Laya.Label {
        // 	return this.infoBox.getChildByName('money_lbl') as Laya.Label;
        // }
        get: function () { return this.m_pView.getChildByName('money'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTopView.prototype, "moneyInfo", {
        get: function () { return this.infoBox.getChildByName('money'); },
        enumerable: true,
        configurable: true
    });
    CTopView.prototype.getMoneyIcon = function (view) { return view.getChildByName('viewBox').getChildByName('gold_icon'); };
    CTopView.prototype.getMoneyAddIcon = function (view) { return view.getChildByName('viewBox').getChildByName('add'); };
    CTopView.prototype.getMoneyLabel = function (view) { return view.getChildByName('viewBox').getChildByName('money_lbl'); };
    return CTopView;
}());
exports.CTopView = CTopView;
var CTopViewDisplayData = /** @class */ (function () {
    function CTopViewDisplayData(money, userName, userIcon) {
        if (userIcon === void 0) { userIcon = null; }
        this.money = money;
        this.userName = userName;
        this.userIcon = userIcon;
    }
    return CTopViewDisplayData;
}());
exports.CTopViewDisplayData = CTopViewDisplayData;
},{"../../hbcore/util/FuncUtil":268}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var GM_1 = require("../../gm/GM");
var Lang_1 = require("../../hbcore/framework/Lang");
var CWarnView = /** @class */ (function (_super) {
    __extends(CWarnView, _super);
    function CWarnView() {
        var _this = _super.call(this) || this;
        _this._msg = "";
        return _this;
    }
    CWarnView.instance = function () {
        if (null == this._instance) {
            var dlg = new CWarnView();
            this._instance = dlg;
        }
        return this._instance;
    };
    CWarnView.prototype.onAwake = function () {
        // this.maskSprite.alpha = 0.5;
    };
    Object.defineProperty(CWarnView.prototype, "viewBox", {
        get: function () {
            return this.getChildByName('viewBox');
        },
        enumerable: true,
        configurable: true
    });
    CWarnView.prototype.showNotEnoughMoney = function (caller, okHandler, cancelHandler) {
        var msgView = CWarnView.instance().showMsg(Lang_1.default.Get('game_hall_join_not_enough_blance'), true, true, Lang_1.default.Get('no'), Lang_1.default.Get('yes'));
        msgView.closeHandler = Laya.Handler.create(this, function (isOk) {
            if (isOk) {
                if (okHandler) {
                    okHandler.call(caller);
                }
            }
            else {
                if (cancelHandler) {
                    cancelHandler.call(caller);
                }
            }
        });
    };
    CWarnView.prototype.showMsg = function (msg, bCancel, isSpecial, cancelTxt, okTxt) {
        if (bCancel === void 0) { bCancel = false; }
        if (isSpecial === void 0) { isSpecial = false; }
        if (cancelTxt === void 0) { cancelTxt = null; }
        if (okTxt === void 0) { okTxt = null; }
        this._msg = msg;
        this.m_selectOk = false;
        this.m_bCancel = bCancel;
        this.m_isSpecial = isSpecial;
        this.m_cancelTxt = cancelTxt;
        this.m_okTxt = okTxt;
        if (this.m_cancelTxt == null) {
            this.m_cancelTxt = Lang_1.default.Get(Lang_1.default.Get('cancel'));
        }
        if (this.m_okTxt == null) {
            this.m_okTxt = Lang_1.default.Get(Lang_1.default.Get('confirm'));
        }
        this.show();
        return this;
    };
    CWarnView.prototype.onEnable = function () {
        var _this = this;
        this.txtArea.text = this._msg;
        this._btnOk.clickHandler = Laya.Handler.create(this, function () {
            GM_1.GM.playButtonSound();
            _this.m_selectOk = true;
            _this.close();
        });
        this._btnCancel.clickHandler = Laya.Handler.create(this, function () {
            GM_1.GM.playButtonSound();
            _this.m_selectOk = false;
            _this.close();
        });
        this._btnOk2.clickHandler = Laya.Handler.create(this, function () {
            GM_1.GM.playButtonSound();
            _this.m_selectOk = true;
            _this.close();
        });
        this.btn_spe.clickHandler = Laya.Handler.create(this, function () {
            GM_1.GM.playButtonSound();
            _this.m_selectOk = true;
            _this.close();
        });
        if (this.m_bCancel) {
            this._btnOk.visible = !this.m_isSpecial;
            this.btn_spe.visible = this.m_isSpecial;
            this._btnCancel.visible = true;
            this._btnOk2.visible = false;
        }
        else {
            this.btn_spe.visible = this._btnOk.visible = this._btnCancel.visible = false;
            this._btnOk2.visible = true;
        }
        this._btnCancel.label = this.m_cancelTxt;
        this._btnOk.label = this.m_okTxt;
        this._btnOk2.label = this.m_okTxt;
        this.btn_spe.label = this.m_okTxt;
    };
    CWarnView.prototype.onDisable = function () {
        Laya.timer.clearAll(this);
        this._btnOk.clickHandler && (this._btnOk.clickHandler.recover(), this._btnOk.clickHandler = null);
        this._btnCancel.clickHandler && (this._btnCancel.clickHandler.recover(), this._btnCancel.clickHandler = null);
    };
    CWarnView.prototype.show = function () {
        Laya.stage.addChild(this);
    };
    CWarnView.prototype.close = function () {
        if (this.closeHandler) {
            this.closeHandler.runWith(this.m_selectOk);
            this.closeHandler.recover();
            this.closeHandler = null;
        }
        this.removeSelf();
    };
    return CWarnView;
}(layaMaxUI_1.ui.common.WarnViewUI));
exports.default = CWarnView;
},{"../../gm/GM":221,"../../hbcore/framework/Lang":250,"../../ui/layaMaxUI":271}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Event = Laya.Event;
var log_1 = require("../../hbcore/framework/log");
// 有拖动功能界面不能用这个
var StopAllMouseEvent = /** @class */ (function () {
    function StopAllMouseEvent() {
    }
    StopAllMouseEvent.register = function (pView) {
        if (pView) {
            var args = [pView];
            pView.on(Event.CLICK, this, this._onMouseEvent, args);
            pView.on(Event.MOUSE_DOWN, this, this._onMouseEvent, args);
            pView.on(Event.MOUSE_UP, this, this._onMouseEvent, args);
            var idx = StopAllMouseEvent.saveViewList.indexOf(pView);
            if (idx == -1) {
                StopAllMouseEvent.saveViewList.push(pView);
            }
            else {
                log_1.log.log('StopAllMouseEvent register duplicate');
            }
        }
    };
    StopAllMouseEvent.unregister = function (pView) {
        if (pView) {
            pView.off(Event.CLICK, this, this._onMouseEvent);
            pView.off(Event.MOUSE_DOWN, this, this._onMouseEvent);
            pView.off(Event.MOUSE_UP, this, this._onMouseEvent);
            var idx = StopAllMouseEvent.saveViewList.indexOf(pView);
            if (idx != -1) {
                StopAllMouseEvent.saveViewList.splice(idx, 1);
            }
        }
    };
    StopAllMouseEvent._onMouseEvent = function (pView, e) {
        // if (pView && pView == e.target) {
        e.stopPropagation();
        // }
    };
    Object.defineProperty(StopAllMouseEvent, "saveViewList", {
        get: function () {
            if (StopAllMouseEvent.m_pViewList == null) {
                StopAllMouseEvent.m_pViewList = new Array();
            }
            return StopAllMouseEvent.m_pViewList;
        },
        enumerable: true,
        configurable: true
    });
    return StopAllMouseEvent;
}());
exports.default = StopAllMouseEvent;
},{"../../hbcore/framework/log":256}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("./CComponent");
// view 需要有closeHandler, 并在关闭时调用closeHandler
var CBreathAnimationComponent = /** @class */ (function (_super) {
    __extends(CBreathAnimationComponent, _super);
    function CBreathAnimationComponent(caller, callback, pView, times, endAlpha, hideByEnd, oneFrameTime) {
        if (endAlpha === void 0) { endAlpha = 0; }
        if (hideByEnd === void 0) { hideByEnd = true; }
        if (oneFrameTime === void 0) { oneFrameTime = 500; }
        var _this = _super.call(this) || this;
        _this.m_pView = pView;
        _this.m_bProcessByParent = false;
        _this.m_oneFrameTime = oneFrameTime;
        _this.m_pCallback = callback;
        _this.m_pCaller = caller;
        _this.m_times = times + 1;
        _this.m_bStop = false;
        _this.m_endAlpha = endAlpha;
        _this.m_hideByEnd = hideByEnd;
        return _this;
    }
    CBreathAnimationComponent.prototype.onDestroy = function () {
        this.m_bStop = true;
        Laya.Tween.clearAll(this);
        _super.prototype.onDestroy.call(this);
        this.m_pView = null;
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    CBreathAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBreathAnimationComponent.prototype.process = function () {
        this.reset();
        this.m_pView.visible = true;
        this._onUp();
    };
    CBreathAnimationComponent.prototype._onUp = function () {
        if (this.m_bStop || this.m_curTime > this.m_times) {
            this._end();
            return;
        }
        this.m_curTime++;
        Laya.Tween.to(this.m_pView, { alpha: 1 }, this.m_oneFrameTime, Laya.Ease.linearIn, Laya.Handler.create(this, this._onDown));
    };
    CBreathAnimationComponent.prototype._onDown = function () {
        if (this.m_bStop || this.m_curTime > this.m_times) {
            this._end();
            return;
        }
        this.m_curTime++;
        Laya.Tween.to(this.m_pView, { alpha: 0 }, this.m_oneFrameTime, Laya.Ease.linearIn, Laya.Handler.create(this, this._onUp));
    };
    CBreathAnimationComponent.prototype._end = function () {
        if (this.m_bStop) {
            return;
        }
        Laya.Tween.clearAll(this);
        this.m_pView.alpha = this.m_endAlpha;
        if (this.m_hideByEnd) {
            this.m_pView.visible = false;
        }
        if (this.m_pCaller && this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller, [this]);
        }
    };
    CBreathAnimationComponent.prototype.stop = function () {
        this.m_bStop = true;
    };
    CBreathAnimationComponent.prototype.reset = function () {
        this.m_bStop = false;
        this.m_curTime = 0;
        if (this.m_pView) {
            this.m_pView.alpha = 0;
        }
    };
    return CBreathAnimationComponent;
}(CComponent_1.CComponent));
exports.default = CBreathAnimationComponent;
},{"./CComponent":15}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gameframework_1 = require("../../../hbcore/gameframework");
var CComponent = /** @class */ (function (_super) {
    __extends(CComponent, _super);
    function CComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_bProcessByParent = true;
        return _this;
    }
    CComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    CComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this); // 在onAwake中addComponent
    };
    CComponent.prototype.reset = function () {
    };
    CComponent.prototype.start = function () {
        _super.prototype.awake.call(this);
        return _super.prototype.start.call(this);
    };
    CComponent.prototype.onStart = function () {
        return _super.prototype.onStart.call(this);
    };
    CComponent.prototype.getComponent = function (cls) {
        return _super.prototype.getBean.call(this, cls);
    };
    CComponent.prototype.addComponent = function (obj) {
        _super.prototype.addBean.call(this, obj);
    };
    CComponent.prototype.removeComponent = function (obj) {
        _super.prototype.removeBean.call(this, obj);
    };
    // 执行子组件的process不会带参数
    CComponent.prototype.process = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var beans = this.getBeans();
        if (beans) {
            for (var i = 0; i < beans.length; i++) {
                var o = beans[i];
                if (o.m_bProcessByParent) {
                    o.process();
                }
            }
        }
    };
    return CComponent;
}(gameframework_1.gameframework.framework.CContainerLifeCycle));
exports.CComponent = CComponent;
},{"../../../hbcore/gameframework":261}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("./CComponent");
// view 需要有closeHandler, 并在关闭时调用closeHandler
var COpenSubViewComponent = /** @class */ (function (_super) {
    __extends(COpenSubViewComponent, _super);
    function COpenSubViewComponent() {
        var _this = _super.call(this) || this;
        _this.autoAddToParent = true;
        _this.m_bProcessByParent = false;
        return _this;
    }
    COpenSubViewComponent.prototype.onDestroy = function () {
        for (var key in this.m_viewList) {
            var viewData = this.m_viewList[key];
            if (viewData) {
                if (viewData.view) {
                    viewData.view.removeSelf();
                    Laya.Pool.recover(viewData.sign, viewData.view);
                }
            }
            this.m_viewList[key] = null;
        }
        this.m_viewList = [];
        _super.prototype.onDestroy.call(this);
    };
    COpenSubViewComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_viewList = new Array();
        return true;
    };
    COpenSubViewComponent.prototype.process = function (type, sign, viewIndex, pParent, isTween, onShowedCallback, onHidedCallback) {
        var _this = this;
        if (pParent === void 0) { pParent = null; }
        if (isTween === void 0) { isTween = false; }
        if (onShowedCallback === void 0) { onShowedCallback = null; }
        if (onHidedCallback === void 0) { onHidedCallback = null; }
        if (this.isViewShowed(viewIndex)) {
            return;
        }
        var view = Laya.Pool.getItemByClass(sign, type);
        this.m_viewList[viewIndex] = new ViewData(sign, view);
        var closeHandler = Laya.Handler.create(this, function () {
            if (isTween) {
                var toY = view.y - 200;
                view.alpha = 1;
                Laya.Tween.to(view, { alpha: 0.1, y: toY }, 500, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    view.y += 200;
                    view.alpha = 1;
                    _this.hideView(closeHandler, sign, viewIndex, onHidedCallback);
                }));
            }
            else {
                _this.hideView(closeHandler, sign, viewIndex, onHidedCallback);
            }
        }, null, false);
        view.closeHandler = closeHandler;
        if (this.autoAddToParent) {
            this.showView(pParent, viewIndex, onShowedCallback);
        }
        if (isTween) {
            var toY = view.y;
            view.y += 200;
            view.alpha = 0.1;
            Laya.Tween.to(view, { alpha: 1, y: toY }, 500);
        }
    };
    COpenSubViewComponent.prototype.getView = function (index) {
        return this.m_viewList[index];
    };
    COpenSubViewComponent.prototype.hideView = function (closeHandler, sign, viewIndex, onHidedCallback) {
        if (onHidedCallback === void 0) { onHidedCallback = null; }
        var view = this.getView(viewIndex).view;
        view.removeSelf();
        Laya.Pool.recover(sign, view);
        view = null;
        this.m_viewList[viewIndex] = null;
        closeHandler.recover();
        if (onHidedCallback) {
            onHidedCallback.run();
        }
    };
    // autoAddToParent为false, 需要手动调showView显示界面
    COpenSubViewComponent.prototype.showView = function (parentView, index, onShowedCallback) {
        if (onShowedCallback === void 0) { onShowedCallback = null; }
        if (parentView) {
            parentView.addChild(this.getView(index).view);
        }
        else {
            Laya.stage.addChild(this.getView(index).view);
        }
        if (onShowedCallback) {
            onShowedCallback.run();
        }
    };
    COpenSubViewComponent.prototype.isViewShowed = function (viewIndex) {
        if (viewIndex >= this.m_viewList.length) {
            return false;
        }
        var view = this.m_viewList[viewIndex];
        return view != null;
    };
    return COpenSubViewComponent;
}(CComponent_1.CComponent));
exports.default = COpenSubViewComponent;
var ViewData = /** @class */ (function () {
    function ViewData(sign, view) {
        this.sign = sign;
        this.view = view;
    }
    return ViewData;
}());
},{"./CComponent":15}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("./CComponent");
// 效果可以使用拖动之后，停在一个完整的cell处
// event : pageChange : 当当前显示的页数发生改变时派发, data:{min, max}, 表示当前显示内容所在的页数(滚动时，基本上都是跨2个page)
// 拖动列表
// 1.list所有内容都显示的, 没有翻页的
// 2.list在panel的下层(实现这种效果必须用到panel)
// 3.拖动是按拖动长度滚动, 拖动越长滚动越长
var CRollListType1Component = /** @class */ (function (_super) {
    __extends(CRollListType1Component, _super);
    function CRollListType1Component(rootView, pPanel, pList, isVScroll, showItemCount, left, right) {
        if (left === void 0) { left = null; }
        if (right === void 0) { right = null; }
        var _this = _super.call(this) || this;
        _this.m_bTweening = false;
        _this.tweenTime = 400;
        _this.showItemCount = 3;
        _this.MOVE_STEP_K = 1;
        _this.needUpdatePage = false;
        _this.m_lastMinPage = 0;
        _this.m_lastMaxPage = 0;
        _this.showItemCount = showItemCount;
        _this.view = rootView;
        _this.panel = pPanel;
        _this.list = pList;
        _this.isVScroll = isVScroll;
        _this.left = left;
        _this.right = right;
        return _this;
    }
    CRollListType1Component.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.panel.off(Laya.Event.MOUSE_DOWN, this, this._onMouseDown);
        this.view.off(Laya.Event.MOUSE_MOVE, this, this._onMouseMove);
        this.view.off(Laya.Event.MOUSE_UP, this, this._onMouseUp);
        this.left && this.left.off(Laya.Event.MOUSE_DOWN, this, this._onLeftPage);
        this.right && this.right.off(Laya.Event.MOUSE_DOWN, this, this._onRightPage);
        this.leftRightClickHandler = null;
        _super.prototype.onDestroy.call(this);
    };
    CRollListType1Component.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_curIndex = 0;
        this.m_baseListPos = this.list.x;
        this.m_cellSize = -1;
        this.left && this.left.on(Laya.Event.MOUSE_DOWN, this, this._onLeftPage);
        this.right && this.right.on(Laya.Event.MOUSE_DOWN, this, this._onRightPage);
        this.panel.on(Laya.Event.MOUSE_DOWN, this, this._onMouseDown);
        return true;
    };
    CRollListType1Component.prototype._onMouseDown = function (e) {
        // console.log('_onMouseDown')
        //e.stopPropagation();
        if (this.m_bTweening) {
            return;
        }
        if (this.isVScroll) {
            this.m_startPos = Laya.stage.mouseY;
        }
        else {
            this.m_startPos = Laya.stage.mouseX;
        }
        this.view.on(Laya.Event.MOUSE_MOVE, this, this._onMouseMove);
        this.view.on(Laya.Event.MOUSE_UP, this, this._onMouseUp);
    };
    CRollListType1Component.prototype._onMouseMove = function () {
        // console.log('mousemove')
        var curPos;
        if (this.isVScroll) {
            curPos = Laya.stage.mouseY;
        }
        else {
            curPos = Laya.stage.mouseX;
        }
        if (!this.m_bDraging) {
            if (Math.abs(this.m_startPos - curPos) > 10) {
                this.m_bDraging = true;
                var lockPos = void 0;
                var rect = void 0;
                if (this.isVScroll) {
                    lockPos = this.list.x;
                    rect = new Laya.Rectangle(lockPos, -44444, 0, 99999);
                }
                else {
                    lockPos = this.list.y;
                    rect = new Laya.Rectangle(-44444, lockPos, 99999, 0);
                }
                this.list.startDrag(rect);
            }
        }
        else {
            this._updateMinMaxPage();
        }
    };
    CRollListType1Component.prototype._onMouseUp = function (e) {
        // console.log('_onMouseUp')
        // e.stopPropagation();
        this.list.stopDrag();
        this.m_bDraging = false;
        var curPos;
        if (this.isVScroll) {
            curPos = Laya.stage.mouseY;
        }
        else {
            curPos = Laya.stage.mouseX;
        }
        if (Math.abs(this.m_startPos - curPos) > 10) {
            // tween to
            var isMoveLeft = this.m_startPos > curPos;
            var moveStep = ((Math.abs(this.m_startPos - curPos) / this._getCellSpace()) + 1) >> 0;
            this.moveList(!isMoveLeft, false, moveStep);
        }
        else {
            this.moveList(false, true, 1);
        }
        this.view.off(Laya.Event.MOUSE_MOVE, this, this._onMouseMove);
        this.view.off(Laya.Event.MOUSE_UP, this, this._onMouseUp);
    };
    CRollListType1Component.prototype.moveList = function (bLeftOrTop, updateOnly, moveStep) {
        moveStep *= this.MOVE_STEP_K;
        if (!updateOnly) {
            var repeat = void 0;
            if (this.isVScroll) {
                repeat = this.list.repeatY;
            }
            else {
                repeat = this.list.repeatX;
            }
            if (bLeftOrTop) {
                this.m_curIndex -= moveStep;
                if (this.m_curIndex <= 0) {
                    this.m_curIndex = 0;
                }
            }
            else {
                this.m_curIndex += moveStep;
                if (this.m_curIndex >= repeat - this.showItemCount) {
                    this.m_curIndex = repeat - this.showItemCount;
                }
            }
        }
        Laya.Tween.clearAll(this.list);
        var toPos = this.m_baseListPos - (this.m_curIndex * this._getCellSpace());
        if (this.isVScroll) {
            Laya.Tween.to(this.list, { y: toPos }, this.tweenTime, Laya.Ease.linearIn, Laya.Handler.create(this, this._updateMinMaxPage));
        }
        else {
            Laya.Tween.to(this.list, { x: toPos }, this.tweenTime, Laya.Ease.linearIn, Laya.Handler.create(this, this._updateMinMaxPage));
        }
    };
    CRollListType1Component.prototype._updateMinMaxPage = function () {
        if (!this.needUpdatePage) {
            return;
        }
        var pos;
        var size;
        if (this.isVScroll) {
            pos = this.list.y;
            size = this.panel.height;
        }
        else {
            pos = this.list.x;
            size = this.panel.width;
        }
        var pagePos = pos / size;
        pagePos = Math.abs(pagePos);
        var min = Math.floor(pagePos);
        var max = Math.ceil(pagePos);
        // console.log('------------------------list.pos : ' + pos + ', panel.size : ' + size + ' minPage : ' + min + ', maxPage : ' + max);
        if (min != this.m_lastMinPage || max != this.m_lastMaxPage) {
            this.m_lastMinPage = min;
            this.m_lastMaxPage = max;
            this.event(CRollListType1Component.EVENT_PAGE_CHANGE, { min: min, max: max });
        }
    };
    CRollListType1Component.prototype._onLeftPage = function (e) {
        e.stopPropagation();
        this.moveList(true, false, 1);
        if (this.leftRightClickHandler) {
            this.leftRightClickHandler.run();
        }
    };
    CRollListType1Component.prototype._onRightPage = function (e) {
        e.stopPropagation();
        this.moveList(false, false, 1);
        if (this.leftRightClickHandler) {
            this.leftRightClickHandler.run();
        }
    };
    CRollListType1Component.prototype._getCellSize = function () {
        if (this.m_cellSize == -1) {
            var cell = this.list.getCell(0);
            if (!cell) {
                return;
            }
            if (this.isVScroll) {
                this.m_cellSize = cell.height;
            }
            else {
                this.m_cellSize = cell.width;
            }
        }
        return this.m_cellSize;
    };
    CRollListType1Component.prototype._getCellSpace = function () {
        if (this.isVScroll) {
            return this._getCellSize() + this.list.spaceY;
        }
        else {
            return this._getCellSize() + this.list.spaceX;
        }
    };
    return CRollListType1Component;
}(CComponent_1.CComponent));
exports.default = CRollListType1Component;
},{"./CComponent":15}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CGlobalConf = /** @class */ (function () {
    function CGlobalConf() {
    }
    CGlobalConf.GetPointSound = function (isBanker, point) {
        var user;
        if (isBanker) {
            user = 'BANKER';
        }
        else {
            user = 'XIAN';
        }
        var ret = 'SOUND_' + user + '_POINT_' + point;
        return CGlobalConf[ret];
    };
    CGlobalConf.getImageIconByGameCode = function (gameCode) {
        switch (gameCode) {
            case this.GAME_CODE.BlackJack:
                return 'hall/img_21dian.png';
            case this.GAME_CODE.Bacc:
                return 'hall/img_baijiale.png';
            case this.GAME_CODE.LongHu:
                return 'hall/img_longhu.png';
            case this.GAME_CODE.SaiBao:
                return 'hall/img_toubao.png';
            default:
                return 'hall/img_lunpan.png';
        }
    };
    /**游戏是否开启，未开启显示敬请期待: 开启 true  未开启： false*/
    CGlobalConf.getGameOpenStatus = function (gameCode) {
        switch (gameCode) {
            case this.GAME_CODE.BlackJack:
                return false;
            case this.GAME_CODE.Bacc:
                return true;
            case this.GAME_CODE.LongHu:
                return false;
            case this.GAME_CODE.SaiBao:
                return false;
            default:
                return false;
        }
    };
    CGlobalConf.LOGIN_WALLET = 0;
    CGlobalConf.LOGIN_NORMAL = 1;
    CGlobalConf.CONFIG_URL = "conf/configs.json";
    CGlobalConf.SOUND_BTN = 'button';
    CGlobalConf.SOUND_BG1 = 'gbg1';
    CGlobalConf.SOUND_BG2 = 'gbg2';
    CGlobalConf.SOUND_BG3 = 'gbg3';
    CGlobalConf.SOUND_BANKER_BO_POKER = 'game/eff_filling_banker';
    CGlobalConf.SOUND_XIAN_BO_POKER = 'game/eff_filling_player';
    CGlobalConf.SOUND_HE = 'game/eff_win_0';
    CGlobalConf.SOUND_BANKER_WIN = 'game/eff_win_1';
    CGlobalConf.SOUND_XIAN_WIN = 'game/eff_win_2';
    CGlobalConf.SOUND_BANKER_POINT_0 = 'game/eff_banker_0';
    CGlobalConf.SOUND_BANKER_POINT_1 = 'game/eff_banker_1';
    CGlobalConf.SOUND_BANKER_POINT_2 = 'game/eff_banker_2';
    CGlobalConf.SOUND_BANKER_POINT_3 = 'game/eff_banker_3';
    CGlobalConf.SOUND_BANKER_POINT_4 = 'game/eff_banker_4';
    CGlobalConf.SOUND_BANKER_POINT_5 = 'game/eff_banker_5';
    CGlobalConf.SOUND_BANKER_POINT_6 = 'game/eff_banker_6';
    CGlobalConf.SOUND_BANKER_POINT_7 = 'game/eff_banker_7';
    CGlobalConf.SOUND_BANKER_POINT_8 = 'game/eff_banker_8';
    CGlobalConf.SOUND_BANKER_POINT_9 = 'game/eff_banker_9';
    CGlobalConf.SOUND_XIAN_POINT_0 = 'game/eff_player_0';
    CGlobalConf.SOUND_XIAN_POINT_1 = 'game/eff_player_1';
    CGlobalConf.SOUND_XIAN_POINT_2 = 'game/eff_player_2';
    CGlobalConf.SOUND_XIAN_POINT_3 = 'game/eff_player_3';
    CGlobalConf.SOUND_XIAN_POINT_4 = 'game/eff_player_4';
    CGlobalConf.SOUND_XIAN_POINT_5 = 'game/eff_player_5';
    CGlobalConf.SOUND_XIAN_POINT_6 = 'game/eff_player_6';
    CGlobalConf.SOUND_XIAN_POINT_7 = 'game/eff_player_7';
    CGlobalConf.SOUND_XIAN_POINT_8 = 'game/eff_player_8';
    CGlobalConf.SOUND_XIAN_POINT_9 = 'game/eff_player_9';
    CGlobalConf.GAME_CODE = {
        Hall: "Hall",
        SaiBao: "Sicbo",
        BlackJack: "BlackJack",
        LongHu: "LongHu",
        Bacc: "Bacc" // 百家乐
    };
    return CGlobalConf;
}());
exports.default = CGlobalConf;
},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ...
 * @author
 */
var CPath = /** @class */ (function () {
    function CPath() {
    }
    CPath.getAtlasPath = function (uiName) {
        return CPath.ATLAS_PATH + uiName + ".atlas";
    };
    CPath.getPokerPath = function (pokerName) {
        return 'common/poker/' + pokerName + '.png';
    };
    CPath.getSoundPath = function (name) {
        return CPath.s_rootDir + name + CPath.TYPE;
    };
    CPath.ATLAS_PATH = "res/atlas/";
    CPath.s_rootDir = 'sound/';
    CPath.TYPE = '.wav';
    return CPath;
}());
exports.CPath = CPath;
},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaseNet_1 = require("../../net/CBaseNet");
// 下注历史记录 百家乐用了这个数据
var CBetsHistroyData = /** @class */ (function () {
    function CBetsHistroyData() {
    }
    return CBetsHistroyData;
}());
exports.CBetsHistroyData = CBetsHistroyData;
var CBetsHistroyListData = /** @class */ (function (_super) {
    __extends(CBetsHistroyListData, _super);
    function CBetsHistroyListData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBetsHistroyListData;
}(CBaseNet_1.default));
exports.CBetsHistroyListData = CBetsHistroyListData;
},{"../../net/CBaseNet":216}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CPokerData = /** @class */ (function () {
    function CPokerData() {
    }
    CPokerData.prototype.updateByData = function (data) {
        this.id = data['id'];
        this.seed = data['seed'];
        this.mark = data['mark'];
        this.poker = data['poker'];
        if (data.hasOwnProperty('areaID')) {
            this.areaID = data['areaID'];
        }
    };
    CPokerData.getColor = function (data) {
        var value = Number(data.poker);
        var ret = (value / 100) >> 0;
        return ret;
    };
    CPokerData.getPoint = function (data) {
        var value = Number(data.poker);
        var ret = (value % 100);
        return ret;
    };
    CPokerData.getColorStr = function (data) {
        var color = CPokerData.getColor(data);
        var ret; // 1黑桃, 2红桃, 3梅花, 4方块
        switch (color) {
            case 1:
                ret = 'black';
                break;
            case 2:
                ret = 'red';
                break;
            case 3:
                ret = 'plum';
                break;
            case 4:
                ret = 'piece';
                break;
        }
        return ret;
    };
    // JQK => 10
    CPokerData.getRealPoint = function (data) {
        var ret = this.getPoint(data);
        if (ret > 10) {
            return 10;
        }
        return ret;
    };
    CPokerData.getPokerStr = function (data) {
        var value = 'card_' + CPokerData.getColorStr(data) + '_' + CPokerData.getPoint(data);
        return value;
    };
    // 传进入的是使用realpoint之后算出来的点, 再转换
    CPokerData.toPoint = function (point) {
        return point % 10;
    };
    Object.defineProperty(CPokerData.prototype, "isSplit", {
        get: function () { return this.areaID > 9; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPokerData.prototype, "areaIndex", {
        get: function () {
            if (this.isSplit) {
                return this.areaID - 11;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    return CPokerData;
}());
exports.CPokerData = CPokerData;
var CDealPokerData = /** @class */ (function () {
    function CDealPokerData(pokerData, index, isBanker, pid, subIdx) {
        if (pid === void 0) { pid = 0; }
        if (subIdx === void 0) { subIdx = 0; }
        this.pokerData = pokerData;
        this.index = index;
        this.isBanker = isBanker;
        this.pid = pid;
        this.subIndex = subIdx;
    }
    Object.defineProperty(CDealPokerData.prototype, "point", {
        get: function () {
            if (this.pokerData) {
                return CPokerData.getPoint(this.pokerData);
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CDealPokerData.prototype, "realPoint", {
        get: function () {
            if (this.pokerData) {
                return CPokerData.getRealPoint(this.pokerData);
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    return CDealPokerData;
}());
exports.CDealPokerData = CDealPokerData;
},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBetsCoinData = /** @class */ (function () {
    function CBetsCoinData(areaIndex, coinData) {
        this.areaIndex = areaIndex;
        this.coinData = coinData;
    }
    return CBetsCoinData;
}());
exports.CBetsCoinData = CBetsCoinData;
},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../gm/GM");
var GameNetResponse_1 = require("../../../gm/GameNetResponse");
var CPokerData_1 = require("./CPokerData");
// 通用网络模块
// 通用数据模块
var common;
(function (common) {
    var netData;
    (function (netData) {
        netData.NetConf = {
            // 公共
            // Reconnect:'1102',
            BetHistroy: '1112',
            // Disconnect:'1201',
            CountDown: '1203',
            InOutRoom: '1204',
            // ExitRoom:'1205',
            Shuffle: '1206',
        };
        // ==================================结构体==================================
        var CPokerDetailData = /** @class */ (function () {
            function CPokerDetailData() {
                this.pokers = [];
            }
            CPokerDetailData.prototype.reset = function () {
                this.pokers.length = 0;
            };
            CPokerDetailData.prototype.updateByData = function (data) {
                this.bluePlace = data['bulePlace'];
                if (data.hasOwnProperty('pokers')) {
                    var pokers = data['pokers'];
                    if (pokers) {
                        for (var i = 0; i < pokers.length; ++i) {
                            var pObjData = pokers[i];
                            var index = pObjData.id - 1;
                            var pInfo = new CPokerData_1.CPokerData();
                            pInfo.updateByData(pokers[i]);
                            this.pokers[index] = pInfo;
                        }
                    }
                }
            };
            return CPokerDetailData;
        }());
        netData.CPokerDetailData = CPokerDetailData;
        var CBetsHistroyData = /** @class */ (function () {
            function CBetsHistroyData() {
            }
            CBetsHistroyData.prototype.updateByData = function (data) {
                this.time = data['time'];
                this.totalBet = data['totalBet'];
                this.sendCoin = data['sendCoin'];
                this.profit = data['profit'];
                this.currencyCode = data['currencyCode'];
            };
            return CBetsHistroyData;
        }());
        netData.CBetsHistroyData = CBetsHistroyData;
        var CBetsHistroyListData = /** @class */ (function () {
            function CBetsHistroyListData() {
            }
            CBetsHistroyListData.prototype.updateByData = function (data) {
                this.history = [];
                if (data.hasOwnProperty('history')) {
                    var historyList = data['history'];
                    if (historyList && historyList.length > 0) {
                        for (var i = 0; i < historyList.length; ++i) {
                            var historyData = new CBetsHistroyData();
                            historyData.updateByData(historyList[i]);
                            this.history.push(historyData);
                        }
                    }
                }
            };
            return CBetsHistroyListData;
        }());
        netData.CBetsHistroyListData = CBetsHistroyListData;
        function getHallNet() {
            return GM_1.GM.instance.network.sfsHall;
        }
        function getGameNet() {
            return GM_1.GM.instance.network.sfsGame;
        }
        // ==================================send=====================================================
        function sendExitRoom() {
            getGameNet().send(GameNetResponse_1.GameConf.ExitGame, {});
        }
        netData.sendExitRoom = sendExitRoom;
        ;
        function sendReconnect(roomName) {
            getGameNet().send(GameNetResponse_1.GameConf.Reconnect, { roomName: roomName });
        }
        netData.sendReconnect = sendReconnect;
        ;
        function sendBetHistroy(gameCode) {
            getGameNet().send(netData.NetConf.BetHistroy, { gameCode: gameCode });
        }
        netData.sendBetHistroy = sendBetHistroy;
    })(netData = common.netData || (common.netData = {}));
})(common = exports.common || (exports.common = {}));
},{"../../../gm/GM":221,"../../../gm/GameNetResponse":223,"./CPokerData":21}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CBetsHistroyListComponent_1 = require("./component/CBetsHistroyListComponent");
var CBetsHistroyController = /** @class */ (function (_super) {
    __extends(CBetsHistroyController, _super);
    function CBetsHistroyController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CBetsHistroyController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_view.close_btn.on(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_view.panel.vScrollBar.skin = "";
        this.m_view.panel.vScrollBar.hide = true;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CBetsHistroyListComponent_1.default(this));
        this.m_componentManager.start();
    };
    CBetsHistroyController.prototype.onDisable = function () {
        this.m_view.close_btn.off(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_componentManager.destroy();
        this.m_componentManager = null;
    };
    CBetsHistroyController.prototype.onUpdate = function () {
        if (this.model.isDirty) {
            this.model.validate();
            this.updateView();
        }
    };
    CBetsHistroyController.prototype.updateView = function () {
        this._updateView();
    };
    CBetsHistroyController.prototype._updateView = function () {
        this.m_componentManager.process();
    };
    CBetsHistroyController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    Object.defineProperty(CBetsHistroyController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CBetsHistroyController;
}(Laya.Script));
exports.default = CBetsHistroyController;
},{"../../../common/component/CComponent":15,"./component/CBetsHistroyListComponent":27}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBetsHistroyModel = /** @class */ (function () {
    function CBetsHistroyModel() {
        this.m_bDirty = false;
    }
    Object.defineProperty(CBetsHistroyModel.prototype, "histroyList", {
        get: function () {
            return this.m_histroyList;
        },
        set: function (v) {
            this.m_histroyList = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CBetsHistroyModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CBetsHistroyModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CBetsHistroyModel;
}());
exports.CBetsHistroyModel = CBetsHistroyModel;
},{}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CBetsHistroyModel_1 = require("./CBetsHistroyModel");
var CBetsHistroyView = /** @class */ (function (_super) {
    __extends(CBetsHistroyView, _super);
    function CBetsHistroyView() {
        var _this = _super.call(this) || this;
        _this.model = new CBetsHistroyModel_1.CBetsHistroyModel();
        return _this;
    }
    CBetsHistroyView.prototype.onDestroy = function () {
    };
    CBetsHistroyView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CBetsHistroyView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CBetsHistroyView.prototype._updateView = function () {
    };
    CBetsHistroyView.prototype._onEvent = function () {
    };
    CBetsHistroyView.prototype._offEvent = function () {
    };
    Object.defineProperty(CBetsHistroyView.prototype, "blank", {
        get: function () { return this.getChildByName('blank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_lbl", {
        get: function () { return this.getChildByName('title_lbl'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "close_btn", {
        get: function () { return this.getChildByName('close_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title", {
        // title
        get: function () { return this.getChildByName('title'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_bg", {
        get: function () { return this.title.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_time", {
        get: function () { return this.title.getChildByName('time'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_coin", {
        get: function () { return this.title.getChildByName('coin'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_bets", {
        get: function () { return this.title.getChildByName('bets'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_paicai", {
        get: function () { return this.title.getChildByName('paicai'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "title_result", {
        get: function () { return this.title.getChildByName('result'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "panel", {
        get: function () { return this.getChildByName('panel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBetsHistroyView.prototype, "list", {
        get: function () { return this.panel.getChildByName('list'); },
        enumerable: true,
        configurable: true
    });
    CBetsHistroyView.prototype.get_list_time = function (item) { return item.getChildByName('time'); };
    CBetsHistroyView.prototype.get_list_coin = function (item) { return item.getChildByName('coin'); };
    CBetsHistroyView.prototype.get_list_bets = function (item) { return item.getChildByName('bets'); };
    CBetsHistroyView.prototype.get_list_paicai = function (item) { return item.getChildByName('paicai'); };
    CBetsHistroyView.prototype.get_list_result = function (item) { return item.getChildByName('result'); };
    CBetsHistroyView.prototype.get_list_arrow = function (item) { return item.getChildByName('arrow'); };
    CBetsHistroyView.SIGN = 'CBetsHistroyView';
    return CBetsHistroyView;
}(layaMaxUI_1.ui.gamelist.commonView.BetsHistroyViewUI));
exports.default = CBetsHistroyView;
},{"../../../../ui/layaMaxUI":271,"./CBetsHistroyModel":25}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CBetsHistroyListComponent = /** @class */ (function (_super) {
    __extends(CBetsHistroyListComponent, _super);
    function CBetsHistroyListComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBetsHistroyListComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        ApiUtil_1.ApiUtil.recoverHandler(this.m_pController.view.list.renderHandler);
        this.m_pController.view.list.renderHandler = null;
    };
    CBetsHistroyListComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBetsHistroyListComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pController.view.panel.scrollTo(0, 0);
        this.m_pController.view.list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        return true;
    };
    CBetsHistroyListComponent.prototype.process = function () {
        var histroyList = this.m_pController.model.histroyList;
        if (!histroyList) {
            histroyList = [];
        }
        this.m_pController.view.list.repeatY = histroyList.length; //((histroyList.length-1)/this.m_pController.view.list.repeatX+1) >> 0;
        this.m_pController.view.list.array = histroyList;
    };
    CBetsHistroyListComponent.prototype._onRenderItem = function (comp, idx) {
        if (!comp.dataSource) {
            comp.dataSource = null;
            comp.visible = false;
            return;
        }
        var data = comp.dataSource;
        comp.visible = true;
        var view = this.m_pController.view;
        var subTimeStr = data.time.substr(11, 5);
        view.get_list_time(comp).text = subTimeStr;
        view.get_list_paicai(comp).text = data.sendCoin.toString();
        if (!data.currencyCode || data.currencyCode.length == null) {
            view.get_list_coin(comp).text = 'BCB';
        }
        else {
            view.get_list_coin(comp).text = data.currencyCode;
        }
        view.get_list_bets(comp).text = data.totalBet.toString();
        var result = view.get_list_result(comp);
        if (Math.abs(data.profit) < 0.00000001) {
            result.color = '#ffffff';
            result.text = '0';
        }
        else if (data.profit > 0) {
            result.color = '#12893d';
            result.text = '+' + data.profit.toString();
        }
        else if (data.profit < 0) {
            result.color = '#ea0c1e';
            result.text = data.profit.toString();
        }
    };
    return CBetsHistroyListComponent;
}(CComponent_1.CComponent));
exports.default = CBetsHistroyListComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CBottomContentComponent_1 = require("./component/CBottomContentComponent");
var CBottomController = /** @class */ (function (_super) {
    __extends(CBottomController, _super);
    function CBottomController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CBottomController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CBottomContentComponent_1.default(this));
        this.m_componentManager.start();
    };
    CBottomController.prototype.onDisable = function () {
        this.m_componentManager.destroy();
        this.m_componentManager = null;
    };
    CBottomController.prototype.onUpdate = function () {
        if (this.model.isDirty) {
            this.model.validate();
            this.updateView();
        }
    };
    CBottomController.prototype.updateView = function () {
        this._updateView();
    };
    CBottomController.prototype._updateView = function () {
        this.m_componentManager.getComponent(CBottomContentComponent_1.default).process();
    };
    Object.defineProperty(CBottomController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CBottomController;
}(Laya.Script));
exports.default = CBottomController;
},{"../../../common/component/CComponent":15,"./component/CBottomContentComponent":31}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBottomModel = /** @class */ (function () {
    function CBottomModel() {
        this.m_bDirty = false;
    }
    Object.defineProperty(CBottomModel.prototype, "roomName", {
        get: function () {
            return this.m_roomName;
        },
        set: function (v) {
            this.m_roomName = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomModel.prototype, "roundNum", {
        get: function () {
            return this.m_roundNum;
        },
        set: function (v) {
            this.m_roundNum = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomModel.prototype, "roundCount", {
        get: function () {
            return this.m_roundCount;
        },
        set: function (v) {
            this.m_roundCount = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomModel.prototype, "limit", {
        get: function () {
            return this.m_limit;
        },
        set: function (v) {
            this.m_limit = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CBottomModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CBottomModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CBottomModel;
}());
exports.CBottomModel = CBottomModel;
},{}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CBottomModel_1 = require("./CBottomModel");
var CBottomView = /** @class */ (function (_super) {
    __extends(CBottomView, _super);
    function CBottomView() {
        var _this = _super.call(this) || this;
        _this.model = new CBottomModel_1.CBottomModel;
        return _this;
    }
    Object.defineProperty(CBottomView.prototype, "roomName", {
        get: function () { return this.getChildByName('roomName'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "line1", {
        get: function () { return this.getChildByName('line1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "line2", {
        get: function () { return this.getChildByName('line2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "line3", {
        get: function () { return this.getChildByName('line3'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roomBg", {
        get: function () { return this.getChildByName('roomBg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roundBg", {
        get: function () { return this.getChildByName('roundBg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "limitBg", {
        get: function () { return this.getChildByName('limitBg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roomTitle", {
        get: function () { return this.getChildByName('roomTitle'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roundTitle", {
        get: function () { return this.getChildByName('roundTitle'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "limitTitle", {
        get: function () { return this.getChildByName('limitTitle'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roomID", {
        get: function () { return this.getChildByName('roomID'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "roundID", {
        get: function () { return this.getChildByName('roundID'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBottomView.prototype, "limit", {
        get: function () { return this.getChildByName('limit'); },
        enumerable: true,
        configurable: true
    });
    CBottomView.SIGN = 'CBottomView';
    return CBottomView;
}(layaMaxUI_1.ui.gamelist.commonView.GameBottomUI));
exports.default = CBottomView;
},{"../../../../ui/layaMaxUI":271,"./CBottomModel":29}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var CBottomContentComponent = /** @class */ (function (_super) {
    __extends(CBottomContentComponent, _super);
    function CBottomContentComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBottomContentComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBottomContentComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBottomContentComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBottomContentComponent.prototype.process = function () {
        this.m_pController.view.roomName.text = this.m_pController.model.roomName;
        this.m_pController.view.roomID.text = this.m_pController.model.roundNum;
        this.m_pController.view.roundID.text = this.m_pController.model.roundCount;
        this.m_pController.view.limit.text = this.m_pController.model.limit;
    };
    return CBottomContentComponent;
}(CComponent_1.CComponent));
exports.default = CBottomContentComponent;
},{"../../../../common/component/CComponent":15}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CLookPokersListComponent_1 = require("./component/CLookPokersListComponent");
var CLookPokersController = /** @class */ (function (_super) {
    __extends(CLookPokersController, _super);
    function CLookPokersController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CLookPokersController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_view.closeBtn.on(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_view.panel.vScrollBar.skin = "";
        this.m_view.panel.vScrollBar.hide = true;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CLookPokersListComponent_1.default(this));
        this.m_componentManager.start();
        // this.updateView();
    };
    CLookPokersController.prototype.onDisable = function () {
        this.m_view.closeBtn.off(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_componentManager.destroy();
        this.m_componentManager = null;
    };
    CLookPokersController.prototype.onUpdate = function () {
        if (this.model.isDirty) {
            this.model.validate();
            this.updateView();
        }
    };
    CLookPokersController.prototype.updateView = function () {
        this._updateView();
    };
    CLookPokersController.prototype._updateView = function () {
        this.m_componentManager.process();
    };
    CLookPokersController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    Object.defineProperty(CLookPokersController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CLookPokersController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CLookPokersController;
}(Laya.Script));
exports.default = CLookPokersController;
},{"../../../common/component/CComponent":15,"./component/CLookPokersListComponent":35}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CLookPokersModel = /** @class */ (function () {
    function CLookPokersModel() {
        this.m_bDirty = false;
    }
    Object.defineProperty(CLookPokersModel.prototype, "pokerList", {
        get: function () {
            return this.m_pokerList;
        },
        set: function (v) {
            this.m_pokerList = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CLookPokersModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CLookPokersModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CLookPokersModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CLookPokersModel;
}());
exports.CLookPokersModel = CLookPokersModel;
},{}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CLookPokersModel_1 = require("./CLookPokersModel");
var CLookPokersView = /** @class */ (function (_super) {
    __extends(CLookPokersView, _super);
    function CLookPokersView() {
        var _this = _super.call(this) || this;
        _this.model = new CLookPokersModel_1.CLookPokersModel();
        return _this;
    }
    CLookPokersView.prototype.onDestroy = function () {
    };
    CLookPokersView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CLookPokersView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
        this.queryHandler = null;
    };
    CLookPokersView.prototype._updateView = function () {
    };
    CLookPokersView.prototype._onEvent = function () {
    };
    CLookPokersView.prototype._offEvent = function () {
    };
    Object.defineProperty(CLookPokersView.prototype, "panel", {
        get: function () {
            return this.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CLookPokersView.prototype, "list", {
        get: function () {
            return this.panel.getChildByName('list');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CLookPokersView.prototype, "closeBtn", {
        get: function () {
            return this.getChildByName('close_btn');
        },
        enumerable: true,
        configurable: true
    });
    CLookPokersView.SIGN = 'CLookPokersView';
    return CLookPokersView;
}(layaMaxUI_1.ui.gamelist.commonView.LookPokerViewUI));
exports.default = CLookPokersView;
},{"../../../../ui/layaMaxUI":271,"./CLookPokersModel":33}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPokerView_1 = require("../../../../common/CPokerView");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CPath_1 = require("../../../../const/CPath");
var CRollListType1Component_1 = require("../../../../common/component/CRollListType1Component");
var CMD5CheckView_1 = require("../../md5/CMD5CheckView");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var CLookPokersListComponent = /** @class */ (function (_super) {
    __extends(CLookPokersListComponent, _super);
    function CLookPokersListComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CLookPokersListComponent.prototype.onDestroy = function () {
        this.getComponent(CRollListType1Component_1.default).off(CRollListType1Component_1.default.EVENT_PAGE_CHANGE, this, this._onPageChange);
        _super.prototype.onDestroy.call(this);
        ApiUtil_1.ApiUtil.recoverHandler(this.m_pController.view.list.renderHandler);
        ApiUtil_1.ApiUtil.recoverHandler(this.m_pController.view.list.mouseHandler);
        this.m_pController.view.list.renderHandler = null;
        this.m_pController.view.list.mouseHandler = null;
        this.m_pokerViewProxy = null;
    };
    CLookPokersListComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        var rollComponent = new CRollListType1Component_1.default(this.m_pController.view, this.m_pController.view.panel, this.m_pController.view.list, true, 7);
        this.addComponent(rollComponent);
        rollComponent.MOVE_STEP_K = 2;
        rollComponent.needUpdatePage = true;
        rollComponent.on(CRollListType1Component_1.default.EVENT_PAGE_CHANGE, this, this._onPageChange);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CLookPokersListComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pController.view.list.y = 0;
        this.m_pController.view.list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        this.m_pController.view.list.mouseHandler = ApiUtil_1.ApiUtil.createHandler(this, this._mouseHandler);
        this.m_pokerViewProxy = new CPokerView_1.default(null);
        return true;
    };
    CLookPokersListComponent.prototype.process = function () {
        var pokerList = this.m_pController.model.pokerList;
        this.m_pController.view.list.repeatY = ((pokerList.length - 1) / this.m_pController.view.list.repeatX + 1) >> 0;
        this.m_pController.view.list.array = pokerList;
    };
    CLookPokersListComponent.prototype._onRenderItem = function (comp, idx) {
        if (!comp.dataSource) {
            comp.dataSource = null;
            comp.visible = false;
            return;
        }
        var pokerInfo = comp.dataSource;
        comp.visible = true;
        var view = this.m_pController.view;
        this.m_pokerViewProxy.view = comp;
        var pokerView = this.m_pokerViewProxy;
        pokerView.blank.visible = false;
        pokerView.backImg.visible = false;
        pokerView.pokerImg.visible = false;
        pokerView.tipsImg1.visible = false;
        pokerView.tipsImg2.visible = false;
        pokerView.blueImg.visible = false;
        pokerView.idLbl.visible = false;
        if (pokerInfo.isBlue) {
            pokerView.blueImg.visible = true;
        }
        else {
            pokerView.idLbl.visible = true;
            pokerView.idLbl.text = pokerInfo.id.toString();
            var isOpen = pokerInfo.seed && pokerInfo.seed.length > 0;
            if (isOpen) {
                pokerView.blank.visible = true;
                pokerView.pokerImg.visible = true;
                pokerView.pokerImg.skin = CPath_1.CPath.getPokerPath(CPokerData_1.CPokerData.getPokerStr(pokerInfo));
                pokerView.tipsImg1.visible = true;
            }
            else {
                pokerView.backImg.visible = true;
                pokerView.tipsImg1.visible = true;
            }
        }
        // pokerInfo.mark;
    };
    CLookPokersListComponent.prototype._mouseHandler = function (e, idx) {
        if (e.type == Laya.Event.CLICK) {
            // let cell = this.m_pController.view.list.g etCell(idx);
            var cell = e.currentTarget;
            var pPokerData = cell.dataSource;
            if (!pPokerData || (pPokerData.mark == null || pPokerData.mark.length == 0)) {
                return;
            }
            this.m_pokerViewProxy.view = cell;
            var isIn = true;
            // if (this.m_pokerViewProxy.tipsImg1.visible) {
            //     isIn = this.m_pokerViewProxy.tipsImg1.hitTestPoint(e.stageX, e.stageY);
            // }
            // if (!isIn && this.m_pokerViewProxy.tipsImg2.visible) {
            //     isIn = this.m_pokerViewProxy.tipsImg2.hitTestPoint(e.stageX, e.stageY);                
            // }
            if (isIn) {
                var openSubViewComponent = this.getComponent(COpenSubViewComponent_1.default);
                openSubViewComponent.autoAddToParent = false;
                openSubViewComponent.process(CMD5CheckView_1.default, CMD5CheckView_1.default.SIGN, 0);
                var md5View = openSubViewComponent.getView(0).view;
                md5View.model.pokerData = pPokerData;
                openSubViewComponent.showView(Laya.stage, 0);
            }
        }
    };
    // data => {min:number, max:number}
    CLookPokersListComponent.prototype._onPageChange = function (data) {
        if (this.m_pController.view.queryHandler) {
            this.m_pController.view.queryHandler.runWith(data);
        }
    };
    return CLookPokersListComponent;
}(CComponent_1.CComponent));
exports.default = CLookPokersListComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../../../common/component/CComponent":15,"../../../../common/component/COpenSubViewComponent":16,"../../../../common/component/CRollListType1Component":17,"../../../../const/CPath":19,"../../../_commonModel/CPokerData":21,"../../md5/CMD5CheckView":38}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CMD5SetContentComponent_1 = require("./component/CMD5SetContentComponent");
var CMessageBox_1 = require("../../../common/CMessageBox");
var Lang_1 = require("../../../../hbcore/framework/Lang");
var HB_JS_FUNC = MyJSFunc.HB_JS_FUNC;
var CMD5CheckController = /** @class */ (function (_super) {
    __extends(CMD5CheckController, _super);
    function CMD5CheckController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CMD5CheckController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_view.closeBtn.on(Laya.Event.MOUSE_DOWN, this, this._onClose);
        if (Laya.Browser) {
            this.m_copyUtil = new HB_JS_FUNC();
        }
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CMD5SetContentComponent_1.default(this));
        this.m_componentManager.start();
        this.m_view.copySeedBtn.on(Laya.Event.CLICK, this, this._onCopyTxt, [this.m_view.zzValue]);
        this.m_view.copyZaiyaoBtn.on(Laya.Event.CLICK, this, this._onCopyTxt, [this.m_view.md5Value]);
        this.m_view.copyGongbuBtn.on(Laya.Event.CLICK, this, this._onCopyTxt, [this.m_view.target]);
    };
    CMD5CheckController.prototype.onDisable = function () {
        this.m_view.copySeedBtn.off(Laya.Event.CLICK, this, this._onCopyTxt);
        this.m_view.copyZaiyaoBtn.off(Laya.Event.CLICK, this, this._onCopyTxt);
        this.m_view.copyGongbuBtn.off(Laya.Event.CLICK, this, this._onCopyTxt);
        this.m_view.closeBtn.off(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_componentManager.destroy();
        this.m_componentManager = null;
        this.m_view = null;
        this.m_copyUtil = null;
    };
    CMD5CheckController.prototype.onUpdate = function () {
        if (this.model.isDirty) {
            this.model.validate();
            this.updateView();
        }
    };
    CMD5CheckController.prototype.updateView = function () {
        this._updateView();
    };
    CMD5CheckController.prototype._updateView = function () {
        this.m_componentManager.getComponent(CMD5SetContentComponent_1.default).process(this.model.pokerData);
    };
    CMD5CheckController.prototype._onCopyTxt = function (copylabel) {
        if (Laya.Browser) {
            this.m_copyUtil.clipboardCopy(copylabel.text);
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('copy_md5_check_success'));
        }
    };
    CMD5CheckController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    Object.defineProperty(CMD5CheckController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CMD5CheckController;
}(Laya.Script));
exports.default = CMD5CheckController;
},{"../../../../hbcore/framework/Lang":250,"../../../common/CMessageBox":8,"../../../common/component/CComponent":15,"./component/CMD5SetContentComponent":39}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CMD5CheckModel = /** @class */ (function () {
    function CMD5CheckModel() {
        this.m_bDirty = false;
    }
    Object.defineProperty(CMD5CheckModel.prototype, "pokerData", {
        get: function () {
            return this.m_pokerData;
        },
        set: function (v) {
            this.m_pokerData = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CMD5CheckModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CMD5CheckModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CMD5CheckModel;
}());
exports.CMD5CheckModel = CMD5CheckModel;
},{}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CMD5CheckModel_1 = require("./CMD5CheckModel");
var CMD5CheckView = /** @class */ (function (_super) {
    __extends(CMD5CheckView, _super);
    function CMD5CheckView() {
        var _this = _super.call(this) || this;
        _this.model = new CMD5CheckModel_1.CMD5CheckModel;
        return _this;
    }
    Object.defineProperty(CMD5CheckView.prototype, "zzValue", {
        get: function () { return this.getChildByName('zzValue'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "md5Value", {
        get: function () { return this.getChildByName('md5Value'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "pokerView", {
        get: function () { return this.getChildByName('pokerView'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "target", {
        get: function () { return this.getChildByName('target'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "success", {
        get: function () { return this.getChildByName('success'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "closeBtn", {
        get: function () { return this.getChildByName('close_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "img3", {
        get: function () { return this.getChildByName('img3'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "arrow", {
        get: function () { return this.getChildByName('imgArrow'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "copySeedBtn", {
        get: function () { return this.getChildByName('copySeedBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "copyZaiyaoBtn", {
        get: function () { return this.getChildByName('copyZaiyaoBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CMD5CheckView.prototype, "copyGongbuBtn", {
        get: function () { return this.getChildByName('copyGongbuBtn'); },
        enumerable: true,
        configurable: true
    });
    CMD5CheckView.SIGN = 'CMD5CheckView';
    return CMD5CheckView;
}(layaMaxUI_1.ui.gamelist.commonView.MD5CheckUI));
exports.default = CMD5CheckView;
},{"../../../../ui/layaMaxUI":271,"./CMD5CheckModel":37}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CPokerView_1 = require("../../../../common/CPokerView");
var CPath_1 = require("../../../../const/CPath");
var CMD5SetContentComponent = /** @class */ (function (_super) {
    __extends(CMD5SetContentComponent, _super);
    function CMD5SetContentComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CMD5SetContentComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_pokerView = null;
    };
    CMD5SetContentComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CMD5SetContentComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerView = new CPokerView_1.default(this.m_pController.view.pokerView);
        return true;
    };
    CMD5SetContentComponent.prototype.process = function (data) {
        var pView = this.m_pController.view;
        if (data.seed && data.seed.length > 0) {
            pView.zzValue.text = data.seed;
        }
        else {
            pView.zzValue.text = '';
        }
        pView.md5Value.text = data.mark;
        pView.target.text = data.mark;
        this.m_pokerView.blank.visible = false;
        this.m_pokerView.backImg.visible = false;
        this.m_pokerView.tipsImg1.visible = false;
        this.m_pokerView.tipsImg2.visible = false;
        this.m_pokerView.blueImg.visible = false;
        this.m_pokerView.idLbl.visible = false;
        this.m_pokerView.pokerImg.visible = false;
        pView.arrow.visible = false;
        pView.img3.visible = false;
        pView.success.visible = false;
        if (data.poker && data.poker.length > 0) {
            this.m_pokerView.pokerImg.skin = CPath_1.CPath.getPokerPath(CPokerData_1.CPokerData.getPokerStr(data));
            this.m_pokerView.pokerImg.visible = true;
            pView.success.visible = true;
            pView.img3.visible = true;
            pView.arrow.visible = true;
        }
        else {
            this.m_pokerView.backImg.visible = true;
        }
    };
    return CMD5SetContentComponent;
}(CComponent_1.CComponent));
exports.default = CMD5SetContentComponent;
},{"../../../../common/CPokerView":9,"../../../../common/component/CComponent":15,"../../../../const/CPath":19,"../../../_commonModel/CPokerData":21}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ApiUtil_1 = require("../../../../hbcore/util/ApiUtil");
var log_1 = require("../../../../hbcore/framework/log");
var CImageNumber2_1 = require("../../../common/CImageNumber2");
var CPaiCaiController = /** @class */ (function (_super) {
    __extends(CPaiCaiController, _super);
    function CPaiCaiController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CPaiCaiController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_numberView = new CImageNumber2_1.default('common/paicai/img_num.png', 11, 55, 0, 5, CImageNumber2_1.default.IMAGE_TYPE_019);
        this.m_numberView.specialDelta = -16;
        var numBox = this.view.paicaiNumber; //
        numBox.addChild(this.m_numberView);
        // this.m_paicaiView = new CImageNumber(this.view.paicaiNumber, CImageNumber.ALIGN_CENTER, -1, false, 0, false, false, 4, 2);
        // this.m_paicaiView.imageType = CImageNumber.IMAGE_TYPE_019;
        this.m_startTime = Laya.timer.currTimer;
        this.m_view.mouseEnabled = false;
        this.m_bClosed = false;
    };
    CPaiCaiController.prototype.onDisable = function () {
        // this.m_paicaiView = null;
        if (this.m_numberView) {
            this.m_numberView.removeSelf();
            this.m_numberView = null;
        }
        this.m_view = null;
    };
    CPaiCaiController.prototype.onUpdate = function () {
        if (this.m_bClosed) {
            return;
        }
        if (this.model.isDirty) {
            this.model.validate();
            log_1.log.log('paicai ' + this.model.paicai);
            var value = ApiUtil_1.ApiUtil.formatNumber(this.model.paicai, 6);
            this.m_numberView.num = value;
            log_1.log.log('paicai after format number ' + value);
        }
        if (Laya.timer.currTimer - this.m_startTime > 3000) {
            this._onClose();
        }
    };
    CPaiCaiController.prototype._onClose = function () {
        this.m_bClosed = true;
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    Object.defineProperty(CPaiCaiController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPaiCaiController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CPaiCaiController;
}(Laya.Script));
exports.default = CPaiCaiController;
},{"../../../../hbcore/framework/log":256,"../../../../hbcore/util/ApiUtil":266,"../../../common/CImageNumber2":6}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CPaiCaiModel = /** @class */ (function () {
    function CPaiCaiModel() {
        this.m_bDirty = false;
    }
    Object.defineProperty(CPaiCaiModel.prototype, "paicai", {
        get: function () {
            return this.m_paicai;
        },
        set: function (v) {
            this.m_paicai = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CPaiCaiModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CPaiCaiModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CPaiCaiModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CPaiCaiModel;
}());
exports.CPaiCaiModel = CPaiCaiModel;
},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CPaiCaiModel_1 = require("./CPaiCaiModel");
var CPaiCaiView = /** @class */ (function (_super) {
    __extends(CPaiCaiView, _super);
    function CPaiCaiView() {
        var _this = _super.call(this) || this;
        _this.model = new CPaiCaiModel_1.CPaiCaiModel;
        return _this;
    }
    Object.defineProperty(CPaiCaiView.prototype, "paicaiNumber", {
        get: function () { return this.getChildByName('numBox'); },
        enumerable: true,
        configurable: true
    });
    CPaiCaiView.SIGN = 'CPaiCaiView';
    return CPaiCaiView;
}(layaMaxUI_1.ui.gamelist.commonView.PaiCaiUI));
exports.default = CPaiCaiView;
},{"../../../../ui/layaMaxUI":271,"./CPaiCaiModel":41}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CRoadZPLComponent_1 = require("./component/CRoadZPLComponent");
var CRoadDLSComponent_1 = require("./component/CRoadDLSComponent");
var COpenSubViewComponent_1 = require("../../../common/component/COpenSubViewComponent");
var CRoadDetailView_1 = require("./subView/CRoadDetailView");
var CRoadBuildDataComponent_1 = require("./component/CRoadBuildDataComponent");
var CRoadController = /** @class */ (function (_super) {
    __extends(CRoadController, _super);
    function CRoadController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CRoadController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CRoadBuildDataComponent_1.default());
        this.m_componentManager.addComponent(new CRoadZPLComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadDLSComponent_1.default(this));
        this.m_componentManager.addComponent(new COpenSubViewComponent_1.default());
        this.m_componentManager.start();
        this.m_view.detailBtn.on(Laya.Event.MOUSE_UP, this, this._onOpenDetailView);
    };
    CRoadController.prototype.onDisable = function () {
        this.m_view.detailBtn.off(Laya.Event.MOUSE_UP, this, this._onOpenDetailView);
        this.m_componentManager.destroy();
        this.m_componentManager = null;
        this.m_view = null;
    };
    CRoadController.prototype.onUpdate = function () {
        if (this.model.isDirty) {
            this.model.validate();
            this.updateView();
        }
    };
    CRoadController.prototype.updateView = function () {
        this.m_componentManager.getComponent(CRoadZPLComponent_1.default).process();
        this.m_componentManager.getComponent(CRoadDLSComponent_1.default).process();
    };
    CRoadController.prototype._onOpenDetailView = function (e) {
        var openComponent = this.m_componentManager.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = false;
        openComponent.process(CRoadDetailView_1.default, CRoadDetailView_1.default.SIGN, 0);
        var view = openComponent.getView(0).view;
        view.model.roadList = this.model.roadList;
        view.model.bottomModel = this.model.bottomModel;
        view.model.invalidate();
        openComponent.showView(Laya.stage, 0);
    };
    CRoadController.prototype.getComponent = function (cls) {
        return this.m_componentManager.getComponent(cls);
    };
    CRoadController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    Object.defineProperty(CRoadController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CRoadController;
}(Laya.Script));
exports.default = CRoadController;
},{"../../../common/component/CComponent":15,"../../../common/component/COpenSubViewComponent":16,"./component/CRoadBuildDataComponent":47,"./component/CRoadDLSComponent":48,"./component/CRoadZPLComponent":49,"./subView/CRoadDetailView":58}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadModel = /** @class */ (function () {
    function CRoadModel() {
        this.m_bDirty = false;
        this.m_roadList = new Array();
    }
    CRoadModel.prototype.addRoadData = function (areaIDList) {
        if (!areaIDList || areaIDList.length == 0) {
            return;
        }
        if (this.m_roadList.length >= 30) {
            // 清空历史
            this.m_roadList.length = 0;
        }
        var roadData = new CRoadData();
        roadData.updateData(areaIDList);
        this.m_roadList.push(roadData);
        this.invalidate();
    };
    CRoadModel.prototype.getRoadData = function (index) {
        return this.m_roadList[index];
    };
    CRoadModel.prototype.clear = function () {
        this.m_roadList.length = 0;
        this.invalidate();
    };
    Object.defineProperty(CRoadModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CRoadModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CRoadModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    Object.defineProperty(CRoadModel.prototype, "roadList", {
        get: function () {
            return this.m_roadList;
        },
        enumerable: true,
        configurable: true
    });
    return CRoadModel;
}());
exports.CRoadModel = CRoadModel;
var CRoadData = /** @class */ (function () {
    function CRoadData() {
        this.heCount = 0;
        this.lastBankWin = false;
        this.lastXianWin = false;
        this.dragonID = -1;
        this.isDragon = false;
        this.col = 0;
        this.row = 0;
        this.isTrue = false;
        this.isAsk = false;
    }
    CRoadData.prototype.clone = function () {
        var newData = new CRoadData();
        newData.isBankWin = this.isBankWin;
        newData.isXianWin = this.isXianWin;
        newData.isHe = this.isHe;
        newData.isBankPair = this.isBankPair;
        newData.isXianPair = this.isXianPair;
        newData.isAsk = this.isAsk;
        return newData;
    };
    CRoadData.prototype.updateData = function (areaList) {
        for (var _i = 0, areaList_1 = areaList; _i < areaList_1.length; _i++) {
            var areaID = areaList_1[_i];
            areaID = areaID - 1;
            switch (areaID) {
                case 0:
                    this.isBankWin = true;
                    break;
                case 1:
                    this.isXianWin = true;
                    break;
                case 2:
                    this.isHe = true;
                    break;
                case 3:
                    this.isBankPair = true;
                    break;
                case 4:
                    this.isXianPair = true;
                    break;
            }
        }
    };
    CRoadData.isSameWin = function (pre, cur) {
        return (pre.isXianWin && cur.isXianWin) || (pre.isBankWin && cur.isBankWin);
    };
    CRoadData.isOtherWin = function (pre, cur) {
        return (pre.isBankWin && cur.isXianWin) || (pre.isXianWin && cur.isBankWin);
    };
    CRoadData.prototype.addHeCount = function (addedCount, isLastBankWin, isLastXianWin) {
        this.heCount = addedCount + 1;
        this.lastBankWin = isLastBankWin;
        this.lastXianWin = isLastXianWin;
    };
    return CRoadData;
}());
exports.CRoadData = CRoadData;
},{}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadModel_1 = require("./CRoadModel");
var RoadUtil;
(function (RoadUtil) {
    function getIndexByColRow(col, row, COLS) {
        return row * COLS + col;
    }
    RoadUtil.getIndexByColRow = getIndexByColRow;
    function getColRowByIndex(index, COLS) {
        var col = index % COLS;
        var row = (index / COLS) >> 0;
        return { col: col, row: row };
    }
    RoadUtil.getColRowByIndex = getColRowByIndex;
    function buildAskRoadData(isBank) {
        var bingoArasIDs = [];
        if (isBank) {
            bingoArasIDs.push(1);
        }
        else {
            bingoArasIDs.push(2);
        }
        var roadData = new CRoadModel_1.CRoadData();
        roadData.updateData(bingoArasIDs);
        return roadData;
    }
    RoadUtil.buildAskRoadData = buildAskRoadData;
})(RoadUtil = exports.RoadUtil || (exports.RoadUtil = {}));
},{"./CRoadModel":44}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CRoadModel_1 = require("./CRoadModel");
exports.RoadViewConst = {
    ROWS: 6,
    ZPL_COLS: 8,
    DLS_COLS: 10,
    // 另一个view, 所有列都是21
    SUB_COLS: 21,
};
var CRoadView = /** @class */ (function (_super) {
    __extends(CRoadView, _super);
    function CRoadView() {
        var _this = _super.call(this) || this;
        _this.model = new CRoadModel_1.CRoadModel;
        return _this;
    }
    Object.defineProperty(CRoadView.prototype, "zplList", {
        get: function () { return this.getChildByName('zplList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadView.prototype, "dlList", {
        get: function () { return this.getChildByName('dlList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadView.prototype, "detailBtn", {
        get: function () { return this.getChildByName('detailBtn'); },
        enumerable: true,
        configurable: true
    });
    CRoadView.SIGN = 'CRoadView';
    return CRoadView;
}(layaMaxUI_1.ui.gamelist.commonView.road.RoadViewUI));
exports.default = CRoadView;
},{"../../../../ui/layaMaxUI":271,"./CRoadModel":44}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var CRoadDLSBuilder_1 = require("./build/CRoadDLSBuilder");
var CRoadZPLBuilder_1 = require("./build/CRoadZPLBuilder");
var CRoadDYLBuilder_1 = require("./build/CRoadDYLBuilder");
// 大路书
var CRoadBuildDataComponent = /** @class */ (function (_super) {
    __extends(CRoadBuildDataComponent, _super);
    function CRoadBuildDataComponent() {
        return _super.call(this) || this;
    }
    CRoadBuildDataComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CRoadBuildDataComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadBuildDataComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    // 珠盘路
    CRoadBuildDataComponent.prototype.buildZPL = function (roadList, COLS, ROWS) {
        return new CRoadZPLBuilder_1.default().build(roadList, COLS, ROWS);
    };
    // 大路书
    CRoadBuildDataComponent.prototype.buildDLS = function (roadList, COLS, ROWS) {
        return new CRoadDLSBuilder_1.default().build(roadList, COLS, ROWS);
    };
    // 大眼路
    CRoadBuildDataComponent.prototype.buildDYL = function (dlsDataList, COLS, ROWS) {
        return new CRoadDYLBuilder_1.default().build(dlsDataList, COLS, ROWS);
    };
    // 小眼路
    CRoadBuildDataComponent.prototype.buildXYL = function (dlsDataList, COLS, ROWS) {
        var builder = new CRoadDYLBuilder_1.default();
        builder.START_COL = 2, builder.START_ROW = 1;
        builder.START_COL2 = 3, builder.START_ROW2 = 0;
        builder.PRE_COUNT = 2;
        return builder.build(dlsDataList, COLS, ROWS);
    };
    // 蟑螂路
    CRoadBuildDataComponent.prototype.buildZLL = function (dlsDataList, COLS, ROWS) {
        var builder = new CRoadDYLBuilder_1.default();
        builder.PRE_COUNT = 3;
        builder.START_COL = 3, builder.START_ROW = 1;
        builder.START_COL2 = 4, builder.START_ROW2 = 0;
        return builder.build(dlsDataList, COLS, ROWS);
    };
    return CRoadBuildDataComponent;
}(CComponent_1.CComponent));
exports.default = CRoadBuildDataComponent;
},{"../../../../common/component/CComponent":15,"./build/CRoadDLSBuilder":50,"./build/CRoadDYLBuilder":51,"./build/CRoadZPLBuilder":52}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("./CRoadBuildDataComponent");
// 大路书
var CRoadDLSComponent = /** @class */ (function (_super) {
    __extends(CRoadDLSComponent, _super);
    function CRoadDLSComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDLSComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var list = this.m_pController.view.dlList;
        ApiUtil_1.ApiUtil.recoverHandler(list.renderHandler);
        list.renderHandler = null;
    };
    CRoadDLSComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDLSComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var list = this.m_pController.view.dlList;
        list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderDLSItem);
        return true;
    };
    CRoadDLSComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        this.m_dragonCount = 0;
        var roadList = this.m_pController.model.roadList;
        var COLS = CRoadView_1.RoadViewConst.DLS_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildDLS(roadList, COLS, ROWS);
        this.m_pController.view.dlList.array = newList;
    };
    CRoadDLSComponent.prototype._onRenderDLSItem = function (comp, idx) {
        comp.updateViewByDLS();
    };
    return CRoadDLSComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDLSComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadView":46,"./CRoadBuildDataComponent":47}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("./CRoadBuildDataComponent");
var CRoadZPLComponent = /** @class */ (function (_super) {
    __extends(CRoadZPLComponent, _super);
    function CRoadZPLComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadZPLComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var zplList = this.m_pController.view.zplList;
        ApiUtil_1.ApiUtil.recoverHandler(zplList.renderHandler);
        zplList.renderHandler = null;
    };
    CRoadZPLComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadZPLComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var zplList = this.m_pController.view.zplList;
        zplList.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderZPLItem);
        return true;
    };
    CRoadZPLComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        // 满30个数据要清数据
        var roadList = this.m_pController.model.roadList;
        var COLS = CRoadView_1.RoadViewConst.ZPL_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildZPL(roadList, COLS, ROWS);
        this.m_pController.view.zplList.array = newList;
    };
    CRoadZPLComponent.prototype._onRenderZPLItem = function (comp, idx) {
        comp.updateViewByZPL();
    };
    return CRoadZPLComponent;
}(CComponent_1.CComponent));
exports.default = CRoadZPLComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadView":46,"./CRoadBuildDataComponent":47}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadModel_1 = require("../../CRoadModel");
var CRoadUtil_1 = require("../../CRoadUtil");
// 大路书获得数据的index
// preData : 上一把数据
// curData : 这一把数据
// col : 当前列, row : 当前行
// COLS : 列表总列数
// ROWS : 列表总行数
// lastWinData : 用于上一把为和局, 表示最后一次庄或闲赢的数据
var CRoadDLSBuilder = /** @class */ (function () {
    function CRoadDLSBuilder() {
    }
    CRoadDLSBuilder.prototype.build = function (roadList, COLS, ROWS) {
        this.m_dragonCount = 0;
        var newList = new Array(COLS * ROWS);
        this.m_baseDataList = newList;
        var col = 0;
        var row = 0;
        var roadData = null;
        var lastWinRoadData = null; // 最后一次赢的数据(庄或闲)     
        var preRoadData;
        var index;
        for (var i = 0; i < roadList.length; ++i) {
            preRoadData = roadData;
            roadData = roadList[i].clone();
            if (0 == i) {
                index = 0;
                if (roadData.isHe) {
                    roadData.addHeCount(0, false, false);
                }
            }
            else {
                // 这里传入preRoadData.heCount, 是因为即使当前局开的是庄闲赢, 也有可能要计数和局
                // 第一把开和, 连开几把和，再开一把庄闲赢，再开和的情况 
                var nextData = this._getNextIndex(preRoadData, roadData, lastWinRoadData, col, row, COLS, ROWS, preRoadData.heCount);
                index = nextData.index;
                col = nextData.col;
                row = nextData.row;
                roadData.col = col;
                roadData.row = row;
            }
            newList[index] = roadData;
            if (!roadData.isHe) {
                lastWinRoadData = roadData;
            }
        }
        if (col >= COLS) {
            // 水平方向超出了
            // 左移
            var moveX = col - (COLS - 1);
            var tempList = new Array(newList.length);
            for (var idx = 0; idx < newList.length; ++idx) {
                var tempRoadData = newList[idx];
                if (tempRoadData) {
                    tempRoadData.col -= moveX;
                    if (tempRoadData.col >= 0) {
                        var newIdx = tempRoadData.row * COLS + tempRoadData.col;
                        tempList[newIdx] = tempRoadData;
                    }
                }
            }
            newList = tempList;
        }
        return newList;
    };
    CRoadDLSBuilder.prototype._getNextIndex = function (preData, curData, lastWinData, col, row, COLS, ROWS, baseHeCount) {
        if (baseHeCount === void 0) { baseHeCount = 0; }
        var index;
        var isFirstRoundHe = !preData; // 第一局开了和
        if (isFirstRoundHe) {
            // 上一把开和, 之前再没有庄闲赢过, 这种情况为第一局就开了和局
            // 处理方式, 如果这把也开和就继续往下, 否则换列
            if (curData.isHe) {
                curData.addHeCount(baseHeCount, false, false);
                // 前面没有庄闲赢
            }
            else {
                // 把当前结果合到和中
                curData.addHeCount(baseHeCount - 1, false, false);
            }
        }
        else {
            if (preData.isHe) {
                // 上一局和
                return this._getNextIndex(lastWinData, curData, null, col, row, COLS, ROWS, preData.heCount);
            }
            else {
                // 上一局庄闲赢
                if (CRoadModel_1.CRoadData.isSameWin(preData, curData)) {
                    var needTurn = this._isLongTurnRight(col, row + 1, COLS, ROWS);
                    if (!needTurn) {
                        row++;
                    }
                    else {
                        // 龙转弯
                        preData.isDragon = true;
                        if (preData.dragonID == -1) {
                            preData.dragonID = 0;
                        }
                        curData.isDragon = true;
                        curData.dragonID = preData.dragonID + 1;
                        // let sub = ROWS - row - curData.dragonID;
                        // col+=sub;
                        col++;
                        // row不变
                    }
                }
                else if (CRoadModel_1.CRoadData.isOtherWin(preData, curData)) {
                    col++;
                    row = 0;
                    // 龙数
                    if (preData.isDragon) {
                        col -= preData.dragonID;
                        this.m_dragonCount++;
                    }
                }
                else {
                    curData.addHeCount(baseHeCount, preData.isBankWin, preData.isXianWin);
                }
            }
        }
        index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, COLS); // row * COLS + col;                    
        return { col: col, row: row, index: index };
    };
    CRoadDLSBuilder.prototype._isLongTurnRight = function (col, row, COLS, ROWS) {
        if (row >= ROWS) {
            return true;
        }
        var index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, COLS);
        if (index >= this.m_baseDataList.length) {
            // 没此数据
            return false;
        }
        var data = this.m_baseDataList[index];
        if (!data) {
            return false;
        }
        return true;
    };
    return CRoadDLSBuilder;
}());
exports.default = CRoadDLSBuilder;
},{"../../CRoadModel":44,"../../CRoadUtil":45}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadModel_1 = require("../../CRoadModel");
var CRoadUtil_1 = require("../../CRoadUtil");
// 大眼路
var CRoadDYLBuilder = /** @class */ (function () {
    function CRoadDYLBuilder() {
        this.START_COL = 1;
        this.START_ROW = 1;
        this.START_COL2 = 2;
        this.START_ROW2 = 0;
        this.PRE_COUNT = 1;
    }
    CRoadDYLBuilder.prototype.build = function (dlsDataList, COLS, ROWS) {
        this.m_countCache = new Object();
        this.m_dragonCount = 0;
        this.COLS = COLS;
        this.ROWS = ROWS;
        this.m_data = dlsDataList;
        var newList = new Array(COLS * ROWS);
        this.m_baseDataList = newList;
        var sCol = 0;
        var sRow = 0; // 小路的行列
        var col = 0; // 大路的行列
        var row = 0;
        // 获得起始点
        var firstData = this._getFirstIndex();
        if (!firstData) {
            return newList;
        }
        col = firstData.col, row = firstData.row;
        var index;
        var roadData; // 路书数据
        var preData; // 路书上一个数据 
        var sPreData; // 小路上一个数据
        var sData; // 小路数据
        var sIndex; // 小路index
        // 红ture, 蓝false
        // 遍历路书
        for (; col < COLS; ++col) {
            for (; row < ROWS; ++row) {
                index = this.getIndex(col, row);
                roadData = this.getDataByIndex(index);
                if (!roadData) {
                    // 后面可能还有，长龙的情况 
                    continue; // 
                }
                // 当前格有数据     
                // 检测此格的对齐
                sPreData = sData;
                sData = new CRoadModel_1.CRoadData();
                var isTrue = this.checkTrue(col, row);
                // 当前格位置处理, 这里面会设置长龙数据
                var nextColRowData = this._nextColRowProcess(isTrue, sCol, sRow, sPreData, sData);
                sCol = nextColRowData.col;
                sRow = nextColRowData.row;
                // 小路数据
                sIndex = CRoadUtil_1.RoadUtil.getIndexByColRow(sCol, sRow, COLS);
                sData.col = sCol;
                sData.row = sRow;
                sData.isTrue = isTrue;
                sData.isAsk = roadData.isAsk;
                newList[sIndex] = sData;
            }
            row = 0;
        }
        if (sCol >= COLS) {
            // 水平方向超出了
            // 左移
            var moveX = sCol - (COLS - 1);
            var tempList = new Array(newList.length);
            for (var idx = 0; idx < newList.length; ++idx) {
                var tempRoadData = newList[idx];
                if (tempRoadData) {
                    tempRoadData.col -= moveX;
                    if (tempRoadData.col >= 0) {
                        var newIdx = tempRoadData.row * COLS + tempRoadData.col;
                        tempList[newIdx] = tempRoadData;
                    }
                }
            }
            newList = tempList;
        }
        return newList;
    };
    CRoadDYLBuilder.prototype._nextColRowProcess = function (isTrue, col, row, sPreData, sData) {
        if (!sPreData) {
            return { col: col, row: row }; // 第一个数据
        }
        if (sPreData.isTrue == isTrue) {
            var needTurn = this._isLongTurnRight(col, row + 1, this.COLS, this.ROWS);
            if (!needTurn) {
                row++;
            }
            else {
                // let sub = this.ROWS - row - this.m_dragonCount;
                // col+=sub;
                col++;
                sPreData.isDragon = true;
                if (sPreData.dragonID == -1) {
                    sPreData.dragonID = 0;
                }
                sData.isDragon = true;
                sData.dragonID = sPreData.dragonID + 1;
                // row不变
            }
        }
        else {
            col++;
            row = 0;
            if (sPreData.isDragon) {
                col -= sPreData.dragonID;
                this.m_dragonCount++;
            }
        }
        return { col: col, row: row };
    };
    CRoadDYLBuilder.prototype._getFirstIndex = function () {
        var firstIndex;
        var col = this.START_COL, row = this.START_ROW;
        firstIndex = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, this.COLS);
        var fristData = this.m_data[firstIndex];
        if (!fristData) {
            col = this.START_COL2, row = this.START_ROW2;
            firstIndex = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, this.COLS);
            fristData = this.m_data[firstIndex];
        }
        if (!fristData) {
            return null;
        }
        return { col: col, row: row };
    };
    CRoadDYLBuilder.prototype.checkTrue = function (col, row) {
        var isTrue;
        if (row == 0) {
            // 首行
            var curCount = this.getColCount(col - 1);
            var preCount = this.getColCount(col - this.PRE_COUNT - 1);
            isTrue = curCount == preCount;
        }
        else {
            // 非首行
            // 当前格的row+1 , 如果大于前一列的count+1, 则为红
            var preCount = this.getColCount(col - this.PRE_COUNT);
            if (row > preCount) {
                isTrue = true;
            }
            else {
                // 前一格
                var preData = this.getPreData(col, row);
                // 对齐
                isTrue = !!preData;
            }
        }
        return isTrue;
    };
    CRoadDYLBuilder.prototype.getIndex = function (col, row) {
        var index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, this.COLS);
        return index;
    };
    CRoadDYLBuilder.prototype.getDataByIndex = function (index) {
        return this.m_data[index];
    };
    CRoadDYLBuilder.prototype.getData = function (col, row) {
        var index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, this.COLS);
        return this.m_data[index];
    };
    CRoadDYLBuilder.prototype.getPreIndex = function (col, row) {
        var index = CRoadUtil_1.RoadUtil.getIndexByColRow(col - this.PRE_COUNT, row, this.COLS);
        return index;
    };
    CRoadDYLBuilder.prototype.getPreData = function (col, row) {
        var index = this.getPreIndex(col, row);
        return this.m_data[index];
    };
    // 获得某列的圈圈数量
    CRoadDYLBuilder.prototype.getColCount = function (col) {
        if (this.m_countCache.hasOwnProperty(col.toString())) {
            return this.m_countCache[col.toString()];
        }
        var count = 0;
        var index;
        var preData;
        for (var row = 0; row < this.ROWS; ++row) {
            index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, this.COLS);
            preData = this.m_data[index];
            if (!preData) {
                break;
            }
            count++;
        }
        this.m_countCache[col.toString()] = count;
        return count;
    };
    CRoadDYLBuilder.prototype._isLongTurnRight = function (col, row, COLS, ROWS) {
        if (row >= ROWS) {
            return true;
        }
        var index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, COLS);
        if (index >= this.m_baseDataList.length) {
            // 没此数据
            return false;
        }
        var data = this.m_baseDataList[index];
        if (!data) {
            return false;
        }
        return true;
    };
    return CRoadDYLBuilder;
}());
exports.default = CRoadDYLBuilder;
},{"../../CRoadModel":44,"../../CRoadUtil":45}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadUtil_1 = require("../../CRoadUtil");
// 大路书获得数据的index
// preData : 上一把数据
// curData : 这一把数据
// col : 当前列, row : 当前行
// COLS : 列表总列数
// ROWS : 列表总行数
// lastWinData : 用于上一把为和局, 表示最后一次庄或闲赢的数据
var CRoadZPLBuilder = /** @class */ (function () {
    function CRoadZPLBuilder() {
    }
    CRoadZPLBuilder.prototype.build = function (roadList, COLS, ROWS) {
        var newList = new Array(COLS * ROWS);
        var col = 0;
        var row = 0;
        var roadData;
        var index;
        for (var i = 0; i < roadList.length; ++i) {
            roadData = roadList[i];
            index = CRoadUtil_1.RoadUtil.getIndexByColRow(col, row, COLS); // row * COLS + col;    
            newList[index] = roadData;
            ++row;
            if (row >= ROWS) {
                row = 0;
                col++;
            }
        }
        return newList;
    };
    return CRoadZPLBuilder;
}());
exports.default = CRoadZPLBuilder;
},{"../../CRoadUtil":45}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var CRoadBottomComponent = /** @class */ (function (_super) {
    __extends(CRoadBottomComponent, _super);
    function CRoadBottomComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_bProcessByParent = false;
        _this.m_pController = pController;
        return _this;
    }
    CRoadBottomComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CRoadBottomComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CRoadBottomComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var bottomModel = this.m_pController.model.bottomModel;
        var bottomView = this.m_pController.view.bottomView;
        if (bottomModel && bottomView) {
            bottomView.model.roomName = bottomModel.roomName;
            bottomView.model.roundNum = bottomModel.roundNum;
            bottomView.model.roundCount = bottomModel.roundCount;
            bottomView.model.limit = bottomModel.limit;
        }
    };
    CRoadBottomComponent.prototype.reset = function () {
    };
    return CRoadBottomComponent;
}(CComponent_1.CComponent));
exports.default = CRoadBottomComponent;
},{"../../../../common/component/CComponent":15}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
var CRoadDetailDLSComponent_1 = require("./CRoadDetailDLSComponent");
var CRoadDetailZPLComponent_1 = require("./CRoadDetailZPLComponent");
var CRoadDetailDYLComponent_1 = require("./CRoadDetailDYLComponent");
var CRoadDetailZLLComponent_1 = require("./CRoadDetailZLLComponent");
var CRoadDetailXYLComponent_1 = require("./CRoadDetailXYLComponent");
var CRoadBottomComponent_1 = require("./CRoadBottomComponent");
var CRoadDetailController = /** @class */ (function (_super) {
    __extends(CRoadDetailController, _super);
    function CRoadDetailController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CRoadDetailController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CRoadBuildDataComponent_1.default());
        this.m_componentManager.addComponent(new CRoadDetailDLSComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadDetailZPLComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadDetailDYLComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadDetailXYLComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadDetailZLLComponent_1.default(this));
        this.m_componentManager.addComponent(new CRoadBottomComponent_1.default(this));
        this.m_componentManager.start();
        this.m_view.btn_close.on(Laya.Event.MOUSE_UP, this, this._onClose);
        this.m_view.xianAsk.on(Laya.Event.MOUSE_UP, this, this._onXianAsk_uiHandler);
        this.m_view.bankAsk.on(Laya.Event.MOUSE_UP, this, this._onBankAsk_uiHandler);
        this.m_componentManager.getComponent(CRoadBottomComponent_1.default).process();
        this.m_askTimeOut = -1;
        this.model.askBank = this.model.askXian = false;
        this.view.bankAsk.index = 0;
        this.view.xianAsk.index = 0;
    };
    CRoadDetailController.prototype.onDisable = function () {
        this.m_view.btn_close.off(Laya.Event.MOUSE_UP, this, this._onClose);
        this.m_view.xianAsk.off(Laya.Event.MOUSE_UP, this, this._onXianAsk_uiHandler);
        this.m_view.bankAsk.off(Laya.Event.MOUSE_UP, this, this._onBankAsk_uiHandler);
        this.m_componentManager.destroy();
        this.m_componentManager = null;
        this.m_view = null;
    };
    CRoadDetailController.prototype.onUpdate = function () {
        if (this.m_askTimeOut != -1) {
            if (Laya.timer.currTimer - this.m_askTimeOut > 2000) {
                // 问路结束
                this.model.askBank = this.model.askXian = false;
                this.view.bankAsk.index = 0;
                this.view.xianAsk.index = 0;
                this.m_askTimeOut = -1;
                this.model.invalidate();
            }
        }
        if (this.model.isDirty) {
            // // 在数据更新时, 可能是在问路。此时把问路去掉
            // this.model.askBank = this.model.askXian = false;
            // this.m_askTimeOut = -1;
            this.model.validate();
            this.updateView();
        }
    };
    CRoadDetailController.prototype.updateView = function () {
        this.m_componentManager.getComponent(CRoadDetailZPLComponent_1.default).process();
        this.m_componentManager.getComponent(CRoadDetailDLSComponent_1.default).process();
        this.m_componentManager.getComponent(CRoadDetailDYLComponent_1.default).process();
        this.m_componentManager.getComponent(CRoadDetailXYLComponent_1.default).process();
        this.m_componentManager.getComponent(CRoadDetailZLLComponent_1.default).process();
    };
    CRoadDetailController.prototype.getComponent = function (cls) {
        return this.m_componentManager.getComponent(cls);
    };
    CRoadDetailController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    CRoadDetailController.prototype._onXianAsk_uiHandler = function (e) {
        e.stopPropagation();
        this.m_askTimeOut = Laya.timer.currTimer;
        this.model.askBank = false;
        this.model.askXian = true;
        this.view.bankAsk.index = 0;
        this.view.xianAsk.index = 1;
        this.model.invalidate();
    };
    CRoadDetailController.prototype._onBankAsk_uiHandler = function (e) {
        e.stopPropagation();
        this.m_askTimeOut = Laya.timer.currTimer;
        this.model.askXian = false;
        this.model.askBank = true;
        this.view.bankAsk.index = 1;
        this.view.xianAsk.index = 0;
        this.model.invalidate();
    };
    Object.defineProperty(CRoadDetailController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailController.prototype, "model", {
        get: function () { return this.m_view.model; },
        enumerable: true,
        configurable: true
    });
    return CRoadDetailController;
}(Laya.Script));
exports.default = CRoadDetailController;
},{"../../../../common/component/CComponent":15,"../component/CRoadBuildDataComponent":47,"./CRoadBottomComponent":53,"./CRoadDetailDLSComponent":55,"./CRoadDetailDYLComponent":56,"./CRoadDetailXYLComponent":59,"./CRoadDetailZLLComponent":60,"./CRoadDetailZPLComponent":61}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
var CRoadUtil_1 = require("../CRoadUtil");
// 大路书
var CRoadDetailDLSComponent = /** @class */ (function (_super) {
    __extends(CRoadDetailDLSComponent, _super);
    function CRoadDetailDLSComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDetailDLSComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var list = this.m_pController.view.dlsList;
        ApiUtil_1.ApiUtil.recoverHandler(list.renderHandler);
        list.renderHandler = null;
    };
    CRoadDetailDLSComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDetailDLSComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var list = this.m_pController.view.dlsList;
        list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderDLSItem);
        return true;
    };
    CRoadDetailDLSComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var roadList = this.m_pController.model.roadList;
        var askData;
        if (this.m_pController.model.askBank) {
            askData = CRoadUtil_1.RoadUtil.buildAskRoadData(true);
        }
        else if (this.m_pController.model.askXian) {
            askData = CRoadUtil_1.RoadUtil.buildAskRoadData(false);
        }
        if (askData) {
            askData.isAsk = true;
            roadList = roadList.concat(askData);
        }
        var COLS = CRoadView_1.RoadViewConst.SUB_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildDLS(roadList, COLS, ROWS);
        this.m_pController.view.dlsList.array = newList;
        this.m_pController.model.dlsDataList = newList;
    };
    CRoadDetailDLSComponent.prototype._onRenderDLSItem = function (comp, idx) {
        comp.updateViewByDLS();
    };
    return CRoadDetailDLSComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDetailDLSComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadUtil":45,"../CRoadView":46,"../component/CRoadBuildDataComponent":47}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
// 大眼路
var CRoadDetailDYLComponent = /** @class */ (function (_super) {
    __extends(CRoadDetailDYLComponent, _super);
    function CRoadDetailDYLComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDetailDYLComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var list = this.m_pController.view.dyl;
        ApiUtil_1.ApiUtil.recoverHandler(list.renderHandler);
        list.renderHandler = null;
    };
    CRoadDetailDYLComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDetailDYLComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var list = this.m_pController.view.dyl;
        list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        return true;
    };
    CRoadDetailDYLComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var dlsDataList = this.m_pController.model.dlsDataList;
        var COLS = CRoadView_1.RoadViewConst.SUB_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildDYL(dlsDataList, COLS, ROWS);
        this.m_pController.view.dyl.array = newList;
    };
    CRoadDetailDYLComponent.prototype._onRenderItem = function (comp, idx) {
        comp.updateViewByDYL();
    };
    return CRoadDetailDYLComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDetailDYLComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadView":46,"../component/CRoadBuildDataComponent":47}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRoadDetailModel = /** @class */ (function () {
    function CRoadDetailModel() {
        this.m_bDirty = false;
        this.m_roadList = new Array();
    }
    Object.defineProperty(CRoadDetailModel.prototype, "roadList", {
        get: function () {
            return this.m_roadList;
        },
        set: function (v) {
            this.m_roadList = v;
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailModel.prototype, "isDirty", {
        get: function () {
            return this.m_bDirty;
        },
        enumerable: true,
        configurable: true
    });
    CRoadDetailModel.prototype.invalidate = function () {
        this.m_bDirty = true;
    };
    CRoadDetailModel.prototype.validate = function () {
        this.m_bDirty = false;
    };
    return CRoadDetailModel;
}());
exports.CRoadDetailModel = CRoadDetailModel;
},{}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var CRoadDetailModel_1 = require("./CRoadDetailModel");
var CRoadDetailView = /** @class */ (function (_super) {
    __extends(CRoadDetailView, _super);
    function CRoadDetailView() {
        var _this = _super.call(this) || this;
        _this.model = new CRoadDetailModel_1.CRoadDetailModel;
        return _this;
    }
    Object.defineProperty(CRoadDetailView.prototype, "zplList", {
        get: function () { return this.getChildByName('zplList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "dlsList", {
        get: function () { return this.getChildByName('dlsList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "xyl", {
        get: function () { return this.getChildByName('xylList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "dyl", {
        get: function () { return this.getChildByName('dylList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "zll", {
        get: function () { return this.getChildByName('zllList'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "detailBtn", {
        get: function () { return this.getChildByName('detailBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "btn_close", {
        get: function () { return this.getChildByName('btn_close'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "bankAsk", {
        get: function () { return this.getChildByName('bankAsk'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "xianAsk", {
        get: function () { return this.getChildByName('xianAsk'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadDetailView.prototype, "bottomView", {
        get: function () { return this.getChildByName('bottom'); },
        enumerable: true,
        configurable: true
    });
    CRoadDetailView.SIGN = 'CRoadDetailView';
    return CRoadDetailView;
}(layaMaxUI_1.ui.gamelist.commonView.road.CRoadDetailViewUI));
exports.default = CRoadDetailView;
},{"../../../../../ui/layaMaxUI":271,"./CRoadDetailModel":57}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
// 小眼路
var CRoadDetailXYLComponent = /** @class */ (function (_super) {
    __extends(CRoadDetailXYLComponent, _super);
    function CRoadDetailXYLComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDetailXYLComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var list = this.m_pController.view.xyl;
        ApiUtil_1.ApiUtil.recoverHandler(list.renderHandler);
        list.renderHandler = null;
    };
    CRoadDetailXYLComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDetailXYLComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var list = this.m_pController.view.xyl;
        list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        return true;
    };
    CRoadDetailXYLComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var dlsDataList = this.m_pController.model.dlsDataList;
        var COLS = CRoadView_1.RoadViewConst.SUB_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildXYL(dlsDataList, COLS, ROWS);
        this.m_pController.view.xyl.array = newList;
    };
    CRoadDetailXYLComponent.prototype._onRenderItem = function (comp, idx) {
        comp.updateViewByXYL();
    };
    return CRoadDetailXYLComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDetailXYLComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadView":46,"../component/CRoadBuildDataComponent":47}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
// 蟑螂路
var CRoadDetailZLLComponent = /** @class */ (function (_super) {
    __extends(CRoadDetailZLLComponent, _super);
    function CRoadDetailZLLComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDetailZLLComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var list = this.m_pController.view.zll;
        ApiUtil_1.ApiUtil.recoverHandler(list.renderHandler);
        list.renderHandler = null;
    };
    CRoadDetailZLLComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDetailZLLComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var list = this.m_pController.view.zll;
        list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        return true;
    };
    CRoadDetailZLLComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var dlsDataList = this.m_pController.model.dlsDataList;
        var COLS = CRoadView_1.RoadViewConst.SUB_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildZLL(dlsDataList, COLS, ROWS);
        this.m_pController.view.zll.array = newList;
    };
    CRoadDetailZLLComponent.prototype._onRenderItem = function (comp, idx) {
        comp.updateViewByZLL();
    };
    return CRoadDetailZLLComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDetailZLLComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadView":46,"../component/CRoadBuildDataComponent":47}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRoadView_1 = require("../CRoadView");
var CRoadBuildDataComponent_1 = require("../component/CRoadBuildDataComponent");
var CRoadUtil_1 = require("../CRoadUtil");
var CRoadDetailZPLComponent = /** @class */ (function (_super) {
    __extends(CRoadDetailZPLComponent, _super);
    function CRoadDetailZPLComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CRoadDetailZPLComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var zplList = this.m_pController.view.zplList;
        ApiUtil_1.ApiUtil.recoverHandler(zplList.renderHandler);
        zplList.renderHandler = null;
    };
    CRoadDetailZPLComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CRoadDetailZPLComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        var zplList = this.m_pController.view.zplList;
        zplList.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderZPLItem);
        return true;
    };
    CRoadDetailZPLComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        // 满30个数据要清数据
        var roadList = this.m_pController.model.roadList;
        var askData;
        if (this.m_pController.model.askBank) {
            askData = CRoadUtil_1.RoadUtil.buildAskRoadData(true);
        }
        else if (this.m_pController.model.askXian) {
            askData = CRoadUtil_1.RoadUtil.buildAskRoadData(false);
        }
        if (askData) {
            askData.isAsk = true;
            roadList = roadList.concat(askData);
        }
        var COLS = CRoadView_1.RoadViewConst.SUB_COLS;
        var ROWS = CRoadView_1.RoadViewConst.ROWS;
        var buildComponent = this.m_pController.getComponent(CRoadBuildDataComponent_1.default);
        var newList = buildComponent.buildZPL(roadList, COLS, ROWS);
        this.m_pController.view.zplList.array = newList;
    };
    CRoadDetailZPLComponent.prototype._onRenderZPLItem = function (comp, idx) {
        comp.updateViewByZPL();
    };
    return CRoadDetailZPLComponent;
}(CComponent_1.CComponent));
exports.default = CRoadDetailZPLComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/component/CComponent":15,"../CRoadUtil":45,"../CRoadView":46,"../component/CRoadBuildDataComponent":47}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var CBreathAnimationComponent_1 = require("../../../../common/component/CBreathAnimationComponent");
var CRoadItem = /** @class */ (function (_super) {
    __extends(CRoadItem, _super);
    function CRoadItem() {
        return _super.call(this) || this;
    }
    CRoadItem.prototype.hideAll = function () {
        for (var i = 0; i < this.numChildren; ++i) {
            var child = this.getChildAt(i);
            if (child.name != 'bg') {
                child.visible = false;
            }
        }
    };
    CRoadItem.prototype.updateViewByZPL = function () {
        this.hideAll();
        var roadData = this.dataSource;
        if (!roadData) {
            return;
        }
        this.bank_pair.visible = roadData.isBankPair;
        this.xian_pair.visible = roadData.isXianPair;
        this.xian.visible = roadData.isXianWin;
        this.bank.visible = roadData.isBankWin;
        this.he.visible = roadData.isHe;
        if (roadData.isAsk) {
            if (this.bank_pair.visible)
                this._playBreathAnimation(this.bank_pair);
            if (this.xian_pair.visible)
                this._playBreathAnimation(this.xian_pair);
            if (this.xian.visible)
                this._playBreathAnimation(this.xian);
            if (this.bank.visible)
                this._playBreathAnimation(this.bank);
            if (this.he.visible)
                this._playBreathAnimation(this.he);
        }
        this._updateLongLine(roadData);
    };
    CRoadItem.prototype.updateViewByDLS = function () {
        this.hideAll();
        var roadData = this.dataSource;
        if (!roadData) {
            return;
        }
        if (roadData.isHe) {
            if (roadData.lastXianWin) {
                // 最后一次就闲赢
                this.s_xian.visible = true;
            }
            else if (roadData.lastBankWin) {
                // 最后一次是庄赢
                this.s_bank.visible = true;
            }
            else {
                // 最后一次是和, (首局开和)
                // this.s_he.visible = true;
                // this.ss_he.visible = true;
            }
        }
        else {
            this.s_xian.visible = roadData.isXianWin;
            this.s_bank.visible = roadData.isBankWin;
        }
        // 当前是闲庄赢，也会有要显示和的情况
        if (roadData.heCount > 1) {
            // 连和
            this.heCount.visible = true;
            this.heCount.text = roadData.heCount.toString();
        }
        else if (roadData.heCount == 1) {
            this.ss_he.visible = true;
        }
        if (roadData.isAsk) {
            if (this.s_xian.visible)
                this._playBreathAnimation(this.s_xian);
            if (this.s_bank.visible)
                this._playBreathAnimation(this.s_bank);
            if (this.heCount.visible)
                this._playBreathAnimation(this.heCount);
            if (this.ss_he.visible)
                this._playBreathAnimation(this.ss_he);
        }
        this._updateLongLine(roadData);
    };
    CRoadItem.prototype.updateViewByDYL = function () {
        this.hideAll();
        var roadData = this.dataSource;
        if (!roadData) {
            return;
        }
        var item;
        if (roadData.isTrue) {
            item = this.s_bank;
        }
        else {
            item = this.s_xian;
        }
        item.visible = true;
        if (roadData.isAsk) {
            this._playBreathAnimation(item);
        }
        this._updateLongLine(roadData);
    };
    CRoadItem.prototype.updateViewByXYL = function () {
        this.hideAll();
        var roadData = this.dataSource;
        if (!roadData) {
            return;
        }
        var item;
        if (roadData.isTrue) {
            item = this.xy_bank;
        }
        else {
            item = this.xy_xian;
        }
        item.visible = true;
        if (roadData.isAsk) {
            this._playBreathAnimation(item);
        }
        this._updateLongLine(roadData);
    };
    CRoadItem.prototype.updateViewByZLL = function () {
        this.hideAll();
        var roadData = this.dataSource;
        if (!roadData) {
            return;
        }
        var item;
        if (roadData.isTrue) {
            item = this.zl_bank;
        }
        else {
            item = this.zl_xian;
        }
        item.visible = true;
        if (roadData.isAsk) {
            this._playBreathAnimation(item);
        }
        this._updateLongLine(roadData);
    };
    CRoadItem.prototype._updateLongLine = function (roadData) {
        // if (roadData.isDragon && -1 != roadData.dragonID) {
        //     let item:Laya.Image;
        //     if (roadData.isBankWin || roadData.isHe && roadData.lastBankWin) {
        //         item = this.longLineBank;
        //     } else {
        //         item = this.longLineXian;
        //     }
        //     item.visible = true;
        //     if (0 == roadData.dragonID) {
        //         item.rotation = 90;
        //     } else {
        //         item.rotation = 0;
        //     }
        // }
    };
    CRoadItem.prototype._playBreathAnimation = function (item) {
        var breathComponent = new CBreathAnimationComponent_1.default(this, function () {
            if (breathComponent) {
                breathComponent.destroy();
            }
        }, item, 4, 1, false);
        breathComponent.awake();
        breathComponent.start();
        breathComponent.process();
    };
    Object.defineProperty(CRoadItem.prototype, "he", {
        // zpl用的
        get: function () { return this.getChildByName('he'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "xian", {
        get: function () { return this.getChildByName('xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "bank", {
        get: function () { return this.getChildByName('bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "xian_pair", {
        get: function () { return this.getChildByName('xian_pair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "bank_pair", {
        get: function () { return this.getChildByName('bank_pair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "s_xian", {
        // 其他路用的
        get: function () { return this.getChildByName('s_xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "s_bank", {
        get: function () { return this.getChildByName('s_bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "s_he", {
        get: function () { return this.getChildByName('s_he'); } // 第一把出和的话。显示这个
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "ss_he", {
        get: function () { return this.getChildByName('ss_he'); } // 非第一把出和的话。显示这个
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "heCount", {
        get: function () { return this.getChildByName('he_count'); } // 连和计数
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "zl_xian", {
        // 蟑螂
        get: function () { return this.getChildByName('zl_xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "zl_bank", {
        get: function () { return this.getChildByName('zl_bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "xy_xian", {
        // 小眼
        get: function () { return this.getChildByName('xy_xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CRoadItem.prototype, "xy_bank", {
        get: function () { return this.getChildByName('xy_bank'); },
        enumerable: true,
        configurable: true
    });
    CRoadItem.SIGN = 'CRoadItem';
    return CRoadItem;
}(layaMaxUI_1.ui.gamelist.commonView.road.RoadItemUI));
exports.default = CRoadItem;
},{"../../../../../ui/layaMaxUI":271,"../../../../common/component/CBreathAnimationComponent":14}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var CTutorialPlayComponent_1 = require("./component/CTutorialPlayComponent");
var CTutorialController = /** @class */ (function (_super) {
    __extends(CTutorialController, _super);
    function CTutorialController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CTutorialController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CTutorialPlayComponent_1.default(this));
        this.m_componentManager.start();
        this.updateView();
        console.log('CTutorialController=onEnable');
    };
    CTutorialController.prototype.onDisable = function () {
        this.m_componentManager.destroy();
        this.m_componentManager = null;
    };
    CTutorialController.prototype.updateView = function () {
        this.m_componentManager.process();
    };
    Object.defineProperty(CTutorialController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTutorialController.prototype, "model", {
        get: function () { return this.m_view.model; } // 因为生命周期的原因. model存在view里面
        ,
        enumerable: true,
        configurable: true
    });
    return CTutorialController;
}(Laya.Script));
exports.default = CTutorialController;
},{"../../../common/component/CComponent":15,"./component/CTutorialPlayComponent":65}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CTutorialView = /** @class */ (function (_super) {
    __extends(CTutorialView, _super);
    function CTutorialView() {
        return _super.call(this) || this;
    }
    CTutorialView.prototype.onDestroy = function () {
    };
    CTutorialView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CTutorialView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CTutorialView.prototype._updateView = function () {
    };
    CTutorialView.prototype._onEvent = function () {
    };
    CTutorialView.prototype._offEvent = function () {
    };
    Object.defineProperty(CTutorialView.prototype, "bg", {
        get: function () { return this.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTutorialView.prototype, "img", {
        get: function () { return this.getChildByName('img'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTutorialView.prototype, "btn", {
        get: function () { return this.getChildByName('btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTutorialView.prototype, "txt", {
        get: function () { return this.getChildByName('txt'); },
        enumerable: true,
        configurable: true
    });
    CTutorialView.SIGN = 'CTutorialView';
    return CTutorialView;
}(layaMaxUI_1.ui.gamelist.commonView.TutorialViewUI));
exports.default = CTutorialView;
},{"../../../../ui/layaMaxUI":271}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var StopAllMouseEvent_1 = require("../../../../common/StopAllMouseEvent");
var CTutorialPlayComponent = /** @class */ (function (_super) {
    __extends(CTutorialPlayComponent, _super);
    function CTutorialPlayComponent(pController) {
        var _this = _super.call(this) || this;
        _this.TOTAL_STEP = 6;
        _this.m_pController = pController;
        return _this;
    }
    CTutorialPlayComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        StopAllMouseEvent_1.default.unregister(this.view);
        this.view.btn.off(Laya.Event.MOUSE_DOWN, this, this._onClickBtn_uiHandler);
        this.view.off(Laya.Event.MOUSE_DOWN, this, this._onClickView_uiHandler);
        this.m_pController = null;
    };
    CTutorialPlayComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        StopAllMouseEvent_1.default.register(this.view);
        this.TOTAL_STEP = this.m_pController.model.imgList.length;
        this.m_step = 0;
        this.view.btn.on(Laya.Event.MOUSE_DOWN, this, this._onClickBtn_uiHandler);
        this.view.on(Laya.Event.MOUSE_DOWN, this, this._onClickView_uiHandler);
        return true;
    };
    CTutorialPlayComponent.prototype.process = function () {
        this._updateView();
    };
    CTutorialPlayComponent.prototype._onClickBtn_uiHandler = function (e) {
        e.stopPropagation();
        if (this.view.closeHandler) {
            this.view.closeHandler.run();
        }
    };
    CTutorialPlayComponent.prototype._onClickView_uiHandler = function (e) {
        e.stopPropagation();
        this.m_step++;
        if (this.m_step >= this.TOTAL_STEP) {
            // over 
            if (this.view.closeHandler) {
                this.view.closeHandler.run();
            }
        }
        else {
            this._updateView();
        }
    };
    CTutorialPlayComponent.prototype._updateView = function () {
        if (this.m_step < this.TOTAL_STEP) {
            this.view.txt.text = '跳过说明';
        }
        else {
            this.view.txt.text = '开始游戏';
        }
        this.view.img.skin = this.m_pController.model.imgList[this.m_step];
    };
    Object.defineProperty(CTutorialPlayComponent.prototype, "view", {
        get: function () { return this.m_pController.view; },
        enumerable: true,
        configurable: true
    });
    return CTutorialPlayComponent;
}(CComponent_1.CComponent));
exports.default = CTutorialPlayComponent;
},{"../../../../common/StopAllMouseEvent":13,"../../../../common/component/CComponent":15}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaccConf = /** @class */ (function () {
    function CBaccConf() {
    }
    CBaccConf.SOUND_BET_COIN = 'bet_coin';
    CBaccConf.SOUND_BET_START_ALERT = 'bet_start_alert';
    CBaccConf.SOUND_BET_START = 'bet_start';
    CBaccConf.SOUND_BET_STOP = 'bet_stop';
    CBaccConf.SOUND_COIN_FLY_2_USER = 'coin_fly_to_user';
    CBaccConf.SOUND_COUNT_DOWN = 'countdown';
    CBaccConf.SOUND_DEAL_POKER = 'deal_poker';
    CBaccConf.SOUND_OPEN_POKER = 'open_poker';
    CBaccConf.SOUND_PAICAI = 'paicai';
    CBaccConf.SOUND_SHOU_POKER = 'shouPoker';
    return CBaccConf;
}());
exports.default = CBaccConf;
},{}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CPathBacc = /** @class */ (function () {
    function CPathBacc() {
    }
    CPathBacc.getSoundPath = function (name) {
        return CPathBacc.s_rootDir + name + CPathBacc.TYPE;
    };
    CPathBacc.s_rootDir = 'gamelist/baijiale/sound/';
    CPathBacc.TYPE = '.wav';
    return CPathBacc;
}());
exports.default = CPathBacc;
},{}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeHallRoomListComponent_1 = require("./component/CBaijialeHallRoomListComponent");
var CBaijialeHallTopComponent_1 = require("./component/CBaijialeHallTopComponent");
var CComponent_1 = require("../../../common/component/CComponent");
var CBaijialeReconnectComponent_1 = require("./component/CBaijialeReconnectComponent");
var CBaijialeRedirectComponent_1 = require("./component/CBaijialeRedirectComponent");
var CBaijialeHallController = /** @class */ (function (_super) {
    __extends(CBaijialeHallController, _super);
    function CBaijialeHallController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CBaijialeHallController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(new CBaijialeHallRoomListComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeHallTopComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeReconnectComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeRedirectComponent_1.default(this));
        this.m_compManager.start();
        // StopAllMouseEvent.register(this.m_view);
        this.updateView();
    };
    CBaijialeHallController.prototype.onDisable = function () {
        // StopAllMouseEvent.unregister(this.m_view);
        this.m_compManager.destroy();
        this.m_compManager = null;
    };
    CBaijialeHallController.prototype.updateView = function () {
        this.m_compManager.process();
    };
    Object.defineProperty(CBaijialeHallController.prototype, "compManager", {
        get: function () {
            return this.m_compManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeHallController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    return CBaijialeHallController;
}(Laya.Script));
exports.default = CBaijialeHallController;
},{"../../../common/component/CComponent":15,"./component/CBaijialeHallRoomListComponent":71,"./component/CBaijialeHallTopComponent":72,"./component/CBaijialeReconnectComponent":73,"./component/CBaijialeRedirectComponent":74}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeHallModel = /** @class */ (function () {
    function CBaijialeHallModel() {
    }
    return CBaijialeHallModel;
}());
exports.CBaijialeHallModel = CBaijialeHallModel;
exports.BaccNetConf = {
    // response
    DealPoker: '1219',
    OpenPoker: '1220',
    BetsBroadcast: '1221',
    Result: '1222',
    DealCountDown: '1203',
    UserInOut: '1204',
    Shuffle: '1206',
    // send
    Bets: '1111',
    History: '1112',
    EnterGame: '1113',
    LookPokers: '1117',
    ClientReady: '1118',
    StartBetCountDown: '1223' // 开始下注
};
// export class CPokersData {
//     pokers:Array<number>;
//     point:number;
// }
},{}],70:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CBaijialeHallView = /** @class */ (function (_super) {
    __extends(CBaijialeHallView, _super);
    function CBaijialeHallView() {
        return _super.call(this) || this;
    }
    CBaijialeHallView.prototype.onDestroy = function () {
    };
    CBaijialeHallView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CBaijialeHallView.prototype.onDisable = function () {
        this._offEvent();
    };
    CBaijialeHallView.prototype._updateView = function () {
    };
    CBaijialeHallView.prototype._onEvent = function () {
    };
    CBaijialeHallView.prototype._offEvent = function () {
    };
    Object.defineProperty(CBaijialeHallView.prototype, "topView", {
        get: function () {
            return this.m_topView;
        },
        set: function (v) {
            this.m_topView = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeHallView.prototype, "topBox", {
        get: function () {
            return this.getChildByName('top_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeHallView.prototype, "panel", {
        get: function () {
            return this.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeHallView.prototype, "deskList", {
        get: function () {
            return this.panel.getChildByName('desk_list');
        },
        enumerable: true,
        configurable: true
    });
    CBaijialeHallView.prototype.getDeskRoomName = function (item, index) {
        return item.getChildByName('room' + (index));
    };
    CBaijialeHallView.prototype.getDeskRoomTotalMoneyLimit = function (item) {
        return item.getChildByName('room_money_limit');
    };
    CBaijialeHallView.prototype.getDeskRoomBetsRull = function (item) {
        return item.getChildByName('room_money_bets');
    };
    CBaijialeHallView.prototype.getDeskImgNormal = function (item) { return item.getChildByName('desk_img'); };
    CBaijialeHallView.prototype.getDeskImgTest = function (item) { return item.getChildByName('desk_img2'); };
    return CBaijialeHallView;
}(layaMaxUI_1.ui.gamelist.bjl.BaijialeHallSceneUI));
exports.default = CBaijialeHallView;
},{"../../../../ui/layaMaxUI":271}],71:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var NetState_1 = require("../../../../../hbcore/net/NetState");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaijialeHallModel_1 = require("../CBaijialeHallModel");
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CComponent_1 = require("../../../../common/component/CComponent");
var CWarnView_1 = require("../../../../common/CWarnView");
var CBaijialeHallTopComponent_1 = require("./CBaijialeHallTopComponent");
var CBaijialeHallRoomListComponent = /** @class */ (function (_super) {
    __extends(CBaijialeHallRoomListComponent, _super);
    function CBaijialeHallRoomListComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBaijialeHallRoomListComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_view.panel.vScrollBarSkin = '';
        this.m_view.panel.vScrollBar.autoHide = true;
        this.m_view.deskList.renderHandler = Laya.Handler.create(this, this._onDeskRenderItem, null, false);
        this.m_view.deskList.mouseHandler = Laya.Handler.create(this, this._onDeskSelectHandler, null, false);
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.on(this, CBaijialeHallModel_1.BaccNetConf.EnterGame, this._onEnterGameRes);
        this.m_entered = false;
        this.m_netState = new NetState_1.default();
        return true;
    };
    CBaijialeHallRoomListComponent.prototype.onDestroy = function () {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, CBaijialeHallModel_1.BaccNetConf.EnterGame);
        if (this.m_view.deskList.renderHandler) {
            this.m_view.deskList.renderHandler.recover();
            this.m_view.deskList.renderHandler = null;
        }
        if (this.m_view.deskList.mouseHandler) {
            this.m_view.deskList.mouseHandler.recover();
            this.m_view.deskList.mouseHandler = null;
        }
    };
    CBaijialeHallRoomListComponent.prototype.process = function () {
        this._updateView();
    };
    CBaijialeHallRoomListComponent.prototype._updateView = function () {
        var stageInfo = GM_1.GM.instance.userInfo.gameData.curStageInfo;
        this.m_view.deskList.array = stageInfo.stageInfos;
    };
    CBaijialeHallRoomListComponent.prototype._onDeskRenderItem = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var deskInfo = item.dataSource;
        for (var i = 0; i < 4; ++i) {
            if (i == idx) {
                this.m_view.getDeskRoomName(item, i).visible = true;
            }
            else {
                this.m_view.getDeskRoomName(item, i).visible = false;
            }
        }
        var isTest = 0 == deskInfo.stageId;
        this.m_view.getDeskImgNormal(item).visible = !isTest;
        this.m_view.getDeskImgTest(item).visible = isTest;
        this.m_view.getDeskRoomTotalMoneyLimit(item).text = Lang_1.default.Get('game_hall_join_rule', { v1: deskInfo.minJoinCoin });
        this.m_view.getDeskRoomBetsRull(item).text = Lang_1.default.Get('game_hall_bets_rule', { v1: deskInfo.minBet, v2: deskInfo.maxBet });
    };
    CBaijialeHallRoomListComponent.prototype._onDeskSelectHandler = function (e, idx) {
        var _this = this;
        if (this.m_entered) {
            return;
        }
        if (e.type != Laya.Event.CLICK) {
            return;
        }
        if (this.m_netState.isNetStateBusy(CBaijialeHallModel_1.BaccNetConf.EnterGame)) {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get('net_res_busy'));
            return;
        }
        var cell = this.m_view.deskList.getCell(idx);
        if (cell && cell.dataSource) {
            GM_1.GM.playButtonSound();
            var deskInfo = cell.dataSource;
            if (deskInfo) {
                var hasEnoughMoney = GM_1.GM.instance.userInfo.balance >= deskInfo.minJoinCoin;
                if (!hasEnoughMoney) {
                    CWarnView_1.default.instance().showNotEnoughMoney(this, function () {
                        var topComponent = _this.m_pController.compManager.getComponent(CBaijialeHallTopComponent_1.default);
                        if (topComponent) {
                            topComponent.openAddMoneyView();
                        }
                    }, null);
                }
                else {
                    this.m_netState.setNetStateBusy(CBaijialeHallModel_1.BaccNetConf.EnterGame);
                    var pSfsGame = GM_1.GM.instance.network.sfsGame;
                    pSfsGame.send(CBaijialeHallModel_1.BaccNetConf.EnterGame, { stageId: deskInfo.stageId });
                }
            }
        }
    };
    CBaijialeHallRoomListComponent.prototype._onEnterGameRes = function (params) {
        this.m_netState.setNetStateIdle(CBaijialeHallModel_1.BaccNetConf.EnterGame);
        if (params.errorCode != 0) {
            GM_1.GM.instance.messageBox.showNetError(params.errorCode);
            return;
        }
        this.m_entered = true;
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_ROOM);
    };
    Object.defineProperty(CBaijialeHallRoomListComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CBaijialeHallRoomListComponent;
}(CComponent_1.CComponent));
exports.default = CBaijialeHallRoomListComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/net/NetState":263,"../../../../common/CWarnView":12,"../../../../common/component/CComponent":15,"../CBaijialeHallModel":69,"./CBaijialeHallTopComponent":72}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var GM_1 = require("../../../../../gm/GM");
var CTopView_1 = require("../../../../common/CTopView");
var CUserView_1 = require("../../../../hall/user/CUserView");
var CRuleView_1 = require("../../../../hall/rule/CRuleView");
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CComponent_1 = require("../../../../common/component/CComponent");
var CBaijialeHallTopComponent = /** @class */ (function (_super) {
    __extends(CBaijialeHallTopComponent, _super);
    function CBaijialeHallTopComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBaijialeHallTopComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_BALANCE_UPDATE);
        this.m_view.topView.unregister();
    };
    CBaijialeHallTopComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CBaijialeHallTopComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        // 变化部分
        var topBox = this.m_view.topBox;
        var infoBoxVisible = true;
        this.m_view.topView = new CTopView_1.CTopView(topBox);
        this.m_view.topView.infoBox.visible = infoBoxVisible;
        this.m_view.topView.register(this, this.onReturn_uiHandler, this.onUser_uiHandler, this.onRule_uiHandler, this.onAddMoney_uiHandle);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_BALANCE_UPDATE, this._onBalanceUpdate);
        this._updateTop();
        return true;
    };
    CBaijialeHallTopComponent.prototype._onBalanceUpdate = function () {
        this._updateTop();
    };
    CBaijialeHallTopComponent.prototype._updateTop = function () {
        var money = GM_1.GM.instance.userInfo.balance;
        var nickName = GM_1.GM.instance.userInfo.nickName;
        var topDisplayData = new CTopView_1.CTopViewDisplayData(money, nickName);
        this.m_view.topView.updateView(topDisplayData, GM_1.GM.coinMap.getCoinType(), false);
    };
    // return 
    CBaijialeHallTopComponent.prototype.onReturn_uiHandler = function () {
        GM_1.GM.playButtonSound();
        var returnEvent = GMEvent_1.default.EVENT_ENTER_HALL;
        GM_1.GM.instance.eventDispater.event(returnEvent);
    };
    ;
    // user
    CBaijialeHallTopComponent.prototype.onUser_uiHandler = function () {
        var _this = this;
        GM_1.GM.playButtonSound();
        var viewIdx = CBaijialeHallTopComponent.ViewIndex.User;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.process(CUserView_1.default, CUserView_1.default.SIGN, viewIdx, null, false, null, Laya.Handler.create(this, function () {
            _this._updateTop();
        }));
    };
    ;
    // rule
    CBaijialeHallTopComponent.prototype.onRule_uiHandler = function () {
        GM_1.GM.playButtonSound();
        this.getComponent(COpenSubViewComponent_1.default).process(CRuleView_1.default, CRuleView_1.default.SIGN, CBaijialeHallTopComponent.ViewIndex.Rule);
    };
    ;
    // addMoney
    CBaijialeHallTopComponent.prototype.openAddMoneyView = function () {
        this.onAddMoney_uiHandle(false);
    };
    CBaijialeHallTopComponent.prototype.onAddMoney_uiHandle = function (isFromUI) {
        var _this = this;
        if (isFromUI === void 0) { isFromUI = true; }
        if (isFromUI) {
            GM_1.GM.playButtonSound();
        }
        var viewIdx = CBaijialeHallTopComponent.ViewIndex.User;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        var viewOpenFunction = function () {
            var view = openComponent.getView(viewIdx).view;
            view.off('onOpened', this, viewOpenFunction);
            view.redirectToPay();
        };
        openComponent.process(CUserView_1.default, CUserView_1.default.SIGN, viewIdx, null, false, Laya.Handler.create(this, function () {
            var view = openComponent.getView(viewIdx).view;
            if (!view.opened) {
                view.on('onOpened', _this, viewOpenFunction);
            }
            else {
                view.redirectToPay();
            }
        }), Laya.Handler.create(this, function () {
            _this._updateTop();
        }));
    };
    Object.defineProperty(CBaijialeHallTopComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    CBaijialeHallTopComponent.ViewIndex = {
        User: 0, Rule: 1
    };
    return CBaijialeHallTopComponent;
}(CComponent_1.CComponent));
exports.default = CBaijialeHallTopComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../common/CTopView":11,"../../../../common/component/CComponent":15,"../../../../common/component/COpenSubViewComponent":16,"../../../../hall/rule/CRuleView":196,"../../../../hall/user/CUserView":199}],73:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var GM_1 = require("../../../../../gm/GM");
var GameNetResponse_1 = require("../../../../../gm/GameNetResponse");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var log_1 = require("../../../../../hbcore/framework/log");
var CBaijialeReconnectComponent = /** @class */ (function (_super) {
    __extends(CBaijialeReconnectComponent, _super);
    function CBaijialeReconnectComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBaijialeReconnectComponent.prototype.onDestroy = function () {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, GameNetResponse_1.GameConf.Reconnect);
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeReconnectComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeReconnectComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeReconnectComponent.prototype.process = function () {
        var loginData = GM_1.GM.instance.userInfo.gameData.curStageInfo;
        if (loginData.hasInGame > 0) {
            loginData.hasInGame = 0;
            log_1.log.log('开始重连');
            this.m_pController.view.mouseEnabled = false;
            var pSfsGame = GM_1.GM.instance.network.sfsGame;
            pSfsGame.Emitter.on(this, GameNetResponse_1.GameConf.Reconnect, this._onReconnectRes);
            pSfsGame.send(GameNetResponse_1.GameConf.Reconnect, { roomName: loginData.roomName });
        }
    };
    CBaijialeReconnectComponent.prototype._onReconnectRes = function (res) {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, GameNetResponse_1.GameConf.Reconnect);
        var newData = CBaseNet_1.default.Clone(res, CBaseNet_1.default);
        if (newData.isError) {
            log_1.log.log('重连失败');
            this.m_pController.view.mouseEnabled = true;
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('reconnect_fail'));
            return;
        }
        log_1.log.log('重连成功');
    };
    return CBaijialeReconnectComponent;
}(CComponent_1.CComponent));
exports.default = CBaijialeReconnectComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GameNetResponse":223,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../../../common/component/CComponent":15,"../../../../net/CBaseNet":216}],74:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeHallTopComponent_1 = require("./CBaijialeHallTopComponent");
var CBaijialeRedirectComponent = /** @class */ (function (_super) {
    __extends(CBaijialeRedirectComponent, _super);
    function CBaijialeRedirectComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CBaijialeRedirectComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeRedirectComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeRedirectComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeRedirectComponent.prototype.process = function () {
        var redirect = GM_1.GM.gameData.getRedirect();
        if (redirect > 0) {
            var topComponent = this.m_pController.compManager.getComponent(CBaijialeHallTopComponent_1.default);
            if (topComponent) {
                topComponent.openAddMoneyView();
            }
        }
        GM_1.GM.gameData.resetRedirect();
    };
    return CBaijialeRedirectComponent;
}(CComponent_1.CComponent));
exports.default = CBaijialeRedirectComponent;
},{"../../../../../gm/GM":221,"../../../../common/component/CComponent":15,"./CBaijialeHallTopComponent":72}],75:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NetState_1 = require("../../../../hbcore/net/NetState");
var CComponent_1 = require("../../../common/component/CComponent");
var CBaijialeNetComponent_1 = require("./component/CBaijialeNetComponent");
var CBjlProcedureComponent_1 = require("./procedure/CBjlProcedureComponent");
var CBaijialeLocationComponent_1 = require("./component/CBaijialeLocationComponent");
var CBaijialeTopComponent_1 = require("./component/CBaijialeTopComponent");
var GM_1 = require("../../../../gm/GM");
var CBaijialeDealPortComponent_1 = require("./component/CBaijialeDealPortComponent");
var CBaijialeDealAnimationComponent_1 = require("./component/CBaijialeDealAnimationComponent");
var ApiUtil_1 = require("../../../../hbcore/util/ApiUtil");
var CBaijialeRoomStateComponent_1 = require("./component/CBaijialeRoomStateComponent");
var CBaijialeDealComponent_1 = require("./component/CBaijialeDealComponent");
var CBaijialeOpenPokerComponent_1 = require("./component/CBaijialeOpenPokerComponent");
var CBaijialeOpenAnimationComponent_1 = require("./component/CBaijialeOpenAnimationComponent");
var CBaijialeResultComponent_1 = require("./component/CBaijialeResultComponent");
var CBaijialeDealQuicklyComponent_1 = require("./component/CBaijialeDealQuicklyComponent");
var CBaijialeOpenPokerQuicklyComponent_1 = require("./component/CBaijialeOpenPokerQuicklyComponent");
var CBaijialeMd5TipsComponent_1 = require("./component/CBaijialeMd5TipsComponent");
var CBaijiale6PokerComponent_1 = require("./component/CBaijiale6PokerComponent");
var CBaijialeBottomComponent_1 = require("./component/CBaijialeBottomComponent");
var CBaijialeLightWinAreaComponent_1 = require("./component/CBaijialeLightWinAreaComponent");
var CBaijialeBetsComponent_1 = require("./component/CBaijialeBetsComponent");
var CBaijialeRecoverPokerComponent_1 = require("./component/CBaijialeRecoverPokerComponent");
var CBaijialePaicaiComponent_1 = require("./component/CBaijialePaicaiComponent");
var CBaijialeRoadComponent_1 = require("./component/CBaijialeRoadComponent");
var CBaijialeShuffleComponent_1 = require("./component/CBaijialeShuffleComponent");
var CBaijialeSoundComponent_1 = require("./component/CBaijialeSoundComponent");
var CBaijialeBgComponent_1 = require("./component/CBaijialeBgComponent");
var CBaijialeController = /** @class */ (function (_super) {
    __extends(CBaijialeController, _super);
    function CBaijialeController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CBaijialeController.prototype.onEnable = function () {
        GM_1.GM.instance.gameStage.soundSystem.stopMusic();
        this.m_view = this.owner;
        this.m_netState = new NetState_1.default();
        this.m_isReady = false;
        this.m_isBeted = false;
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(this.m_netComponent = new CBaijialeNetComponent_1.CBaijialeNetComponent(this));
        this.m_compManager.addComponent(new CBaijialeBgComponent_1.default(this));
        this.m_compManager.addComponent(this.m_procedureComponent = new CBjlProcedureComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeLocationComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeTopComponent_1.default(this));
        this.m_compManager.addComponent(this.m_roomStateComponent = new CBaijialeRoomStateComponent_1.default(this));
        this.m_compManager.addComponent(this.m_betsComponent = new CBaijialeBetsComponent_1.CBaijialeBetsComponent(this));
        this.m_compManager.addComponent(new CBaijialeDealPortComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeDealAnimationComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeDealQuicklyComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeOpenAnimationComponent_1.default(this));
        this.m_compManager.addComponent(this.m_dealComponent = new CBaijialeDealComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeOpenPokerComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeOpenPokerQuicklyComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeResultComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeMd5TipsComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijiale6PokerComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeBottomComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeLightWinAreaComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeRecoverPokerComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialePaicaiComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeRoadComponent_1.default(this));
        this.m_compManager.addComponent(new CBaijialeShuffleComponent_1.default(this));
        this.m_compManager.addComponent(this.m_soundComponent = new CBaijialeSoundComponent_1.default(this));
        // this.m_compManager.addComponent(new CBaijialeTestComponent(this));
        // 测试注释掉
        // if (GM.instance.userInfo.userSetting.isNewBacc) {
        //     GM.instance.userInfo.userSetting.isNewBacc = false;
        //     this.m_compManager.addComponent(new CBaijialeTutorialComponent(this));
        // }
        this.m_compManager.start();
        GM_1.GM.instance.gameStage.sequentialSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._waitStart));
    };
    CBaijialeController.prototype._waitStart = function () {
        var isStarted = this.m_compManager.start();
        if (isStarted) {
            Laya.timer.clear(this, this._waitStart);
            this.m_isReady = true;
            this.m_compManager.getComponent(CBjlProcedureComponent_1.default).process();
            this.m_compManager.process();
            return true;
        }
        return false;
    };
    CBaijialeController.prototype.onDisable = function () {
        this.m_compManager.destroy();
        this.m_compManager = null;
    };
    CBaijialeController.prototype.getComponent = function (cls) {
        return this.m_compManager.getComponent(cls);
    };
    Object.defineProperty(CBaijialeController.prototype, "netComponent", {
        get: function () {
            return this.m_netComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "betsComponent", {
        get: function () {
            return this.m_betsComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "roomStateComponent", {
        get: function () {
            return this.m_roomStateComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "dealComponent", {
        get: function () {
            return this.m_dealComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "view", {
        get: function () {
            return this.m_view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "isPlaying", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "soundComponent", {
        get: function () {
            return this.m_soundComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeController.prototype, "netState", {
        get: function () { return this.m_netState; },
        enumerable: true,
        configurable: true
    });
    return CBaijialeController;
}(Laya.Script));
exports.default = CBaijialeController;
},{"../../../../gm/GM":221,"../../../../hbcore/net/NetState":263,"../../../../hbcore/util/ApiUtil":266,"../../../common/component/CComponent":15,"./component/CBaijiale6PokerComponent":78,"./component/CBaijialeBetsComponent":80,"./component/CBaijialeBgComponent":81,"./component/CBaijialeBottomComponent":82,"./component/CBaijialeDealAnimationComponent":84,"./component/CBaijialeDealComponent":85,"./component/CBaijialeDealPortComponent":86,"./component/CBaijialeDealQuicklyComponent":87,"./component/CBaijialeLightWinAreaComponent":89,"./component/CBaijialeLocationComponent":90,"./component/CBaijialeMd5TipsComponent":91,"./component/CBaijialeNetComponent":92,"./component/CBaijialeOpenAnimationComponent":93,"./component/CBaijialeOpenPokerComponent":94,"./component/CBaijialeOpenPokerQuicklyComponent":95,"./component/CBaijialePaicaiComponent":96,"./component/CBaijialeRecoverPokerComponent":97,"./component/CBaijialeResultComponent":98,"./component/CBaijialeRoadComponent":99,"./component/CBaijialeRoomStateComponent":100,"./component/CBaijialeShuffleComponent":102,"./component/CBaijialeSoundComponent":103,"./component/CBaijialeTopComponent":104,"./procedure/CBjlProcedureComponent":106}],76:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaseNet_1 = require("../../../net/CBaseNet");
var CPokerData_1 = require("../../_commonModel/CPokerData");
var CBaijialeModel = /** @class */ (function () {
    function CBaijialeModel() {
    }
    return CBaijialeModel;
}());
exports.default = CBaijialeModel;
exports.ServerGameState = {
    STATE_INIT: 0, STATE_SHUFFLE: 1, STATE_DEAL: 2, STATE_BETS: 3, STATE_OPEN: 4, STATE_RESULT: 5, STATE_IDLE: 6
};
var CBaccData = /** @class */ (function () {
    function CBaccData() {
        this.lookPokerData = new Array(CBaccData.MAX_POKER_COUNT);
        for (var i = 0; i < this.lookPokerData.length; ++i) {
            this.lookPokerData[i] = new CPokerData_1.CPokerData();
            this.lookPokerData[i].id = i + 1;
        }
        this.pokerList = new Array(6);
        for (var i = 0; i < this.pokerList.length; i++) {
            this.pokerList[i] = { data: null, isOpen: false };
        }
        this.dealCountDownData = new CBaccCountDownData();
        this.dealCountDownData.second = -1;
    }
    CBaccData.prototype.reset = function () {
        this.betsData = null;
    };
    CBaccData.prototype.updateEntryData = function (data) {
        // 进房间时, location的余额是错的, 需要减去已下注的金额
        // 重进房间时, 如果是下注状态或发牌状态, 服务器发下来的余额是没减去下注金额的
        // 如果是结算状态, 发下来的余额是结算后的金额
        if (data.state == exports.ServerGameState.STATE_BETS || data.state == exports.ServerGameState.STATE_DEAL) {
            for (var _i = 0, _a = data.locationInfos; _i < _a.length; _i++) {
                var location_1 = _a[_i];
                if (location_1) {
                    location_1.balance -= location_1.totalBet;
                }
            }
        }
        //  else if (data.state == ServerGameState.STATE_OPEN || data.state == ServerGameState.STATE_RESULT) {
        // for (let location of data.locationInfos) {
        // 	if (location) {
        // 		location.balance += location.winCoin;
        // 	}
        // }	
        // }
        this.enterData = data;
        // if (this.enterData.history) {
        // 	this.roadHistroyList = this.enterData.history;
        // } else {
        // 	this.roadHistroyList = [];			
        // }
        var pokers;
        if (this.enterData.playerPokers && this.enterData.playerPokers.pokers && this.enterData.playerPokers.pokers.length > 0) {
            pokers = this.enterData.playerPokers.pokers;
            this.updatePokerState(0, pokers[0], pokers[0].seed.length > 0);
            this.updatePokerState(2, pokers[1], pokers[1].seed.length > 0);
        }
        if (this.enterData.bankerPokers && this.enterData.bankerPokers.pokers && this.enterData.bankerPokers.pokers.length > 0) {
            pokers = this.enterData.bankerPokers.pokers;
            this.updatePokerState(1, pokers[0], pokers[0].seed.length > 0);
            this.updatePokerState(3, pokers[1], pokers[1].seed.length > 0);
        }
        this.roundNum = this.enterData.roundNum;
        this.lastAreaWinList = []; // this.enterData.bingoAreaIds; // 这是最近一把的下注赢区数据
    };
    CBaccData.prototype.updateDealData = function (newData) {
        this.dealPokerData = newData;
        this.roundNum = newData.roundNum;
    };
    CBaccData.prototype.updateOpenPokerData = function (data) {
        this.openPokerData = data;
        var histroyData = new CRoadHistoryData();
        histroyData.winFlag = data.winFlag;
        this.updateRoadHistroyData(histroyData);
        this.lastAreaWinList = this.openPokerData.bingoAreaIds;
    };
    CBaccData.prototype.updateResultPokerData = function (data) {
        this.resultData = data;
    };
    CBaccData.prototype.updateRoadHistroyData = function (data) {
        // this.roadHistroyList.push(data);
    };
    CBaccData.prototype.updateLookPokerData = function (data) {
        if (data.pokers == null || data.pokers.length == 0) {
            return;
        }
        if (data.bulePlace > 0) {
            this.bluePokerPlace = data.bulePlace;
        }
        var firstPoker = data.pokers[0];
        var startID = firstPoker.id - 1; // id从1开始
        var setIndex;
        var blueAddIndex = 0;
        for (var i = 0; i < data.pokers.length; ++i) {
            setIndex = i + startID;
            // 增加蓝牌
            if (this.bluePokerPlace > 0 && (setIndex + 1 == this.bluePokerPlace)) {
                this.lookPokerData[setIndex].id = 0;
                this.lookPokerData[setIndex].seed = '';
                this.lookPokerData[setIndex].mark = '';
                this.lookPokerData[setIndex].poker = '';
                this.lookPokerData[setIndex].isBlue = true;
                blueAddIndex = 1;
            }
            // 蓝牌后面的牌。index要加1
            if ((setIndex + 1) >= this.bluePokerPlace && this.bluePokerPlace != -1) {
                setIndex = i + startID + 1;
            }
            this.lookPokerData[setIndex].id = data.pokers[i].id;
            this.lookPokerData[setIndex].seed = data.pokers[i].seed;
            this.lookPokerData[setIndex].mark = data.pokers[i].mark;
            this.lookPokerData[setIndex].poker = data.pokers[i].poker;
            this.lookPokerData[setIndex].isBlue = false;
        }
    };
    CBaccData.prototype.updateBetsHistroyData = function (data) {
        this.betsHistroyData = data;
    };
    CBaccData.prototype.clearByShuffle = function () {
        this.bluePokerPlace = -1;
        for (var _i = 0, _a = this.lookPokerData; _i < _a.length; _i++) {
            var data = _a[_i];
            data.id = 0;
            data.seed = '';
            data.mark = '';
            data.poker = '';
            data.isBlue = false;
        }
        this.enterData.history = [];
        // this.roadHistroyList = []; 
    };
    CBaccData.prototype.updatePokerState = function (idx, data, isOpen) {
        this.pokerList[idx].data = data;
        this.pokerList[idx].isOpen = isOpen;
    };
    CBaccData.MAX_POKER_COUNT = 417; // 1张蓝牌 + 416
    return CBaccData;
}());
exports.CBaccData = CBaccData;
var CPokerListData = /** @class */ (function () {
    function CPokerListData() {
    }
    return CPokerListData;
}());
exports.CPokerListData = CPokerListData;
var CPlayerBetInfosData = /** @class */ (function () {
    function CPlayerBetInfosData() {
    }
    return CPlayerBetInfosData;
}());
exports.CPlayerBetInfosData = CPlayerBetInfosData;
var CLocationInfosData = /** @class */ (function () {
    function CLocationInfosData() {
    }
    return CLocationInfosData;
}());
exports.CLocationInfosData = CLocationInfosData;
// 玩家的投注信息 转为 区域下注信息
function betInfo2AreaInfo(playerBetInfos) {
    var betAreaInfoList = new Array();
    var betAreaObj = new Object();
    for (var _i = 0, playerBetInfos_1 = playerBetInfos; _i < playerBetInfos_1.length; _i++) {
        var betInfo = playerBetInfos_1[_i];
        var betAreaInfo = void 0;
        if (!betAreaObj.hasOwnProperty(betInfo.id.toString())) {
            betAreaInfo = new CBetAreaInfosData();
            betAreaInfo.id = betInfo.id;
            betAreaInfo.totalBet = 0;
            betAreaObj[betInfo.id.toString()] = betAreaInfo;
        }
        betAreaInfo = betAreaObj[betInfo.id.toString()];
        betAreaInfo.totalBet += betInfo.betCoin;
    }
    for (var key in betAreaObj) {
        betAreaInfoList.push(betAreaObj[key]);
    }
    return betAreaInfoList;
}
exports.betInfo2AreaInfo = betInfo2AreaInfo;
var CBetAreaInfosData = /** @class */ (function () {
    function CBetAreaInfosData() {
    }
    return CBetAreaInfosData;
}());
exports.CBetAreaInfosData = CBetAreaInfosData;
var CRoadHistoryData = /** @class */ (function () {
    function CRoadHistoryData() {
    }
    return CRoadHistoryData;
}());
exports.CRoadHistoryData = CRoadHistoryData;
// 1118
var CBaccEnterData = /** @class */ (function (_super) {
    __extends(CBaccEnterData, _super);
    function CBaccEnterData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CBaccEnterData.prototype.reset = function () {
        this.history = [];
    };
    CBaccEnterData.prototype.updateLocationInfo = function (data) {
        var index = this.getLocationIndexByPlayerId(data.playerId);
        if (data.flag == 0) {
            // 退出
            if (-1 != index) {
                this.locationInfos.splice(index, 1);
            }
        }
        else {
            if (-1 == index) {
                var locationData = new CLocationInfosData();
                locationData.balance = data.balance;
                locationData.nickName = data.nickName;
                locationData.location = data.location;
                locationData.totalBet = 0;
                locationData.winCoin = 0;
                locationData.playerId = data.playerId;
                locationData.playerBetInfos = null;
                this.locationInfos.push(locationData);
            }
        }
    };
    CBaccEnterData.prototype.getLocationIndexByPlayerId = function (playerId) {
        for (var i = 0; i < this.locationInfos.length; ++i) {
            if (!this.locationInfos[i]) {
                continue;
            }
            if (this.locationInfos[i].playerId == playerId) {
                // finded;
                return i;
            }
        }
        return -1;
    };
    CBaccEnterData.prototype.getLocationDataByPlayerId = function (playerId) {
        var index = this.getLocationIndexByPlayerId(playerId);
        return this.locationInfos[index];
    };
    return CBaccEnterData;
}(CBaseNet_1.default));
exports.CBaccEnterData = CBaccEnterData;
// 开牌协议 : 1220
var CBaccOpenPokerData = /** @class */ (function (_super) {
    __extends(CBaccOpenPokerData, _super);
    function CBaccOpenPokerData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccOpenPokerData;
}(CBaseNet_1.default));
exports.CBaccOpenPokerData = CBaccOpenPokerData;
// 发牌 :1219
var CBaccDealPokerData = /** @class */ (function (_super) {
    __extends(CBaccDealPokerData, _super);
    function CBaccDealPokerData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccDealPokerData;
}(CBaseNet_1.default));
exports.CBaccDealPokerData = CBaccDealPokerData;
// 结算 1222
var CPlayerWinInfosData = /** @class */ (function () {
    function CPlayerWinInfosData() {
    }
    return CPlayerWinInfosData;
}());
exports.CPlayerWinInfosData = CPlayerWinInfosData;
var CBaccResultData = /** @class */ (function (_super) {
    __extends(CBaccResultData, _super);
    function CBaccResultData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccResultData;
}(CBaseNet_1.default));
exports.CBaccResultData = CBaccResultData;
// 下注广播 1221
var CBaccBetMoneyData = /** @class */ (function () {
    function CBaccBetMoneyData() {
    }
    return CBaccBetMoneyData;
}());
exports.CBaccBetMoneyData = CBaccBetMoneyData;
var CBaccBetsBroadcastData = /** @class */ (function (_super) {
    __extends(CBaccBetsBroadcastData, _super);
    function CBaccBetsBroadcastData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccBetsBroadcastData;
}(CBaseNet_1.default));
exports.CBaccBetsBroadcastData = CBaccBetsBroadcastData;
// 倒计时 1203
var CBaccCountDownData = /** @class */ (function (_super) {
    __extends(CBaccCountDownData, _super);
    function CBaccCountDownData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccCountDownData;
}(CBaseNet_1.default));
exports.CBaccCountDownData = CBaccCountDownData;
// 1117 查看所有牌
var CLookPokerData = /** @class */ (function (_super) {
    __extends(CLookPokerData, _super);
    function CLookPokerData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CLookPokerData;
}(CBaseNet_1.default));
exports.CLookPokerData = CLookPokerData;
// 1111
var CBaccBetsData = /** @class */ (function (_super) {
    __extends(CBaccBetsData, _super);
    function CBaccBetsData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccBetsData;
}(CBaseNet_1.default));
exports.CBaccBetsData = CBaccBetsData;
// 1204 
var CBaccUserInOutData = /** @class */ (function (_super) {
    __extends(CBaccUserInOutData, _super);
    function CBaccUserInOutData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CBaccUserInOutData;
}(CBaseNet_1.default));
exports.CBaccUserInOutData = CBaccUserInOutData;
},{"../../../net/CBaseNet":216,"../../_commonModel/CPokerData":21}],77:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CBaijialeView = /** @class */ (function (_super) {
    __extends(CBaijialeView, _super);
    function CBaijialeView() {
        return _super.call(this) || this;
    }
    CBaijialeView.prototype.onDestroy = function () {
    };
    CBaijialeView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this.basePokersPoint = new Array(6);
        for (var i = 0; i < 6; ++i) {
            var sp = this.getPokerByIndex(i);
            this.basePokersPoint[i] = new Laya.Point(sp.x, sp.y);
        }
        this._updateView();
        this._onEvent();
    };
    CBaijialeView.prototype.onDisable = function () {
        this._offEvent();
    };
    CBaijialeView.prototype._updateView = function () {
    };
    CBaijialeView.prototype._onEvent = function () {
    };
    CBaijialeView.prototype._offEvent = function () {
    };
    CBaijialeView.prototype.getPokerBasePoint = function (index) {
        return this.basePokersPoint[index];
    };
    // 根据index, 发牌顺序, 获得对应的牌
    CBaijialeView.prototype.getPokerByIndex = function (index) {
        var obj;
        switch (index) {
            case 0:
                obj = this.desk_pokers_pPoker1;
                break;
            case 1:
                obj = this.desk_pokers_bPoker1;
                break;
            case 2:
                obj = this.desk_pokers_pPoker2;
                break;
            case 3:
                obj = this.desk_pokers_bPoker2;
                break;
            case 4:
                obj = this.desk_pokers_pPoker3;
                break;
            case 5:
                obj = this.desk_pokers_bPoker3;
                break;
        }
        return obj;
    };
    // 根据index, 获得对应区域
    CBaijialeView.prototype.getDeskSelectAreaByIndex = function (areaID) {
        var obj;
        switch (areaID) {
            case 0:
                obj = this.desk_select_bank;
                break;
            case 1:
                obj = this.desk_select_xian;
                break;
            case 2:
                obj = this.desk_select_equot;
                break;
            case 3:
                obj = this.desk_select_bankPair;
                break;
            case 4:
                obj = this.desk_select_xianPair;
                break;
        }
        return obj;
    };
    // 根据区域对象, 获得index, 
    CBaijialeView.prototype.getIndexByArea = function (area) {
        if (area == this.desk_select_bank) {
            return 0;
        }
        else if (area == this.desk_select_xian) {
            return 1;
        }
        else if (area == this.desk_select_equot) {
            return 2;
        }
        else if (area == this.desk_select_bankPair) {
            return 3;
        }
        else if (area == this.desk_select_xianPair) {
            return 4;
        }
        return -1;
    };
    CBaijialeView.prototype.getLightAreaByIndex = function (areaID) {
        var obj;
        switch (areaID) {
            case 0:
                obj = this.desk_light_bank;
                break;
            case 1:
                obj = this.desk_light_xian;
                break;
            case 2:
                obj = this.desk_light_equot;
                break;
            case 3:
                obj = this.desk_light_bankPair;
                break;
            case 4:
                obj = this.desk_light_xianPair;
                break;
        }
        return obj;
    };
    // 根据区域id, 获得区域的添加对象
    CBaijialeView.prototype.getDeskSelectAreaAddByID = function (areaID) {
        var obj;
        switch (areaID) {
            case 0:
                obj = this.desk_add_bank;
                break;
            case 1:
                obj = this.desk_add_xian;
                break;
            case 2:
                obj = this.desk_add_equot;
                break;
            case 3:
                obj = this.desk_add_bankPair;
                break;
            case 4:
                obj = this.desk_add_xianPair;
                break;
        }
        return obj;
    };
    CBaijialeView.prototype.getAreaBetsNum = function (areaID) {
        var obj;
        switch (areaID) {
            case 0:
                obj = this.desk_bets_numBank;
                break;
            case 1:
                obj = this.desk_bets_numXian;
                break;
            case 2:
                obj = this.desk_bets_numEquot;
                break;
            case 3:
                obj = this.desk_bets_numBankPair;
                break;
            case 4:
                obj = this.desk_bets_numXianPair;
                break;
        }
        return obj;
    };
    CBaijialeView.prototype.getAreaTotalBet = function (areaID) {
        var obj;
        switch (areaID) {
            case 0:
                obj = this.desk_areaBankBox;
                break;
            case 1:
                obj = this.desk_areaXianBox;
                break;
            case 2:
                obj = this.desk_areaEquotBox;
                break;
            case 3:
                obj = this.desk_areaBankPairBox;
                break;
            case 4:
                obj = this.desk_areaXianPairBox;
                break;
        }
        return obj;
    };
    CBaijialeView.prototype.getUserItem = function (playerId) {
        var cells = this.userList.cells;
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            var data = cell.dataSource;
            if (data) {
                if (data.playerId == playerId) {
                    return cell;
                }
            }
        }
        return null;
    };
    CBaijialeView.prototype.getOneUserItem = function () {
        var cells = this.userList.cells;
        return cells[0];
    };
    Object.defineProperty(CBaijialeView.prototype, "topViewBase", {
        // top_box
        get: function () { return this.getChildByName('top'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk", {
        // desk
        get: function () { return this.getChildByName('desk'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter", {
        // emitter
        get: function () { return this.desk.getChildByName('emitter'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_bg", {
        get: function () { return this.desk_emitter.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_poker", {
        get: function () { return this.desk_emitter.getChildByName('poker'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_pokerAdd", {
        get: function () { return this.desk_emitter.getChildByName('pokerAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_pokerBack", {
        get: function () { return this.desk_emitter_pokerAdd.getChildByName('pokerBack'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_pokerBlue", {
        get: function () { return this.desk_emitter_pokerAdd.getChildByName('pokerBlue'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_top", {
        get: function () { return this.desk_emitter.getChildByName('top'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_cicle1", {
        get: function () { return this.desk_emitter.getChildByName('cicle1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_line1", {
        get: function () { return this.desk_emitter.getChildByName('line1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_cicle2", {
        get: function () { return this.desk_emitter.getChildByName('cicle2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_line2", {
        get: function () { return this.desk_emitter.getChildByName('line2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info2", {
        // info2
        get: function () { return this.desk_emitter.getChildByName('info2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info2_num2", {
        get: function () { return this.desk_emitter_info2.getChildByName('num2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info2_final2", {
        get: function () { return this.desk_emitter_info2.getChildByName('final2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info1", {
        // info1
        get: function () { return this.desk_emitter.getChildByName('info1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info1_num1", {
        get: function () { return this.desk_emitter_info1.getChildByName('num1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_emitter_info1_final1", {
        get: function () { return this.desk_emitter_info1.getChildByName('final1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets", {
        // bets
        get: function () { return this.desk.getChildByName('bets'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_bgLIne", {
        get: function () { return this.desk_bets.getChildByName('bgLIne'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_bgFnt", {
        get: function () { return this.desk_bets.getChildByName('bgFnt'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_areaXianBox", {
        get: function () { return this.desk_bets.getChildByName('areaXian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_areaBankBox", {
        get: function () { return this.desk_bets.getChildByName('areaBank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_areaXianPairBox", {
        get: function () { return this.desk_bets.getChildByName('areaXianPair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_areaEquotBox", {
        get: function () { return this.desk_bets.getChildByName('areaEquot'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_areaBankPairBox", {
        get: function () { return this.desk_bets.getChildByName('areaBankPair'); },
        enumerable: true,
        configurable: true
    });
    CBaijialeView.prototype.getDeskAreaUserCount = function (item) { return item.getChildByName('userCount'); };
    CBaijialeView.prototype.getDeskAreaBetCount = function (item) { return item.getChildByName('betCount'); };
    Object.defineProperty(CBaijialeView.prototype, "desk_betInfo", {
        get: function () { return this.desk.getChildByName('betInfo'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_numXian", {
        // num1
        get: function () { return this.desk_betInfo.getChildByName('num1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_numBank", {
        // num2
        get: function () { return this.desk_betInfo.getChildByName('num2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_numXianPair", {
        // num3
        get: function () { return this.desk_betInfo.getChildByName('num3'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_numEquot", {
        // num4
        get: function () { return this.desk_betInfo.getChildByName('num4'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_bets_numBankPair", {
        // num5
        get: function () { return this.desk_betInfo.getChildByName('num5'); },
        enumerable: true,
        configurable: true
    });
    CBaijialeView.prototype.getDesk_bets_numBg1 = function (item) { return item.getChildByName('bg1'); };
    CBaijialeView.prototype.getDesk_bets_numBg2 = function (item) { return item.getChildByName('bg2'); };
    CBaijialeView.prototype.getDesk_bets_numNum = function (item) { return item.getChildByName('num'); };
    CBaijialeView.prototype.getDesk_bets_numCoin = function (item) { return item.getChildByName('coin'); };
    Object.defineProperty(CBaijialeView.prototype, "desk_select", {
        // select
        get: function () { return this.desk.getChildByName('select'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_select_xianPair", {
        get: function () { return this.desk_select.getChildByName('xianPair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_select_bank", {
        get: function () { return this.desk_select.getChildByName('bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_select_bankPair", {
        get: function () { return this.desk_select.getChildByName('bankPair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_select_equot", {
        get: function () { return this.desk_select.getChildByName('equot'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_select_xian", {
        get: function () { return this.desk_select.getChildByName('xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light", {
        get: function () { return this.desk.getChildByName('betsLight'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light_xianPair", {
        get: function () { return this.desk_light.getChildByName('xianPair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light_bank", {
        get: function () { return this.desk_light.getChildByName('bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light_bankPair", {
        get: function () { return this.desk_light.getChildByName('bankPair'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light_equot", {
        get: function () { return this.desk_light.getChildByName('equot'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_light_xian", {
        get: function () { return this.desk_light.getChildByName('xian'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_add_xianPair", {
        get: function () { return this.desk_select.getChildByName('xianPairAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_add_bank", {
        get: function () { return this.desk_select.getChildByName('bankAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_add_bankPair", {
        get: function () { return this.desk_select.getChildByName('bankPairAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_add_equot", {
        get: function () { return this.desk_select.getChildByName('equotAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_add_xian", {
        get: function () { return this.desk_select.getChildByName('xianAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_vs", {
        get: function () { return this.desk.getChildByName('vs'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers", {
        // pokers
        get: function () { return this.desk.getChildByName('pokers'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pNumber", {
        get: function () { return this.desk_pokers.getChildByName('pNumber'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bNumber", {
        get: function () { return this.desk_pokers.getChildByName('bNumber'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker1", {
        get: function () { return this.desk_pokers.getChildByName('pPoker1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker2", {
        get: function () { return this.desk_pokers.getChildByName('pPoker2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker1", {
        get: function () { return this.desk_pokers.getChildByName('bPoker1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker2", {
        get: function () { return this.desk_pokers.getChildByName('bPoker2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker3", {
        get: function () { return this.desk_pokers.getChildByName('pPoker3'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker3", {
        get: function () { return this.desk_pokers.getChildByName('bPoker3'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "userList", {
        // userList
        get: function () { return this.getChildByName('userList'); },
        enumerable: true,
        configurable: true
    });
    // ==listItem
    CBaijialeView.prototype.get_userList_my2 = function (item) { return item.getChildByName('my2'); };
    CBaijialeView.prototype.get_userList_other1 = function (item) { return item.getChildByName('other1'); };
    CBaijialeView.prototype.get_userList_my1 = function (item) { return item.getChildByName('my1'); };
    CBaijialeView.prototype.get_userList_other2 = function (item) { return item.getChildByName('other2'); };
    CBaijialeView.prototype.get_userList_otherName = function (item) { return item.getChildByName('otherName'); };
    CBaijialeView.prototype.get_userList_otherMoney = function (item) { return item.getChildByName('otherMoney'); };
    CBaijialeView.prototype.get_userList_myName = function (item) { return item.getChildByName('myName'); };
    CBaijialeView.prototype.get_userList_myMoney = function (item) { return item.getChildByName('myMoney'); };
    CBaijialeView.prototype.get_userList_empty = function (item) { return item.getChildByName('empty'); };
    CBaijialeView.prototype.get_userList_resultTips = function (item) { return item.getChildByName('result'); };
    CBaijialeView.prototype.get_userList_resultTxt = function (item) { return item.getChildByName('resultTxt'); };
    Object.defineProperty(CBaijialeView.prototype, "roomState", {
        // roomState
        get: function () { return this.getChildByName('roomState'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_bg", {
        get: function () { return this.roomState.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_countDown", {
        // countDown
        get: function () { return this.roomState.getChildByName('countDown'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_countDown_circel", {
        get: function () { return this.roomState_countDown.getChildByName('circel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_countDown_lbl", {
        get: function () { return this.roomState_countDown.getChildByName('lbl'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_gaming", {
        get: function () { return this.roomState.getChildByName('gaming'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_result", {
        get: function () { return this.roomState.getChildByName('result'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "roomState_shuffle", {
        get: function () { return this.roomState.getChildByName('shuffle'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin", {
        // betsCoin
        get: function () { return this.getChildByName('betsCoin'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_confirm", {
        get: function () { return this.betsCoin.getChildByName('confirm'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_cancel", {
        get: function () { return this.betsCoin.getChildByName('cancel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_confirmGray", {
        get: function () { return this.betsCoin.getChildByName('confirmGray'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_cancelGray", {
        get: function () { return this.betsCoin.getChildByName('cancelGray'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_coin", {
        // coin
        get: function () { return this.betsCoin.getChildByName('coin'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_coin_panel", {
        get: function () { return this.betsCoin_coin.getChildByName('panel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_coin_list", {
        // list
        get: function () { return this.betsCoin_coin_panel.getChildByName('list'); },
        enumerable: true,
        configurable: true
    });
    // ==listItem
    CBaijialeView.prototype.get_betsCoin_coin_list_selectBox = function (item) { return item.getChildByName('selectBox'); };
    CBaijialeView.prototype.get_betsCoin_coin_list_money = function (item) { return item.getChildByName('money'); };
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_coin_right", {
        get: function () { return this.betsCoin_coin.getChildByName('right'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "betsCoin_coin_left", {
        get: function () { return this.betsCoin_coin.getChildByName('left'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "road", {
        // road
        get: function () { return this.getChildByName('road'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "road_list1", {
        // list1
        get: function () { return this.road.getChildByName('list1'); },
        enumerable: true,
        configurable: true
    });
    // ==listItem
    CBaijialeView.prototype.get_road_list1_bg = function (item) { return item.getChildByName('bg'); };
    CBaijialeView.prototype.get_road_list1_he_box = function (item) { return item.getChildByName('he_box'); };
    CBaijialeView.prototype.get_road_list1_xian = function (item) { return item.getChildByName('xian'); };
    CBaijialeView.prototype.get_road_list1_banker = function (item) { return item.getChildByName('banker'); };
    Object.defineProperty(CBaijialeView.prototype, "road_list2", {
        // list2
        get: function () { return this.road.getChildByName('list2'); },
        enumerable: true,
        configurable: true
    });
    // ==listItem
    CBaijialeView.prototype.get_road_list2_bg = function (item) { return item.getChildByName('bg'); };
    CBaijialeView.prototype.get_road_list2_he_box = function (item) { return item.getChildByName('he_box'); };
    CBaijialeView.prototype.get_road_list2_xian = function (item) { return item.getChildByName('xian'); };
    CBaijialeView.prototype.get_road_list2_banker = function (item) { return item.getChildByName('banker'); };
    Object.defineProperty(CBaijialeView.prototype, "bottomView", {
        // bottom
        get: function () { return this.getChildByName('bottom'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "bgImg", {
        get: function () { return this.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "bgTestImg", {
        get: function () { return this.getChildByName('bg2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pNumberView", {
        // View Get
        get: function () { return this.m_desk_pokers_pNumberView; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bNumberView", {
        get: function () { return this.m_desk_pokers_bNumberView; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker1View", {
        get: function () { return this.m_desk_pokers_pPoker1View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker2View", {
        get: function () { return this.m_desk_pokers_pPoker2View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker1View", {
        get: function () { return this.m_desk_pokers_bPoker1View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker2View", {
        get: function () { return this.m_desk_pokers_bPoker2View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_pPoker3View", {
        get: function () { return this.m_desk_pokers_pPoker3View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "desk_pokers_bPoker3View", {
        get: function () { return this.m_desk_pokers_bPoker3View; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "md5Tips", {
        get: function () { return this.getChildByName('md5Tips'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeView.prototype, "topView", {
        get: function () { return this.m_topView; },
        set: function (v) { this.m_topView = v; },
        enumerable: true,
        configurable: true
    });
    CBaijialeView.AreaCount = 5;
    CBaijialeView.PokerCount = 6;
    return CBaijialeView;
}(layaMaxUI_1.ui.gamelist.bjl.BaijialeSceneUI));
exports.default = CBaijialeView;
},{"../../../../ui/layaMaxUI":271}],78:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CPokerView_1 = require("../../../../common/CPokerView");
// import CBaijialeMd5TipsComponent from "./CBaijialeMd5TipsComponent";
var GM_1 = require("../../../../../gm/GM");
var CMD5CheckView_1 = require("../../../_commonView/md5/CMD5CheckView");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
// 台面上6个牌管理组件
var CBaijiale6PokerComponent = /** @class */ (function (_super) {
    __extends(CBaijiale6PokerComponent, _super);
    function CBaijiale6PokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijiale6PokerComponent.prototype.onDestroy = function () {
        for (var i = 0; i < this.m_pokerViewList.length; ++i) {
            var pokerView = this.m_pokerViewList[i];
            if (pokerView && pokerView.view) {
                // pokerView.tipsImg1.off(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler);
                // pokerView.tipsImg2.off(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler);
                pokerView.view.off(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler);
            }
        }
        this.m_pokerViewList = null;
        // this.view.off(Laya.Event.MOUSE_UP, this, this._onMouseUp_uiHandler);
        _super.prototype.onDestroy.call(this);
    };
    CBaijiale6PokerComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CBaijiale6PokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerViewList = new Array(6);
        for (var i = 0; i < 6; ++i) {
            var view = this.view.getPokerByIndex(i);
            var pokerView = new CPokerView_1.default(view);
            // pokerView.tipsImg1.on(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler, [i, pokerView]);
            // pokerView.tipsImg2.on(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler, [i, pokerView]);
            pokerView.view.on(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler, [i, pokerView]);
            this.m_pokerViewList.push(pokerView);
        }
        // this.view.on(Laya.Event.MOUSE_UP, this, this._onMouseUp_uiHandler);
        return true;
    };
    CBaijiale6PokerComponent.prototype._onTipsDown_uiHandler = function (idx, pokerView, e) {
        var poker = GM_1.GM.baccData.pokerList[idx];
        // this.m_pController.getComponent(CBaijialeMd5TipsComponent).process(idx, poker, pokerView, true);
        var openSubViewComponent = this.getComponent(COpenSubViewComponent_1.default);
        openSubViewComponent.autoAddToParent = false;
        openSubViewComponent.process(CMD5CheckView_1.default, CMD5CheckView_1.default.SIGN, 0);
        var md5View = openSubViewComponent.getView(0).view;
        md5View.model.pokerData = poker.data;
        openSubViewComponent.showView(Laya.stage, 0);
        GM_1.GM.playButtonSound();
    };
    CBaijiale6PokerComponent.prototype._onMouseUp_uiHandler = function (e) {
        // this.m_pController.getComponent(CBaijialeMd5TipsComponent).process(0, null, null, false);        
    };
    return CBaijiale6PokerComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijiale6PokerComponent;
},{"../../../../../gm/GM":221,"../../../../common/CPokerView":9,"../../../../common/component/COpenSubViewComponent":16,"../../../_commonView/md5/CMD5CheckView":38,"./CBaijialeComponent":83}],79:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeBetsCoinBreathComponent = /** @class */ (function (_super) {
    __extends(CBaijialeBetsCoinBreathComponent, _super);
    function CBaijialeBetsCoinBreathComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeBetsCoinBreathComponent.prototype.onDestroy = function () {
        this.m_bStop = true;
        if (this.m_pView) {
            Laya.Tween.clearAll(this.m_pView);
        }
        this.m_pView = null;
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeBetsCoinBreathComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeBetsCoinBreathComponent.prototype.process = function (coin) {
        _super.prototype.process.call(this);
        this.changeView(coin);
    };
    CBaijialeBetsCoinBreathComponent.prototype.changeView = function (v) {
        if (this.m_pView) {
            Laya.Tween.clearAll(this.m_pView);
            this.m_pView.alpha = 1;
            this.m_pView = null;
        }
        if (!v) {
            return;
        }
        this.m_pView = v;
        v.alpha = 0;
        this._onUp();
    };
    CBaijialeBetsCoinBreathComponent.prototype._onUp = function () {
        if (!this.m_pView) {
            return;
        }
        if (this.m_bStop) {
            return;
        }
        Laya.Tween.to(this.m_pView, { alpha: 1 }, 700, Laya.Ease.linearIn, Laya.Handler.create(this, this._onDown));
    };
    CBaijialeBetsCoinBreathComponent.prototype._onDown = function () {
        if (!this.m_pView) {
            return;
        }
        if (this.m_bStop) {
            return;
        }
        Laya.Tween.to(this.m_pView, { alpha: 0 }, 700, Laya.Ease.linearIn, Laya.Handler.create(this, this._onUp));
    };
    CBaijialeBetsCoinBreathComponent.prototype.reset = function () {
    };
    return CBaijialeBetsCoinBreathComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeBetsCoinBreathComponent;
},{"./CBaijialeComponent":83}],80:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CRollListType1Component_1 = require("../../../../common/component/CRollListType1Component");
var TweenUtil_1 = require("../../../../../hbcore/util/TweenUtil");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CBaijialeModel_1 = require("../CBaijialeModel");
var CBaijialeView_1 = require("../CBaijialeView");
var CBaijialeNetComponent_1 = require("./CBaijialeNetComponent");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaijialeLightWinAreaComponent_1 = require("./CBaijialeLightWinAreaComponent");
var CBaijialeLightMyBetAreaComponent_1 = require("./CBaijialeLightMyBetAreaComponent");
var CBaccConf_1 = require("../../CBaccConf");
var CoinView_1 = require("../../../../coin/CoinView");
var CBaijialeBetsCoinBreathComponent_1 = require("./CBaijialeBetsCoinBreathComponent");
var commonData_1 = require("../../../_commonModel/commonData");
// 下注
// 选币. 投币.下注数量.其他玩家的下注数据
var CBaijialeBetsComponent = /** @class */ (function (_super) {
    __extends(CBaijialeBetsComponent, _super);
    function CBaijialeBetsComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_lastSelectCoinIndex = -1;
        _this.COIN_ON_DESK_SCALC = 0.5;
        return _this;
    }
    CBaijialeBetsComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        ApiUtil_1.ApiUtil.recoverHandler(this.view.betsCoin_coin_list.renderHandler);
        this.view.betsCoin_coin_list.renderHandler = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.view.betsCoin_coin_list.selectHandler);
        this.view.betsCoin_coin_list.selectHandler = null;
        this.view.desk_select.off(Laya.Event.MOUSE_DOWN, this, this._onClickSelectBox_uiHandler);
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var selectObj = this.view.getDeskSelectAreaByIndex(i);
            selectObj.off(Laya.Event.MOUSE_DOWN, this, this._onClickSelectBox_uiHandler);
        }
        this._removeAllBetsCoin(false);
        this.view.betsCoin_confirm.off(Laya.Event.MOUSE_UP, this, this._onBetsConfirm);
        this.view.betsCoin_cancel.off(Laya.Event.MOUSE_UP, this, this._onBetsCancel);
    };
    CBaijialeBetsComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        var rollComponent = new CRollListType1Component_1.default(this.view, this.view.betsCoin_coin_panel, this.view.betsCoin_coin_list, false, 3, this.view.betsCoin_coin_left, this.view.betsCoin_coin_right);
        rollComponent.leftRightClickHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onClickLeftRightPage);
        this.addComponent(rollComponent);
        this.addComponent(new CBaijialeLightWinAreaComponent_1.default(this.m_pController));
        this.addComponent(new CBaijialeLightMyBetAreaComponent_1.default(this.m_pController));
        this.addComponent(new CBaijialeBetsCoinBreathComponent_1.default(this.m_pController));
    };
    CBaijialeBetsComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_tempBetsCoinList = [];
        this.m_tempAreaBetedObj = { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0 };
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var selectObj = this.view.getDeskSelectAreaByIndex(i);
            selectObj.on(Laya.Event.MOUSE_DOWN, this, this._onClickSelectBox_uiHandler);
        }
        // 币
        var coinList = GM_1.GM.coinMap.getCoinListByStage(GM_1.GM.baccData.enterData.stageId);
        this.view.betsCoin_coin_list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        this.view.betsCoin_coin_list.selectHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onSelectCoinList_uiHandler);
        if (this.view.betsCoin_coin_list.repeatX != coinList.length) {
            this.view.betsCoin_coin_list.repeatX = coinList.length;
        }
        this.view.betsCoin_coin_list.array = coinList;
        this.view.betsCoin_coin_list.selectedIndex = 0;
        // 确定
        this._updateBetsControlBtns();
        this.view.betsCoin_confirm.on(Laya.Event.MOUSE_UP, this, this._onBetsConfirm);
        this.view.betsCoin_cancel.on(Laya.Event.MOUSE_UP, this, this._onBetsCancel);
        return true;
    };
    // 点筹码的left right
    CBaijialeBetsComponent.prototype._onClickLeftRightPage = function () {
        GM_1.GM.playButtonSound();
    };
    CBaijialeBetsComponent.prototype._onSelectCoinList_uiHandler = function (index) {
        if (this.m_lastSelectCoinIndex == -1) {
            this.m_lastSelectCoinIndex = index;
        }
        else {
            if (this.m_lastSelectCoinIndex != index) {
                this.m_lastSelectCoinIndex = index;
                GM_1.GM.playButtonSound();
            }
        }
        this._processCoinBreathAnimation();
    };
    CBaijialeBetsComponent.prototype._processCoinBreathAnimation = function () {
        var selectIndex = this.m_lastSelectCoinIndex;
        if (selectIndex < 0) {
            selectIndex = 0;
        }
        var iconCell = this.view.betsCoin_coin_list.getCell(selectIndex);
        if (iconCell) {
            var selectBox = this.view.get_betsCoin_coin_list_selectBox(iconCell);
            if (selectBox) {
                var coinBreathComponent = this.getComponent(CBaijialeBetsCoinBreathComponent_1.default);
                if (coinBreathComponent) {
                    coinBreathComponent.process(selectBox);
                }
            }
        }
    };
    CBaijialeBetsComponent.prototype._onRenderItem = function (comp, idx) {
        if (!comp.dataSource) {
            comp.visible = false;
            return;
        }
        comp.visible = true;
        var coinData = comp.dataSource;
        var clip = this.view.get_betsCoin_coin_list_money(comp);
        CoinView_1.CoinView.formatCoin(clip);
        clip.index = coinData.index;
    };
    // select bets box, 点击投注
    CBaijialeBetsComponent.prototype._onClickSelectBox_uiHandler = function (e) {
        if (!this.m_isOpenBets) {
            return;
        }
        if (this.isBeted) {
            return;
        }
        e.stopPropagation();
        var selectImage = e.currentTarget;
        var areaIndex = this.view.getIndexByArea(selectImage);
        var iconSelectIndex = this.view.betsCoin_coin_list.selectedIndex;
        var iconCell = this.view.betsCoin_coin_list.getCell(iconSelectIndex);
        var coinData = iconCell.dataSource;
        var betsCoinData = new commonData_1.CBetsCoinData(areaIndex, coinData);
        var BET_MAX = GM_1.GM.baccData.enterData.maxBet;
        var betedCount = this.getTempBetsCount();
        var allBetCount = betedCount + betsCoinData.coinData.value;
        allBetCount = ApiUtil_1.ApiUtil.formatNumber(allBetCount);
        var myBalance = 0;
        var locationInfo = GM_1.GM.baccData.enterData.getLocationDataByPlayerId(GM_1.GM.gameData.curStageInfo.playerId);
        if (locationInfo) {
            myBalance = locationInfo.balance;
        }
        var MAX_COUNT = 0; // Math.min(BET_MAX, myBalance);
        var langMax1;
        var langMax2;
        if (BET_MAX > myBalance) {
            MAX_COUNT = myBalance;
            langMax1 = 'bets_not_enough_money';
            langMax2 = 'bets_not_enough_money2';
        }
        else {
            MAX_COUNT = BET_MAX;
            langMax1 = 'bets_max_limit';
            langMax2 = 'bets_max_limit_2';
        }
        if (allBetCount > MAX_COUNT) {
            // 重新下注新的币
            var wantBetCount = MAX_COUNT - betedCount;
            wantBetCount = ApiUtil_1.ApiUtil.formatNumber(wantBetCount);
            var coinList = GM_1.GM.coinMap.getCoinListByStage(GM_1.GM.baccData.enterData.stageId);
            var valueList = GM_1.GM.coinMap.transCoinListToValueList(coinList);
            var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(wantBetCount, valueList, 1);
            if (!coinIndexLlist || coinIndexLlist.length == 0) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(langMax1), CMessageBox_1.default.TYPE_FLY, 0, null, true);
                return; //拆分不了
            }
            // 可以下注
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(langMax2), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            for (var _i = 0, coinIndexLlist_1 = coinIndexLlist; _i < coinIndexLlist_1.length; _i++) {
                var idx = coinIndexLlist_1[_i];
                var coinData_1 = coinList[idx]; // GM.coinMap.getCoinByIndex(idx);
                betsCoinData = new commonData_1.CBetsCoinData(areaIndex, coinData_1);
                this.m_tempBetsCoinList.push(betsCoinData);
                this._processBetsCoin(betsCoinData, true, GM_1.GM.gameData.curStageInfo.playerId);
            }
        }
        else {
            this.m_tempBetsCoinList.push(betsCoinData);
            this._processBetsCoin(betsCoinData, true, GM_1.GM.gameData.curStageInfo.playerId);
        }
        // 播放下注闪光, this.m_tempBetsCoinList 在后面会清空, 
        this.getComponent(CBaijialeLightMyBetAreaComponent_1.default).process(areaIndex);
        // 更新总下注
        // 计算已下注
        var betsObject = this._buildBetAreaObjByTempBetList();
        // 生成列表
        var totalList = new Array();
        var index = 0;
        for (var key in betsObject) {
            var betData = { id: Number(key) + 1, totalBet: betsObject[key] };
            betData.totalBet = ApiUtil_1.ApiUtil.formatNumber(betData.totalBet);
            totalList[index] = betData;
            ++index;
        }
        this._updateBetsCount(totalList);
    };
    CBaijialeBetsComponent.prototype._processBetsCoin = function (betsCoinData, isSelf, playerId) {
        var _this = this;
        if (this.isBeted && isSelf) {
            return;
        }
        var img = CoinView_1.CoinView.buildCoin();
        img.isSelf = isSelf;
        img.index = betsCoinData.coinData.index;
        img.owner = playerId;
        // 金币添加到的桌台
        var toAreaObj = this.view.getDeskSelectAreaByIndex(betsCoinData.areaIndex);
        // 选择的金币的对象
        var iconSelectIndex = this.view.betsCoin_coin_list.selectedIndex;
        var fromObj = this.view.getUserItem(playerId); //  this.view.betsCoin_coin_list.getCell(iconSelectIndex);
        if (!fromObj) {
            fromObj = this.view.getOneUserItem();
        }
        var fromposGlobal = ApiUtil_1.ApiUtil.getGlobalPos(fromObj);
        var icon = this.view.get_userList_other1(fromObj);
        fromposGlobal.x += Math.abs(icon.width) * 0.5;
        fromposGlobal.y += Math.abs(icon.height) * 0.5;
        TweenUtil_1.TweenUtil.shakeObject(fromObj, false, false, 1, 2, true, true, 0.05);
        // 金币添加到的桌台的实际对象
        var addToSp = this.m_pController.view.getDeskSelectAreaAddByID(betsCoinData.areaIndex);
        addToSp.addChild(img);
        var pos = ApiUtil_1.ApiUtil.globalToLocal(img, fromposGlobal);
        img.x = pos.x;
        img.y = pos.y;
        img.scaleX = img.scaleY = 0.7;
        var toX = Math.random() * 80 - 40;
        var toY = Math.random() * 20 - 10;
        var toScale = img.baseScale;
        // 金币从开始位置飞到台上
        Laya.Tween.to(img, { x: toX, y: toY, scaleX: toScale, scaleY: toScale }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            var isH;
            var isShake;
            // 到台上之后随机影响已有的金币的位置, 震一震
            for (var i = 0; i < addToSp.numChildren; ++i) {
                var coinOnDesk = addToSp.getChildAt(i);
                if (coinOnDesk.isOnDesk) {
                    isShake = Math.random() * 10 > 8;
                    isH = Math.random() * 10 > 5;
                    if (isShake) {
                        TweenUtil_1.TweenUtil.shakeObject(coinOnDesk, !isH, isH, 1, 1, false);
                    }
                }
            }
            _this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_COIN);
            img.isOnDesk = true;
        }));
        this._updateBetsControlBtns();
    };
    CBaijialeBetsComponent.prototype._onBetsConfirm = function (e) {
        GM_1.GM.playButtonSound();
        var betedCount = this.getTempBetsCount();
        if (betedCount > GM_1.GM.baccData.enterData.maxBet) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_max_limit'), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            return;
        }
        else if (betedCount < GM_1.GM.baccData.enterData.minBet) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_min_limit'), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            return;
        }
        if (this.m_pController.netState.isNetStateBusy(CBaijialeHallModel_1.BaccNetConf.Bets)) {
            return;
        }
        this.m_pController.netState.setNetStateBusy(CBaijialeHallModel_1.BaccNetConf.Bets);
        e.stopPropagation();
        this._updateBetsControlBtns();
        // 总列表
        var betsObject = this._buildBetAreaObjByTempBetList();
        // 生成列表
        var totalList = [];
        var index = 0;
        for (var key in betsObject) {
            var betData = { id: Number(key) + 1, money: betsObject[key] };
            betData.money = ApiUtil_1.ApiUtil.formatNumber(betData.money);
            totalList[index] = betData;
            ++index;
        }
        // 单个的列表
        var betsList = [];
        for (var i = 0; i < this.m_tempBetsCoinList.length; ++i) {
            var betsData = this.m_tempBetsCoinList[i];
            betsList[i] = { id: betsData.areaIndex + 1, money: betsData.coinData.value };
        }
        this.m_pController.netComponent.on(CBaijialeNetComponent_1.CBaijialeNetComponent.EVENT_BET_RESPONSE, this, this._onBetsResponse);
        GM_1.GM.instance.network.sfsGame.send(CBaijialeHallModel_1.BaccNetConf.Bets, { betList: betsList, totalBetList: totalList }, true);
        this.isBeted = true;
    };
    CBaijialeBetsComponent.prototype._buildBetAreaObjByTempBetList = function () {
        var betsObject = new Object();
        // 将同一下注区的金币加起来
        for (var _i = 0, _a = this.m_tempBetsCoinList; _i < _a.length; _i++) {
            var betsData = _a[_i];
            if (!betsObject.hasOwnProperty(betsData.areaIndex.toString())) {
                betsObject[betsData.areaIndex] = 0;
            }
            betsObject[betsData.areaIndex] += betsData.coinData.value;
        }
        return betsObject;
    };
    CBaijialeBetsComponent.prototype._onBetsResponse = function (data) {
        this.m_pController.netComponent.off(CBaijialeNetComponent_1.CBaijialeNetComponent.EVENT_BET_RESPONSE, this, this._onBetsResponse);
        this.m_pController.netState.setNetStateIdle(CBaijialeHallModel_1.BaccNetConf.Bets);
        if (data.errorCode != 0) {
            CMessageBox_1.default.instance.showNetError(data.errorCode);
            this.isBeted = false;
            this._updateBetsControlBtns();
            return;
        }
        this._clearTempBetsCoin();
        this._updateBetsControlBtns();
        this.isBeted = true;
        CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_success'), -1, 0, '#00aa00', true, this.m_pController.view);
    };
    // 取消下注，但未提交的筹码
    CBaijialeBetsComponent.prototype.cancelTempBetsUnSubmit = function () {
        if (!this.isBeted && this.m_tempBetsCoinList && this.m_tempBetsCoinList.length > 0) {
            this._onBetsCancel(null);
        }
    };
    CBaijialeBetsComponent.prototype._onBetsCancel = function (e) {
        e && e.stopPropagation();
        GM_1.GM.playButtonSound();
        this._removeAllBetsCoin(true);
        this._updateBetsControlBtns();
        this._updateBetsCount(null);
    };
    CBaijialeBetsComponent.prototype._updateBetsControlBtns = function () {
        var isBeted = this.m_tempBetsCoinList.length > 0;
        this.view.betsCoin_cancel.visible = this.view.betsCoin_confirm.visible = isBeted;
        this.view.betsCoin_cancelGray.visible = this.view.betsCoin_confirmGray.visible = !isBeted;
    };
    CBaijialeBetsComponent.prototype.openBets = function () {
        this.m_isOpenBets = true;
    };
    CBaijialeBetsComponent.prototype.closeBets = function () {
        this.m_isOpenBets = false;
        this.cancelTempBetsUnSubmit();
    };
    Object.defineProperty(CBaijialeBetsComponent.prototype, "isOpenBets", {
        get: function () {
            return this.m_isOpenBets;
        },
        enumerable: true,
        configurable: true
    });
    CBaijialeBetsComponent.prototype._removeAllBetsCoin = function (onlySlef) {
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; i++) {
            var sp = this.m_pController.view.getDeskSelectAreaAddByID(i);
            for (var index = 0; index < sp.numChildren; ++index) {
                var coin_1 = sp.getChildAt(index);
                if (!onlySlef || coin_1.isSelf) {
                    sp.removeChildAt(index);
                    CoinView_1.CoinView.recoverCoin(coin_1);
                    index--;
                }
            }
        }
        this._clearTempBetsCoin();
        var isClearAll = !onlySlef;
        if (isClearAll) {
            this._clearTempAreaBet();
        }
    };
    CBaijialeBetsComponent.prototype._clearTempBetsCoin = function () {
        this.m_tempBetsCoinList = [];
    };
    CBaijialeBetsComponent.prototype._clearTempAreaBet = function () {
        for (var key in this.m_tempAreaBetedObj) {
            this.m_tempAreaBetedObj[key] = 0;
        }
    };
    // 进入房间时, 初始化已下注的数据
    // betAreaInfos : 下注区总下信息
    // locationInfos : 各个玩家信息， 包括下注信息
    CBaijialeBetsComponent.prototype.updateBetsCoinByEnterGame = function (totalBetAreaInfos, locationInfos) {
        // 从位置信息里，拆分玩家各个区的下注信息
        var myBetAreaInfos = new Array();
        var myLocationData;
        // 区域下注人数
        if (locationInfos && locationInfos.length > 0) {
            for (var _i = 0, locationInfos_1 = locationInfos; _i < locationInfos_1.length; _i++) {
                var locaInfo = locationInfos_1[_i];
                var hasBetData = (locaInfo && locaInfo.playerBetInfos && locaInfo.playerBetInfos.length > 0);
                if (!hasBetData) {
                    continue;
                }
                for (var _a = 0, _b = locaInfo.playerBetInfos; _a < _b.length; _a++) {
                    var betInfo = _b[_a];
                    // 拆分币
                    var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(betInfo.betCoin, GM_1.GM.coinMap.valueList, 1);
                    this.addBetsCoinByEnterGame(betInfo, locaInfo.playerId);
                }
                // 统计人数
                this.counterAreaUserCount(locaInfo.playerBetInfos, this.m_tempAreaBetedObj);
                if (locaInfo.playerId == GM_1.GM.gameData.curStageInfo.playerId) {
                    myLocationData = locaInfo;
                }
            }
        }
        // 自己的下注
        if (myLocationData) {
            myBetAreaInfos = CBaijialeModel_1.betInfo2AreaInfo(myLocationData.playerBetInfos);
        }
        this._updateBetsCount(myBetAreaInfos);
        // 总下注
        this._updateTotalBetsCount(totalBetAreaInfos);
    };
    // 添加金币, 中途进入游戏
    CBaijialeBetsComponent.prototype.addBetsCoinByEnterGame = function (betInfo, playerId) {
        var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(betInfo.betCoin, GM_1.GM.coinMap.valueList, 1);
        for (var _i = 0, coinIndexLlist_2 = coinIndexLlist; _i < coinIndexLlist_2.length; _i++) {
            var idx = coinIndexLlist_2[_i];
            var coinData = GM_1.GM.coinMap.getCoinByIndex(idx);
            var betsCoinData = new commonData_1.CBetsCoinData(betInfo.id - 1, coinData);
            this._processBetsCoin(betsCoinData, false, playerId); // 这里全部当非自己的下注处理
        }
    };
    CBaijialeBetsComponent.prototype.counterAreaUserCount = function (playerBetInfos, areaBetedObj) {
        var areaFlag = new Object(); // 记录玩家是否在某个区域投注
        for (var _i = 0, playerBetInfos_1 = playerBetInfos; _i < playerBetInfos_1.length; _i++) {
            var betInfo = playerBetInfos_1[_i];
            var hasAreaCounted = areaFlag.hasOwnProperty(betInfo.id.toString());
            if (betInfo.betCoin > 0 && !hasAreaCounted) {
                areaBetedObj[betInfo.id]++;
                areaFlag[betInfo.id] = true;
            }
        }
        return areaBetedObj;
    };
    CBaijialeBetsComponent.prototype.addBetsCoinByBroadcast = function (data) {
        // 区域下注人数
        this.counterAreaUserCount(data.playerBetInfos, this.m_tempAreaBetedObj);
        if (data.playerId == GM_1.GM.gameData.curStageInfo.playerId) {
            // 是自己, 不用处理
            var betAreaInfoList = CBaijialeModel_1.betInfo2AreaInfo(data.playerBetInfos);
            this._updateBetsCount(betAreaInfoList);
            this._updateTotalBetsCount(data.betAreaInfos);
        }
        else {
            if (data.BetList && data.BetList.length > 0) {
                for (var _i = 0, _a = data.BetList; _i < _a.length; _i++) {
                    var betinfo = _a[_i];
                    var coinData = GM_1.GM.coinMap.getCoinByValue(betinfo.money);
                    if (!coinData) {
                        continue; // 改了币值 之后，服务器没更新, 会报错
                    }
                    var betsCoinData = new commonData_1.CBetsCoinData(betinfo.id - 1, coinData);
                    this._processBetsCoin(betsCoinData, false, data.playerId);
                }
                var betAreaInfoList = CBaijialeModel_1.betInfo2AreaInfo(data.playerBetInfos);
                this._updateTotalBetsCount(data.betAreaInfos);
                // this._updateBetsCount(betAreaInfoList);   
            }
        }
    };
    CBaijialeBetsComponent.prototype.reset = function () {
        this._removeAllBetsCoin(false);
        this.isBeted = false;
        this.m_pController.netState.setNetStateIdle(CBaijialeHallModel_1.BaccNetConf.Bets);
        this._hideWinFlag();
        this._updateBetsCount(null);
        this._updateTotalBetsCount(null);
    };
    // 赢区, 也是点选区, 不可以设visible = false;
    CBaijialeBetsComponent.prototype._hideWinFlag = function () {
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var sp = this.view.getDeskSelectAreaByIndex(i);
            sp.alpha = 0.01;
        }
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var sp = this.view.getLightAreaByIndex(i);
            sp.visible = false;
        }
    };
    CBaijialeBetsComponent.prototype._updateBetsCount = function (betsList) {
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var numBox = this.view.getAreaBetsNum(i);
            numBox.visible = false;
            this.view.getDesk_bets_numBg1(numBox).visible = false; // 两个背景。隐藏掉一个
        }
        if (betsList) {
            for (var _i = 0, betsList_1 = betsList; _i < betsList_1.length; _i++) {
                var data = betsList_1[_i];
                var betsCount = data.totalBet;
                if (betsCount > 0) {
                    var numBox = this.view.getAreaBetsNum(data.id - 1);
                    numBox.visible = true;
                    this.view.getDesk_bets_numNum(numBox).text = ApiUtil_1.ApiUtil.formatNumber(betsCount).toString();
                    this.view.getDesk_bets_numCoin(numBox).index = GM_1.GM.coinMap.getCoinType().type;
                }
            }
        }
    };
    // 总人数和总下注
    CBaijialeBetsComponent.prototype._updateTotalBetsCount = function (betsList) {
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; ++i) {
            var betAreaBox = this.view.getAreaTotalBet(i);
            betAreaBox.visible = false;
        }
        if (betsList) {
            for (var _i = 0, betsList_2 = betsList; _i < betsList_2.length; _i++) {
                var data = betsList_2[_i];
                var betsCount = data.totalBet;
                if (betsCount > 0) {
                    var betAreaBox = this.view.getAreaTotalBet(data.id - 1);
                    betAreaBox.visible = true;
                    this.view.getDeskAreaBetCount(betAreaBox).text = ApiUtil_1.ApiUtil.formatNumber(betsCount).toString();
                }
            }
        }
        else {
            for (var i = 0; i < CBaijialeView_1.default.AreaCount; i++) {
                var betAreaBox = this.view.getAreaTotalBet(i);
                betAreaBox.visible = true;
                this.view.getDeskAreaBetCount(betAreaBox).text = '0';
            }
        }
        // 还差一个人数
        if (this.m_tempAreaBetedObj) {
            for (var key in this.m_tempAreaBetedObj) {
                var areaID = Number(key);
                var count = this.m_tempAreaBetedObj[key];
                var betAreaBox = this.view.getAreaTotalBet(areaID - 1);
                betAreaBox.visible = true;
                this.view.getDeskAreaUserCount(betAreaBox).text = ApiUtil_1.ApiUtil.formatNumber(count).toString();
            }
        }
    };
    CBaijialeBetsComponent.prototype.getTempBetsCount = function () {
        var count = 0;
        for (var _i = 0, _a = this.m_tempBetsCoinList; _i < _a.length; _i++) {
            var coindata = _a[_i];
            count += coindata.coinData.value;
        }
        count = ApiUtil_1.ApiUtil.formatNumber(count);
        return count;
    };
    CBaijialeBetsComponent.prototype.getBetsCoinListByUser = function (playerId) {
        var ret = new Array();
        for (var i = 0; i < CBaijialeView_1.default.AreaCount; i++) {
            var sp = this.m_pController.view.getDeskSelectAreaAddByID(i);
            for (var index = 0; index < sp.numChildren; ++index) {
                var coin_2 = sp.getChildAt(index);
                if (coin_2.owner == playerId) {
                    ret.push(coin_2);
                }
            }
        }
        return ret;
    };
    return CBaijialeBetsComponent;
}(CBaijialeComponent_1.default));
exports.CBaijialeBetsComponent = CBaijialeBetsComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/util/ApiUtil":266,"../../../../../hbcore/util/TweenUtil":270,"../../../../coin/CoinView":3,"../../../../common/CMessageBox":8,"../../../../common/component/CRollListType1Component":17,"../../../_commonModel/commonData":22,"../../CBaccConf":66,"../../hall/CBaijialeHallModel":69,"../CBaijialeModel":76,"../CBaijialeView":77,"./CBaijialeBetsCoinBreathComponent":79,"./CBaijialeComponent":83,"./CBaijialeLightMyBetAreaComponent":88,"./CBaijialeLightWinAreaComponent":89,"./CBaijialeNetComponent":92}],81:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeBgComponent = /** @class */ (function (_super) {
    __extends(CBaijialeBgComponent, _super);
    function CBaijialeBgComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = true;
        return _this;
    }
    CBaijialeBgComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeBgComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeBgComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var isTest = GM_1.GM.baccData.enterData.stageId == 0;
        this.view.bgImg.visible = !isTest;
        this.view.bgTestImg.visible = isTest;
    };
    CBaijialeBgComponent.prototype.reset = function () {
    };
    return CBaijialeBgComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeBgComponent;
},{"../../../../../gm/GM":221,"./CBaijialeComponent":83}],82:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaijialeBottomComponent = /** @class */ (function (_super) {
    __extends(CBaijialeBottomComponent, _super);
    function CBaijialeBottomComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeBottomComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeBottomComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeBottomComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var entryData = GM_1.GM.baccData.enterData;
        // let roundCount:number = 0;
        // let  histroyData = GM.baccData.roadHistroyList;
        // if (histroyData && histroyData.length > 0) {
        //     roundCount = histroyData.length;
        // }
        var stageInfo;
        var roomNum;
        for (var _i = 0, _a = GM_1.GM.gameData.curStageInfo.stageInfos; _i < _a.length; _i++) {
            stageInfo = _a[_i];
            if (stageInfo.stageId == GM_1.GM.baccData.enterData.stageId) {
                roomNum = stageInfo.name;
                break;
            }
        }
        var bottomView = this.view.bottomView;
        bottomView.model.roomName = Lang_1.default.Get(entryData.gameCode);
        bottomView.model.roundNum = roomNum; // Lang.Get('room_1'); // entryData.roundNum.toString();
        bottomView.model.roundCount = GM_1.GM.baccData.roundNum; // entryData.roundNum; // // ApiUtil.addZeroToFront(roundCount.toString(), 6);
        bottomView.model.limit = entryData.minBet + ' - ' + entryData.maxBet;
    };
    CBaijialeBottomComponent.prototype.reset = function () {
    };
    return CBaijialeBottomComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeBottomComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"./CBaijialeComponent":83}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CComponent_1 = require("../../../../common/component/CComponent");
var CBaijialeComponent = /** @class */ (function (_super) {
    __extends(CBaijialeComponent, _super);
    function CBaijialeComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    Object.defineProperty(CBaijialeComponent.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeComponent.prototype, "sfsGame", {
        get: function () {
            return GM_1.GM.instance.network.sfsGame;
        },
        enumerable: true,
        configurable: true
    });
    return CBaijialeComponent;
}(CComponent_1.CComponent));
exports.default = CBaijialeComponent;
},{"../../../../../gm/GM":221,"../../../../common/component/CComponent":15}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPokerView_1 = require("../../../../common/CPokerView");
var CBaccConf_1 = require("../../CBaccConf");
// 播放发牌动画
var CBaijialeDealAnimationComponent = /** @class */ (function (_super) {
    __extends(CBaijialeDealAnimationComponent, _super);
    function CBaijialeDealAnimationComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeDealAnimationComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeDealAnimationComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeDealAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this._tempPoint = new Laya.Point();
        this.m_pokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeDealAnimationComponent.prototype.process = function (data, callback, isBlue, isFroceHide) {
        if (isFroceHide === void 0) { isFroceHide = false; }
        this.m_callback = callback;
        this._processA(data, isBlue, isFroceHide);
    };
    CBaijialeDealAnimationComponent.prototype._processA = function (data, isBlue, isFroceHide) {
        var _this = this;
        var portStartObj = this.m_pController.view.desk_emitter_poker;
        var parentObj = this.view.desk_emitter_pokerAdd;
        var poker;
        if (isBlue) {
            poker = this.view.desk_emitter_pokerBlue;
        }
        else {
            poker = this.view.desk_emitter_pokerBack;
        }
        poker.x = 0;
        poker.y = 0;
        poker.scaleX = poker.scaleY = 0.45;
        poker.visible = true;
        var p = this._tempPoint;
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_DEAL_POKER);
        Laya.Tween.to(poker, { y: 100, scaleX: 0.7, scaleY: 0.7 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            Laya.timer.once(100, _this, function () {
                if (isBlue) {
                    _this._processBlue(poker);
                    // 蓝牌这时还不消失  
                }
                else {
                    _this._processPoker(poker, data, isFroceHide);
                    poker.visible = false;
                    poker.x = poker.y = 0;
                }
            });
        }));
    };
    CBaijialeDealAnimationComponent.prototype._processPoker = function (pokerBack, data, isFroceHide) {
        var _this = this;
        var pokerObj = this.m_pController.view.getPokerByIndex(data.index);
        // 发牌过程
        this.m_pokerView.view = pokerObj;
        var isLast2Poker = data.index == 4 || data.index == 5;
        this._showViewMessage(data.pokerData, true, false, isLast2Poker);
        var fromObj = pokerBack;
        var p = this._tempPoint;
        var fromPoint = ApiUtil_1.ApiUtil.obj1ToObj2Pos(fromObj, pokerObj);
        pokerObj.x = fromPoint.x;
        pokerObj.y = fromPoint.y;
        // pokerObj.scaleX = pokerObj.scaleY = 6/7;
        pokerObj.visible = true;
        var playTime = isLast2Poker ? 400 : 300;
        var toPoint = this.view.getPokerBasePoint(data.index);
        var tweenObj;
        if (isLast2Poker) {
            pokerObj.rotation = 0;
            tweenObj = { x: toPoint.x, y: toPoint.y, rotation: -90 };
        }
        else {
            tweenObj = { x: toPoint.x, y: toPoint.y };
        }
        Laya.Tween.to(pokerObj, tweenObj, playTime, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            // 发完牌, 显示牌
            _this._showViewMessage(data.pokerData, isFroceHide, true, isLast2Poker);
            if (_this.m_callback) {
                _this.m_callback.run();
            }
        }));
    };
    CBaijialeDealAnimationComponent.prototype._processBlue = function (poker) {
        var _this = this;
        Laya.Tween.to(poker, { x: poker.x - 200, y: 0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (_this.m_callback) {
                _this.m_callback.run();
            }
            // poker.visible = false;
            // poker.x = poker.y = 0; 蓝牌等牌局结束再清除
        }));
    };
    CBaijialeDealAnimationComponent.prototype._showViewMessage = function (data, forceHide, showZZ, isLast2Poker) {
        this.m_pokerView.updateView(data, forceHide, showZZ, false, isLast2Poker);
    };
    return CBaijialeDealAnimationComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeDealAnimationComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../CBaccConf":66,"./CBaijialeComponent":83}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CBaijialeDealAnimationComponent_1 = require("./CBaijialeDealAnimationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CBaijialeView_1 = require("../CBaijialeView");
// 发牌
var CBaijialeDealComponent = /** @class */ (function (_super) {
    __extends(CBaijialeDealComponent, _super);
    function CBaijialeDealComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeDealComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bStop = true;
    };
    CBaijialeDealComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeDealComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeDealComponent.prototype.reset = function () {
        for (var i = 0; i < CBaijialeView_1.default.PokerCount; ++i) {
            var poker = this.view.getPokerByIndex(i);
            poker.alpha = 1;
            poker.scaleX = poker.scaleY = 1;
            poker.visible = false;
        }
        this.m_pController.view.desk_pokers_bNumber.visible = false;
        this.m_pController.view.desk_pokers_pNumber.visible = false;
        this.m_bActionFinished = false;
        this.m_bStop = false;
    };
    CBaijialeDealComponent.prototype.process = function () {
        this.m_bActionFinished = false;
        this.m_bStop = false;
        var dealPokerData = GM_1.GM.baccData.dealPokerData;
        var xPokerList = dealPokerData.playerPokers.pokers;
        var bPokerList = dealPokerData.bankerPokers.pokers;
        var _a = [xPokerList[0], xPokerList[1], bPokerList[0], bPokerList[1]], p1 = _a[0], p2 = _a[1], b1 = _a[2], b2 = _a[3];
        var tmpList = [new CPokerData_1.CDealPokerData(p1, 0, false), new CPokerData_1.CDealPokerData(b1, 1, true),
            new CPokerData_1.CDealPokerData(p2, 2, false), new CPokerData_1.CDealPokerData(b2, 3, true)];
        // 前四张发牌
        var sequentialSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        var i = 0;
        var processItem;
        for (; i < 4; ++i) {
            processItem = tmpList[i];
            if (dealPokerData.bulePlace > 0 && dealPokerData.bulePlace == processItem.pokerData.id) {
                // 蓝牌在这位置
                this._addDealSequential(sequentialSystem, processItem, true);
            }
            this._addDealSequential(sequentialSystem, processItem, false); // 发p1,p2,b1,b2
            GM_1.GM.baccData.updatePokerState(i, processItem.pokerData, false);
        }
    };
    CBaijialeDealComponent.prototype._addDealSequential = function (sequentialSystem, processItem, isBlue) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._dealPoker, [processItem, isBlue]), ApiUtil_1.ApiUtil.createHandler(this, this._onDealPokerFinish, [processItem, isBlue])); // 发p3
    };
    CBaijialeDealComponent.prototype._onActionFinishHandler = function () {
        this.m_bActionFinished = true;
    };
    CBaijialeDealComponent.prototype._dealPoker = function (poker, isBlue) {
        if (isBlue === void 0) { isBlue = false; }
        this.m_bActionFinished = false;
        if (this.m_bStop) {
            return true;
        }
        if (!isBlue) {
            if (!poker) {
                return true;
            }
        }
        var endHandler = Laya.Handler.create(this, this._onActionFinishHandler);
        var animationComponent = this.m_pController.getComponent(CBaijialeDealAnimationComponent_1.default);
        animationComponent.process(poker, endHandler, isBlue);
        return true;
    };
    CBaijialeDealComponent.prototype._onDealPokerFinish = function (poker, isBlue) {
        if (isBlue === void 0) { isBlue = false; }
        if (this.m_bStop) {
            return true;
        }
        if (!isBlue) {
            if (!poker) {
                return true;
            }
        }
        return this.m_bActionFinished;
    };
    CBaijialeDealComponent.prototype.stop = function () {
        this.m_bStop = true;
    };
    return CBaijialeDealComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeDealComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../_commonModel/CPokerData":21,"../CBaijialeView":77,"./CBaijialeComponent":83,"./CBaijialeDealAnimationComponent":84}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var FuncUtil_1 = require("../../../../../hbcore/util/FuncUtil");
var CBaijialeTopComponent_1 = require("./CBaijialeTopComponent");
// 发牌器
var CBaijialeDealPortComponent = /** @class */ (function (_super) {
    __extends(CBaijialeDealPortComponent, _super);
    function CBaijialeDealPortComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeDealPortComponent.prototype.reset = function () {
        var pBluePoker = this.view.desk_emitter_pokerBlue;
        pBluePoker.visible = false;
        pBluePoker.x = pBluePoker.y = 0;
    };
    CBaijialeDealPortComponent.prototype.onDestroy = function () {
        this.view.desk_emitter_top.off(Laya.Event.MOUSE_DOWN, this, this._onShowLookPoker);
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeDealPortComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeDealPortComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.view.desk_emitter_top.on(Laya.Event.MOUSE_DOWN, this, this._onShowLookPoker);
        return true;
    };
    CBaijialeDealPortComponent.prototype.process = function (backPokerData) {
        var pokerList = backPokerData.pokers;
        var p1 = pokerList[0];
        var p2 = pokerList[1];
        this.view.desk_emitter_info1_num1.text = p1.id.toString();
        this.view.desk_emitter_info2_num2.text = p2.id.toString();
        this.view.desk_emitter_info1_final1.text = FuncUtil_1.FuncUtil.toOmitString(p1.mark.toString(), 5);
        this.view.desk_emitter_info2_final2.text = FuncUtil_1.FuncUtil.toOmitString(p2.mark.toString(), 5);
    };
    CBaijialeDealPortComponent.prototype._onShowLookPoker = function () {
        this.m_pController.getComponent(CBaijialeTopComponent_1.default).triggerLookAll();
    };
    return CBaijialeDealPortComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeDealPortComponent;
},{"../../../../../hbcore/util/FuncUtil":268,"./CBaijialeComponent":83,"./CBaijialeTopComponent":104}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CPokerView_1 = require("../../../../common/CPokerView");
var GM_1 = require("../../../../../gm/GM");
// 快速播放发牌动画
var CBaijialeDealQuicklyComponent = /** @class */ (function (_super) {
    __extends(CBaijialeDealQuicklyComponent, _super);
    function CBaijialeDealQuicklyComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeDealQuicklyComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeDealQuicklyComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeDealQuicklyComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeDealQuicklyComponent.prototype.process = function () {
        // 快速发牌。说明牌已经发过了。从enterData里拿数据
        var enterData = GM_1.GM.baccData.enterData;
        var xPokerList = enterData.playerPokers.pokers;
        var bPokerList = enterData.bankerPokers.pokers;
        var _a = [xPokerList[0], xPokerList[1], bPokerList[0], bPokerList[1]], p1 = _a[0], p2 = _a[1], b1 = _a[2], b2 = _a[3];
        var tmpList = [new CPokerData_1.CDealPokerData(p1, 0, false), new CPokerData_1.CDealPokerData(b1, 1, true),
            new CPokerData_1.CDealPokerData(p2, 2, false), new CPokerData_1.CDealPokerData(b2, 3, true)];
        // 前四张发牌
        var i = 0;
        var processItem;
        for (; i < 4; ++i) {
            processItem = tmpList[i];
            this._showPoker(processItem);
        }
    };
    CBaijialeDealQuicklyComponent.prototype._showPoker = function (data) {
        var portStartObj = this.m_pController.view.desk_emitter_poker;
        var toObj = this.m_pController.view.getPokerByIndex(data.index);
        this.m_pokerView.view = toObj;
        // 显示牌
        toObj.visible = true;
        this._showViewMessage(data.pokerData, false, true);
    };
    CBaijialeDealQuicklyComponent.prototype._showViewMessage = function (data, forceHide, showZZ) {
        this.m_pokerView.updateView(data, forceHide, showZZ);
    };
    return CBaijialeDealQuicklyComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeDealQuicklyComponent;
},{"../../../../../gm/GM":221,"../../../../common/CPokerView":9,"../../../_commonModel/CPokerData":21,"./CBaijialeComponent":83}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBreathAnimationComponent_1 = require("../../../../common/component/CBreathAnimationComponent");
var CBaijialeLightMyBetAreaComponent = /** @class */ (function (_super) {
    __extends(CBaijialeLightMyBetAreaComponent, _super);
    function CBaijialeLightMyBetAreaComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeLightMyBetAreaComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_processingList = null;
    };
    CBaijialeLightMyBetAreaComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_processingList = new Laya.WeakObject();
        return true;
    };
    CBaijialeLightMyBetAreaComponent.prototype.process = function (areaIndex) {
        var _this = this;
        _super.prototype.process.call(this);
        if (areaIndex < 0) {
            return;
        }
        var isExist = this.m_processingList.has(areaIndex);
        if (isExist) {
            return;
        }
        var view = this.view.getLightAreaByIndex(areaIndex);
        var aniComp = new CBreathAnimationComponent_1.default(this, function () {
            if (_this.m_processingList && _this.m_processingList.has(areaIndex)) {
                _this.m_processingList.del(areaIndex);
            }
            aniComp.destroy();
        }, view, 0, 0.01, true, 200);
        aniComp.awake();
        aniComp.start();
        aniComp.process();
        this.m_processingList.set(areaIndex, true);
    };
    CBaijialeLightMyBetAreaComponent.prototype.reset = function () {
    };
    return CBaijialeLightMyBetAreaComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeLightMyBetAreaComponent;
},{"../../../../common/component/CBreathAnimationComponent":14,"./CBaijialeComponent":83}],89:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBreathAnimationComponent_1 = require("../../../../common/component/CBreathAnimationComponent");
// 发牌器
var CBaijialeLightWinAreaComponent = /** @class */ (function (_super) {
    __extends(CBaijialeLightWinAreaComponent, _super);
    function CBaijialeLightWinAreaComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeLightWinAreaComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeLightWinAreaComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeLightWinAreaComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeLightWinAreaComponent.prototype.process = function (data) {
        if (!data || data.length == 0) {
            return;
        }
        var _loop_1 = function (idx) {
            var img = this_1.view.getDeskSelectAreaByIndex(idx - 1);
            var aniComp = new CBreathAnimationComponent_1.default(this_1, function () {
                aniComp.destroy();
            }, img, 10, 0.01, false);
            aniComp.awake();
            aniComp.start();
            aniComp.process();
        };
        var this_1 = this;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var idx = data_1[_i];
            _loop_1(idx);
        }
    };
    return CBaijialeLightWinAreaComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeLightWinAreaComponent;
},{"../../../../common/component/CBreathAnimationComponent":14,"./CBaijialeComponent":83}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeNetComponent_1 = require("./CBaijialeNetComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var FuncUtil_1 = require("../../../../../hbcore/util/FuncUtil");
var CBaijialeLocationComponent = /** @class */ (function (_super) {
    __extends(CBaijialeLocationComponent, _super);
    function CBaijialeLocationComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CBaijialeLocationComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        if (this.view.userList.renderHandler) {
            this.view.userList.renderHandler.recover();
            this.view.userList.renderHandler = null;
        }
        this.m_pController.netComponent.off(CBaijialeNetComponent_1.CBaijialeNetComponent.EVENT_USER_UPDATE, this, this.process);
        this.m_bDestroy = true;
        Laya.timer.clearAll(this);
        this.m_tipsList.length = 0;
        this.m_tipsList = null;
    };
    CBaijialeLocationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        this.view.userList.renderHandler = Laya.Handler.create(this, this._onRenderItem, null, false);
        this.m_pController.netComponent.on(CBaijialeNetComponent_1.CBaijialeNetComponent.EVENT_USER_UPDATE, this, this.process);
        // 缓存tips的列表
        var cells = this.view.userList.cells;
        this.m_tipsList = [];
        for (var i = 0; i < cells.length; ++i) {
            var cell = cells[i];
            if (cell) {
                var resultTip = this.view.get_userList_resultTips(cell);
                var resultTxt = this.view.get_userList_resultTxt(cell);
                this.m_tipsList.push(resultTip);
                this.m_tipsList.push(resultTxt);
            }
        }
        for (var i = 0; i < this.m_tipsList.length; ++i) {
            var sp = this.m_tipsList[i];
            if (sp) {
                sp.visible = false;
            }
        }
        this._hideResultTips(true);
        return true;
    };
    CBaijialeLocationComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var playerId = GM_1.GM.instance.userInfo.gameData.curStageInfo.playerId;
        var baccData = GM_1.GM.baccData;
        var locationInfoList = baccData.enterData.locationInfos;
        var tempList = [null, null, null, null, null];
        var myData = this.getDataByUID(GM_1.GM.gameData.curStageInfo.playerId);
        tempList[2] = myData;
        var setIndex = 0;
        var i = 0;
        for (; i < locationInfoList.length; ++i) {
            var infoData = locationInfoList[i];
            if (infoData.playerId != playerId) {
                tempList[setIndex] = locationInfoList[i];
                ++setIndex;
                if (setIndex == 2) {
                    ++setIndex;
                }
            }
        }
        this.view.userList.array = tempList;
    };
    CBaijialeLocationComponent.prototype.getDataByUID = function (playerId) {
        var locationInfoList = GM_1.GM.baccData.enterData.locationInfos;
        var i;
        var ret;
        for (i = 0; i < locationInfoList.length; ++i) {
            if (locationInfoList[i].playerId == playerId) {
                ret = locationInfoList[i];
                break;
            }
        }
        return ret;
    };
    CBaijialeLocationComponent.prototype.getLocationItemByUID = function (playerId) {
        var cells = this.view.userList.cells;
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            if (cell && cell.dataSource) {
                var locationInfo = cell.dataSource;
                if (locationInfo.playerId == playerId) {
                    return cell;
                }
            }
        }
        return null;
    };
    // private _getMyDataInArray(array:Array<CLocationInfosData>) : CLocationInfosData {
    //     let i:number;
    //     let ret:CLocationInfosData;
    //     for (i = 0; i < array.length; ++i) {
    //         if (array[i].playerId == GM.instance.userInfo.gameData.curStageInfo.playerId) {
    //             ret = array[i];
    //             break;
    //         }
    //     }
    //     return ret;
    // }
    CBaijialeLocationComponent.prototype._onRenderItem = function (comp, idx) {
        for (var i = 0; i < comp.numChildren; ++i) {
            var child = comp.getChildAt(i);
            if (child.name != 'result' && child.name != 'resultTxt') {
                child.visible = false;
            }
        }
        var locationData = comp.dataSource;
        var myIcon1 = this.view.get_userList_my1(comp);
        var myIcon2 = this.view.get_userList_my2(comp);
        var otherIcon1 = this.view.get_userList_other1(comp);
        var otherIcon2 = this.view.get_userList_other2(comp);
        var myName = this.view.get_userList_myName(comp);
        var myMoney = this.view.get_userList_myMoney(comp);
        var otherName = this.view.get_userList_otherName(comp);
        var otherMoney = this.view.get_userList_otherMoney(comp);
        var empty = this.view.get_userList_empty(comp);
        var icon1;
        var icon2;
        var name;
        var money;
        var myID = GM_1.GM.instance.userInfo.gameData.curStageInfo.playerId;
        var isSelf = false;
        if (!locationData) {
            empty.visible = true;
        }
        else {
            isSelf = myID == locationData.playerId;
            if (isSelf) {
                myIcon1.visible = myName.visible = myMoney.visible = true;
                icon1 = myIcon1;
                icon2 = myIcon2;
                name = myName;
                money = myMoney;
            }
            else {
                otherIcon1.visible = otherName.visible = otherMoney.visible = true;
                icon1 = otherIcon1;
                icon2 = otherIcon2;
                name = otherName;
                money = otherMoney;
            }
            name.text = FuncUtil_1.FuncUtil.toOmitString(locationData.nickName, 10);
            money.text = ApiUtil_1.ApiUtil.formatNumber(locationData.balance).toString(); // locationData.balance.toFixed(2);
        }
    };
    CBaijialeLocationComponent.prototype.updateResultTips = function (pWinList) {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        var cells = this.view.userList.cells;
        if (!cells || cells.length == 0) {
            return;
        }
        if (!pWinList || pWinList.length == 0) {
            return;
        }
        var findWinInfo = function (pId) {
            for (var _i = 0, pWinList_1 = pWinList; _i < pWinList_1.length; _i++) {
                var pinfo = pWinList_1[_i];
                if (pinfo && pinfo.playerId == pId) {
                    return pinfo;
                }
            }
            return null;
        };
        for (var i = 0; i < cells.length; ++i) {
            var cell = cells[i];
            var locationData = cell.dataSource;
            if (!locationData) {
                continue;
            }
            var pInfo = findWinInfo(locationData.playerId);
            if (!pInfo) {
                continue;
            }
            var resultTip = this.view.get_userList_resultTips(cell);
            var resultTxt = this.view.get_userList_resultTxt(cell);
            resultTip.visible = resultTxt.visible = true;
            resultTip.alpha = resultTxt.alpha = 1;
            var winCoin = pInfo.totalWin;
            if (Math.abs(winCoin) > 0.00000001) {
                if (winCoin > 0) {
                    resultTip.index = 1;
                    resultTxt.text = '+' + winCoin;
                }
                else {
                    resultTip.index = 0;
                    resultTxt.text = winCoin.toString();
                }
            }
            else {
                // == 0;
                resultTip.index = 2;
                resultTxt.text = '0';
            }
        }
        Laya.timer.once(2500, this, function () {
            _this._hideResultTips(false);
        });
    };
    CBaijialeLocationComponent.prototype._hideResultTips = function (hideDirect) {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        if (!this.view || !this.view.userList) {
            return;
        }
        var cells = this.view.userList.cells;
        if (!cells || cells.length == 0) {
            return;
        }
        if (hideDirect) {
            for (var i = 0; i < this.m_tipsList.length; ++i) {
                var sp = this.m_tipsList[i];
                if (sp) {
                    sp.alpha = 0;
                }
            }
        }
        else {
            var alpha_1 = 1;
            Laya.timer.loop(100, this, function () {
                if (_this.m_bDestroy) {
                    Laya.timer.clearAll(_this);
                    return;
                }
                if (!_this.m_tipsList) {
                    return;
                }
                for (var i = 0; i < _this.m_tipsList.length; ++i) {
                    var sp = _this.m_tipsList[i];
                    if (sp) {
                        sp.alpha = alpha_1;
                    }
                }
                alpha_1 -= 0.05;
                if (alpha_1 <= 0) {
                    for (var i = 0; i < _this.m_tipsList.length; ++i) {
                        var sp = _this.m_tipsList[i];
                        if (sp) {
                            sp.visible = false;
                        }
                    }
                    Laya.timer.clearAll(_this);
                }
            });
        }
    };
    return CBaijialeLocationComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeLocationComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../../hbcore/util/FuncUtil":268,"./CBaijialeComponent":83,"./CBaijialeNetComponent":92}],91:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CMD5TipsView_1 = require("../../../../common/CMD5TipsView");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
// md5tips播放
var CBaijialeMd5TipsComponent = /** @class */ (function (_super) {
    __extends(CBaijialeMd5TipsComponent, _super);
    function CBaijialeMd5TipsComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeMd5TipsComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeMd5TipsComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeMd5TipsComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_md5TipsView = new CMD5TipsView_1.default(this.m_pController.view.md5Tips);
        this.m_bSetingUnVisible = false;
        this.m_tempPos = new Laya.Point();
        return true;
    };
    CBaijialeMd5TipsComponent.prototype.process = function (idx, poker, pokerView, isShow) {
        var _this = this;
        if (!isShow) {
            if (this.m_md5TipsView.visible) {
                if (!this.m_bSetingUnVisible) {
                    this.m_bSetingUnVisible = true;
                    Laya.timer.once(2000, this, function () {
                        _this.m_bSetingUnVisible = false;
                        _this.m_md5TipsView.visible = false;
                    });
                }
            }
            return;
        }
        if (!poker) {
            return;
        }
        this.m_bSetingUnVisible = false;
        Laya.timer.clearAll(this);
        this.m_md5TipsView.visible = true;
        if (pokerView && pokerView.view) {
            this.m_md5TipsView.icon.visible = poker.isOpen;
            this.m_md5TipsView.mark.text = poker.data.mark;
            if (poker.isOpen) {
                var strList = poker.data.seed.split('-');
                this.m_md5TipsView.zz1.text = strList[0] + '-';
                this.m_md5TipsView.zz2.text = strList[1];
                this.m_md5TipsView.zz2.x = this.m_md5TipsView.zz1.x + this.m_md5TipsView.zz1.displayWidth + 5;
                this.m_md5TipsView.bg.width = this.m_md5TipsView.zz2.x + this.m_md5TipsView.zz2.displayWidth + 5;
                this.m_md5TipsView.icon.x = this.m_md5TipsView.bg.width + 2;
                this.m_md5TipsView.bg.height = 58;
                this.m_md5TipsView.zzImg.visible = true;
            }
            else {
                this.m_md5TipsView.zzImg.visible = false;
                this.m_md5TipsView.zz1.text = '';
                this.m_md5TipsView.zz2.text = '';
                this.m_md5TipsView.bg.width = this.m_md5TipsView.mark.x + this.m_md5TipsView.mark.displayWidth + 5;
                this.m_md5TipsView.bg.height = 32;
            }
            var fromObj = pokerView.tipsImg1;
            var tipsPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(fromObj, this.m_md5TipsView.view);
            var fromHalfSize = fromObj.width * 0.5;
            if (idx == 0 || idx == 2 || idx == 4) {
                // 闲家, 在左边
                this.m_md5TipsView.view.x = tipsPos.x - 50 + fromHalfSize;
                this.m_md5TipsView.view.y = tipsPos.y + 20;
                this.m_md5TipsView.head.x = 50;
            }
            else if (idx == 1 || idx == 3 || idx == 5) {
                // 庄家 右边
                this.m_md5TipsView.view.x = tipsPos.x - (this.m_md5TipsView.bg.width - 50) + fromHalfSize;
                this.m_md5TipsView.view.y = tipsPos.y + 20;
                this.m_md5TipsView.head.x = (this.m_md5TipsView.bg.width - 50);
            }
            else {
                // -1 不处理
            }
        }
    };
    CBaijialeMd5TipsComponent.prototype.reset = function () {
        this.m_md5TipsView.visible = false;
        this.m_bSetingUnVisible = false;
        Laya.timer.clearAll(this);
    };
    return CBaijialeMd5TipsComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeMd5TipsComponent;
},{"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CMD5TipsView":7,"./CBaijialeComponent":83}],92:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeModel_1 = require("../CBaijialeModel");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var log_1 = require("../../../../../hbcore/framework/log");
var CBaijialeNetComponent = /** @class */ (function (_super) {
    __extends(CBaijialeNetComponent, _super);
    function CBaijialeNetComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CBaijialeNetComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var pEmitter = GM_1.GM.instance.network.sfsGame.Emitter;
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.DealPoker);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.DealCountDown);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.StartBetCountDown);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.OpenPoker);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.BetsBroadcast);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.Result);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.Bets);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.UserInOut);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.ClientReady);
        pEmitter.off(this, CBaijialeHallModel_1.BaccNetConf.Shuffle);
        for (var _i = 0, _a = this.m_queue; _i < _a.length; _i++) {
            var pData = _a[_i];
            Laya.Pool.recover('protocolData', pData);
        }
        this.m_queue = null;
        this.m_isDestroy = true;
    };
    CBaijialeNetComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.m_isReady = false;
        this.m_isInitilize = false;
    };
    CBaijialeNetComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        if (!this.m_isInitilize) {
            this.m_isDestroy = false;
            this.m_queue = [];
            var pEmitter = GM_1.GM.instance.network.sfsGame.Emitter;
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.DealPoker, this._onDealPokerResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.DealCountDown, this._onDealCountDownResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.StartBetCountDown, this._onStartBetCountDown);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.OpenPoker, this._onOpenPokerResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.BetsBroadcast, this._onBetsBroadcastResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.Result, this._onResultResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.Bets, this._onBetsResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.UserInOut, this._onUserInOutResponse);
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.ClientReady, this._onClientReady); // 要改成ClientReady
            pEmitter.on(this, CBaijialeHallModel_1.BaccNetConf.Shuffle, this._onShuffle);
            GM_1.GM.instance.network.sfsGame.send(CBaijialeHallModel_1.BaccNetConf.ClientReady, {}, true);
            this.m_isInitilize = true;
        }
        return this.m_isReady;
    };
    CBaijialeNetComponent.prototype.process = function () {
    };
    CBaijialeNetComponent.prototype._onDealPokerResponse = function (data) {
        // 新局
        GM_1.GM.gameData.addRound();
        // 清除之前的缓存在队列里的协议
        // this._clearQueue(); clear可能会导致流程异常
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccDealPokerData);
        GM_1.GM.baccData.updateDealData(newData);
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.DealPoker, newData);
    };
    CBaijialeNetComponent.prototype._onDealCountDownResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccCountDownData);
        if (newData.second > 0) {
            newData.second--; // 服务器时间会停在1秒, 这里把时间处理下, 后面如果有其他地方要用到这个协议做倒计时的。要注意
        }
        GM_1.GM.baccData.dealCountDownData = newData;
    };
    CBaijialeNetComponent.prototype._onStartBetCountDown = function (data) {
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.StartBetCountDown, data);
    };
    CBaijialeNetComponent.prototype._onOpenPokerResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccOpenPokerData);
        GM_1.GM.baccData.updateOpenPokerData(newData);
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.OpenPoker, newData);
        this.event(CBaijialeNetComponent.EVENT_ROAD_UPDATE, newData);
    };
    CBaijialeNetComponent.prototype._onBetsBroadcastResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccBetsBroadcastData);
        GM_1.GM.baccData.betsBroadcastData = newData;
        // 更新玩家余额
        var locationInfo = GM_1.GM.baccData.enterData.getLocationDataByPlayerId(newData.playerId);
        if (locationInfo) {
            locationInfo.balance = newData.betBalance;
            this.event(CBaijialeNetComponent.EVENT_USER_UPDATE);
        }
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.BetsBroadcast, newData);
    };
    CBaijialeNetComponent.prototype._onResultResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccResultData);
        GM_1.GM.baccData.updateResultPokerData(newData);
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.Result, newData);
    };
    CBaijialeNetComponent.prototype._onBetsResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccBetsData);
        if (false == newData.isError) {
            GM_1.GM.baccData.betsData = data;
        }
        // this._inQueue(BaccNetConf.Bets, data);        
        this.event(CBaijialeNetComponent.EVENT_BET_RESPONSE, data);
    };
    CBaijialeNetComponent.prototype._onUserInOutResponse = function (data) {
        if (!data) {
            return;
        }
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccUserInOutData);
        if (newData.isError) {
            CMessageBox_1.default.instance.showNetError(data.errorCode);
            return;
        }
        if (GM_1.GM.baccData.enterData) {
            GM_1.GM.baccData.enterData.updateLocationInfo(newData);
            this.event(CBaijialeNetComponent.EVENT_USER_UPDATE);
        }
        else {
            log_1.log.log('更新inout, enterData没数据, 应该是协议顺序问题');
        }
    };
    CBaijialeNetComponent.prototype._onClientReady = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBaijialeModel_1.CBaccEnterData);
        if (newData.isError) {
            CMessageBox_1.default.instance.showNetError(newData.errorCode);
            GM_1.GM.instance.network.sfsGame.send(CBaijialeHallModel_1.BaccNetConf.ClientReady, {}, true);
            return;
        }
        else {
            GM_1.GM.baccData.updateEntryData(newData);
            this.m_isReady = true;
        }
        GM_1.GM.gameData.resetRound();
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.ClientReady, newData);
    };
    CBaijialeNetComponent.prototype._onShuffle = function (data) {
        this._inQueue(CBaijialeHallModel_1.BaccNetConf.Shuffle, data);
    };
    CBaijialeNetComponent.prototype._inQueue = function (protocol, data) {
        var pData = Laya.Pool.getItemByClass('protocolData', ProtocolData);
        pData.protocol = protocol;
        pData.data = data;
        this.m_queue.push(pData);
    };
    CBaijialeNetComponent.prototype._clearQueue = function () {
        for (var _i = 0, _a = this.m_queue; _i < _a.length; _i++) {
            var pData = _a[_i];
            Laya.Pool.recover('protocolData', pData);
        }
        this.m_queue.length = 0;
    };
    CBaijialeNetComponent.prototype.hasProtocol = function () {
        return this.m_queue.length > 0;
    };
    CBaijialeNetComponent.prototype.nextProtocol = function () {
        var pData = this.m_queue.shift();
        Laya.Pool.recover('protocolData', pData);
        return pData;
    };
    CBaijialeNetComponent.prototype.waitProtocol = function (protocol, caller, callback) {
        var _this = this;
        var isOkHandler = ApiUtil_1.ApiUtil.createHandler(this, function () {
            if (_this.m_isDestroy) {
                return true;
            }
            if (_this.hasProtocol()) {
                var nextPro = _this.nextProtocol();
                if (nextPro.protocol == protocol) {
                    if (callback) {
                        callback.call(caller, nextPro.data);
                    }
                    return true;
                }
            }
            return false;
        });
        GM_1.GM.instance.gameStage.sequentialSystem.addSequential(this, null, isOkHandler);
    };
    CBaijialeNetComponent.EVENT_ROAD_UPDATE = 'roadUpdate';
    CBaijialeNetComponent.EVENT_BET_RESPONSE = 'betsResponse';
    CBaijialeNetComponent.EVENT_USER_UPDATE = 'userUpdate';
    return CBaijialeNetComponent;
}(CBaijialeComponent_1.default));
exports.CBaijialeNetComponent = CBaijialeNetComponent;
var ProtocolData = /** @class */ (function () {
    function ProtocolData() {
    }
    return ProtocolData;
}());
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CMessageBox":8,"../../../../net/CBaseNet":216,"../../hall/CBaijialeHallModel":69,"../CBaijialeModel":76,"./CBaijialeComponent":83}],93:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPokerView_1 = require("../../../../common/CPokerView");
var GM_1 = require("../../../../../gm/GM");
var CBaccConf_1 = require("../../CBaccConf");
// 播放开牌动画
var CBaijialeOpenAnimationComponent = /** @class */ (function (_super) {
    __extends(CBaijialeOpenAnimationComponent, _super);
    function CBaijialeOpenAnimationComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeOpenAnimationComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeOpenAnimationComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeOpenAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeOpenAnimationComponent.prototype.process = function (data, callback) {
        var isLast2Poker = data.index == 4 || data.index == 5;
        this.m_isActionFinished = false;
        this.m_callback = callback;
        var portStartObj = this.m_pController.view.desk_emitter_poker;
        var toObj = this.m_pController.view.getPokerByIndex(data.index);
        toObj.visible = true;
        // 发牌过程, 隐藏牌
        this.m_pokerView.view = toObj;
        this.m_data = data;
        this._showViewMessage(data.pokerData, true, true, true, isLast2Poker);
        var sequentialSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._showMd5Message), ApiUtil_1.ApiUtil.createHandler(this, this._isActionFinished));
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._rotatePoker, [isLast2Poker]), ApiUtil_1.ApiUtil.createHandler(this, this._isActionFinished));
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._onFinished), null);
    };
    CBaijialeOpenAnimationComponent.prototype._showMd5Message = function () {
        this.m_isActionFinished = false;
        this.m_isActionFinished = true;
        return true;
    };
    CBaijialeOpenAnimationComponent.prototype._rotatePoker = function (isLast2Poker) {
        var _this = this;
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_OPEN_POKER);
        this.m_isActionFinished = false;
        var baseScalc = this.m_pokerView.backImg.scaleX;
        // 翻转牌
        Laya.Tween.to(this.m_pokerView.backImg, { scaleX: 0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this._showViewMessage(_this.m_data.pokerData, false, true, true, isLast2Poker); // 翻完, 显示牌
            Laya.Tween.to(_this.m_pokerView.backImg, { scaleX: baseScalc }, 400, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                _this.m_isActionFinished = true;
                _this._showViewMessage(_this.m_data.pokerData, false, true, false, isLast2Poker);
            }));
        }));
        return true;
    };
    CBaijialeOpenAnimationComponent.prototype._isActionFinished = function () {
        return this.m_isActionFinished;
    };
    CBaijialeOpenAnimationComponent.prototype._onFinished = function (toObj, data) {
        // 发完牌, 显示牌
        if (this.m_callback) {
            this.m_callback.run();
        }
        return true;
    };
    CBaijialeOpenAnimationComponent.prototype._showViewMessage = function (data, forceHide, showZZ, isOpening, isLast2Poker) {
        this.m_pokerView.updateView(data, forceHide, showZZ, isOpening, isLast2Poker);
    };
    return CBaijialeOpenAnimationComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeOpenAnimationComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../CBaccConf":66,"./CBaijialeComponent":83}],94:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeDealAnimationComponent_1 = require("./CBaijialeDealAnimationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CBaijialeOpenAnimationComponent_1 = require("./CBaijialeOpenAnimationComponent");
var CBaijialeMd5TipsComponent_1 = require("./CBaijialeMd5TipsComponent");
var CPokerView_1 = require("../../../../common/CPokerView");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CGlobalConf_1 = require("../../../../const/CGlobalConf");
// 发牌
var CBaijialeOpenPokerComponent = /** @class */ (function (_super) {
    __extends(CBaijialeOpenPokerComponent, _super);
    function CBaijialeOpenPokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeOpenPokerComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bStop = true;
    };
    CBaijialeOpenPokerComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeOpenPokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_tempPokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeOpenPokerComponent.prototype.process = function (callback) {
        this.m_finishCallback = callback;
        this.m_bStop = false;
        var openPokerData = GM_1.GM.baccData.openPokerData;
        var bulePlace = openPokerData.bulePlace;
        var xPokerList = openPokerData.playerPoker.pokers;
        var bPokerList = openPokerData.bankerPoker.pokers;
        // 前4张。开牌
        var _a = [xPokerList[0], xPokerList[1], bPokerList[0], bPokerList[1]], p1 = _a[0], p2 = _a[1], b1 = _a[2], b2 = _a[3];
        // 后0-2张，发牌&开牌
        var p3 = null, b3 = null;
        if (xPokerList.length > 2) {
            p3 = xPokerList[2];
        }
        if (bPokerList.length > 2) {
            b3 = bPokerList[2];
        }
        var tmpList = [new CPokerData_1.CDealPokerData(p1, 0, false), new CPokerData_1.CDealPokerData(b1, 1, true),
            new CPokerData_1.CDealPokerData(p2, 2, false), new CPokerData_1.CDealPokerData(b2, 3, true),
            new CPokerData_1.CDealPokerData(p3, 4, false), new CPokerData_1.CDealPokerData(b3, 5, true)];
        // 播放流程
        var sequentialSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._initialize), null); // 开p1
        // 前四张开牌
        var i = 0;
        var processItem;
        var leftValue = 0;
        var rightValue = 0;
        // 第一张牌 闲
        processItem = tmpList[0];
        this._addUpdatePokerDataSeq(sequentialSystem, 0, processItem);
        // this._addShowMd5Seq(sequentialSystem, 0);
        this._addOpenSeq(sequentialSystem, false, 0, processItem, leftValue);
        leftValue = processItem.realPoint;
        leftValue = CPokerData_1.CPokerData.toPoint(leftValue);
        // 第二张牌
        processItem = tmpList[1];
        this._addUpdatePokerDataSeq(sequentialSystem, 1, processItem);
        // this._addShowMd5Seq(sequentialSystem, 1);
        this._addOpenSeq(sequentialSystem, true, 1, processItem, rightValue);
        rightValue = processItem.realPoint;
        rightValue = CPokerData_1.CPokerData.toPoint(rightValue);
        // 第三张牌 闲
        processItem = tmpList[2];
        this._addUpdatePokerDataSeq(sequentialSystem, 2, processItem);
        // this._addShowMd5Seq(sequentialSystem, 2);
        this._addOpenSeq(sequentialSystem, false, 2, processItem, leftValue);
        leftValue += processItem.realPoint;
        leftValue = CPokerData_1.CPokerData.toPoint(leftValue);
        // 第四张牌
        processItem = tmpList[3];
        this._addUpdatePokerDataSeq(sequentialSystem, 3, processItem);
        // this._addShowMd5Seq(sequentialSystem, 3);
        this._addOpenSeq(sequentialSystem, true, 3, processItem, rightValue);
        rightValue += processItem.realPoint;
        rightValue = CPokerData_1.CPokerData.toPoint(rightValue);
        // 后2张, 发牌开牌
        processItem = tmpList[4];
        if (processItem.pokerData) {
            this._testAddDealBlue(bulePlace, sequentialSystem, processItem);
            this._addBoPokerSound(sequentialSystem, false);
            this._addDealSeq(sequentialSystem, 4, processItem);
            this._addUpdatePokerDataSeq(sequentialSystem, 4, processItem);
            // this._addShowMd5Seq(sequentialSystem, 4);
            this._addWaitTimeSeq(sequentialSystem, 200);
            this._addOpenSeq(sequentialSystem, false, 4, processItem, leftValue);
        }
        // 最后一张
        processItem = tmpList[5];
        if (processItem.pokerData) {
            this._testAddDealBlue(bulePlace, sequentialSystem, processItem);
            this._addBoPokerSound(sequentialSystem, true);
            this._addDealSeq(sequentialSystem, 5, processItem);
            this._addUpdatePokerDataSeq(sequentialSystem, 5, processItem);
            // this._addShowMd5Seq(sequentialSystem, 5);
            this._addWaitTimeSeq(sequentialSystem, 200);
            this._addOpenSeq(sequentialSystem, true, 5, processItem, rightValue);
        }
        this._addPointSound(sequentialSystem, true, openPokerData.bankerPoker.point);
        this._addPointSound(sequentialSystem, false, openPokerData.playerPoker.point);
        this._addResultSound(sequentialSystem, openPokerData.winFlag);
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._onFinished), null);
    };
    CBaijialeOpenPokerComponent.prototype._addWaitTimeSeq = function (sequentialSystem, time) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil_1.ApiUtil.createHandler(this, this._isTimeFinish, [time])); // 开p1
    };
    CBaijialeOpenPokerComponent.prototype._waitTime = function () {
        this.m_startTime = Laya.timer.currTimer;
        return true;
    };
    CBaijialeOpenPokerComponent.prototype._isTimeFinish = function (time) {
        return Laya.timer.currTimer - this.m_startTime >= time;
    };
    CBaijialeOpenPokerComponent.prototype._addDealSeq = function (sequentialSystem, idx, processItem) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._dealPoker, [processItem, false, true]), ApiUtil_1.ApiUtil.createHandler(this, this._onDealPokerFinish, [processItem])); // 发p3
    };
    CBaijialeOpenPokerComponent.prototype._addShowMd5Seq = function (seq, idx) {
        seq.addSequential(this, Laya.Handler.create(this, this._showMd5, [idx]), null);
        this._addWaitTimeSeq(seq, 200);
        seq.addSequential(this, Laya.Handler.create(this, this._hideMd5), null);
    };
    CBaijialeOpenPokerComponent.prototype._addUpdatePokerDataSeq = function (sequentialSystem, idx, processItem) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._updatePoker, [idx, processItem.pokerData, true]), null); // 开p1        
    };
    CBaijialeOpenPokerComponent.prototype._addOpenSeq = function (sequentialSystem, isBanker, idx, processItem, beforePoint) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._openPoker, [processItem]), ApiUtil_1.ApiUtil.createHandler(this, this._onOpenPokerFinished, [processItem])); // 开p2
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._updatePoint, [beforePoint, processItem, isBanker]), null); // 开p1
    };
    CBaijialeOpenPokerComponent.prototype._testAddDealBlue = function (bulePlace, sequentialSystem, data) {
        if (bulePlace <= 0) {
            return;
        }
        if (!data || !data.pokerData) {
            return;
        }
        if (bulePlace != data.pokerData.id) {
            return;
        }
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._dealPoker, [null, true]), // 随便传一个item
        ApiUtil_1.ApiUtil.createHandler(this, this._onDealPokerFinish, [null, true])); // 发蓝牌
    };
    CBaijialeOpenPokerComponent.prototype._addBoPokerSound = function (sequentialSystem, isBanker) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._addBoPokerSoundB, [isBanker]), null);
    };
    CBaijialeOpenPokerComponent.prototype._addBoPokerSoundB = function (isBanker) {
        if (isBanker) {
            GM_1.GM.playSound(CGlobalConf_1.default.SOUND_BANKER_BO_POKER);
        }
        else {
            GM_1.GM.playSound(CGlobalConf_1.default.SOUND_XIAN_BO_POKER);
        }
    };
    CBaijialeOpenPokerComponent.prototype._addPointSound = function (sequentialSystem, isBanker, point) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._addPointSoundB, [isBanker, point]), null);
        this._addWaitTimeSeq(sequentialSystem, 1200);
    };
    CBaijialeOpenPokerComponent.prototype._addPointSoundB = function (isBanker, point) {
        var soundURL = CGlobalConf_1.default.GetPointSound(isBanker, point);
        GM_1.GM.playSound(soundURL);
    };
    CBaijialeOpenPokerComponent.prototype._addResultSound = function (sequentialSystem, result) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._addResultSoundB, [result]), null);
        this._addWaitTimeSeq(sequentialSystem, 1200);
    };
    CBaijialeOpenPokerComponent.prototype._addResultSoundB = function (result) {
        if (result == 0) {
            // 和
            GM_1.GM.playSound(CGlobalConf_1.default.SOUND_HE);
        }
        else if (1 == result) {
            // 庄赢
            GM_1.GM.playSound(CGlobalConf_1.default.SOUND_BANKER_WIN);
        }
        else {
            GM_1.GM.playSound(CGlobalConf_1.default.SOUND_XIAN_WIN);
        }
    };
    CBaijialeOpenPokerComponent.prototype._initialize = function () {
        this.view.desk_pokers_pNumber.visible = true;
        this.view.desk_pokers_pNumber.index = 9;
        this.view.desk_pokers_bNumber.visible = true;
        this.view.desk_pokers_bNumber.index = 9;
    };
    // 更新点数
    CBaijialeOpenPokerComponent.prototype._updatePoint = function (baseValue, poker, isBanker) {
        if (this.m_bStop) {
            return true;
        }
        if (!poker) {
            return;
        }
        var pNumber;
        if (isBanker) {
            pNumber = this.view.desk_pokers_bNumber;
        }
        else {
            pNumber = this.view.desk_pokers_pNumber;
        }
        var p = CPokerData_1.CPokerData.toPoint(baseValue + poker.realPoint);
        if (p == 0) {
            pNumber.index = 9;
        }
        else {
            pNumber.index = p - 1;
        }
    };
    // 发牌, 开牌
    CBaijialeOpenPokerComponent.prototype._onActionFinishHandler = function () {
        this.m_bActionFinished = true;
    };
    CBaijialeOpenPokerComponent.prototype._dealPoker = function (poker, isBlue, isFroceHide) {
        if (isBlue === void 0) { isBlue = false; }
        if (isFroceHide === void 0) { isFroceHide = false; }
        this.m_bActionFinished = false;
        if (this.m_bStop) {
            return true;
        }
        if (!isBlue) { // 非蓝牌才要求数据
            if (!poker || !poker.pokerData) {
                return true;
            }
        }
        var endHandler = Laya.Handler.create(this, this._onActionFinishHandler);
        var animationComponent = this.m_pController.getComponent(CBaijialeDealAnimationComponent_1.default);
        animationComponent.process(poker, endHandler, isBlue, isFroceHide);
        return true;
    };
    CBaijialeOpenPokerComponent.prototype._onDealPokerFinish = function (poker, isBlue) {
        if (isBlue === void 0) { isBlue = false; }
        if (this.m_bStop) {
            return true;
        }
        if (!isBlue) {
            // 非蓝牌才要求数据
            if (!poker || !poker.pokerData) {
                return true;
            }
        }
        return this.m_bActionFinished;
    };
    CBaijialeOpenPokerComponent.prototype._openPoker = function (poker) {
        this.m_bActionFinished = false;
        if (this.m_bStop) {
            return true;
        }
        if (!poker || !poker.pokerData) {
            return true;
        }
        var endHandler = Laya.Handler.create(this, this._onActionFinishHandler);
        var animationComponent = this.m_pController.getComponent(CBaijialeOpenAnimationComponent_1.default);
        animationComponent.process(poker, endHandler);
        return true;
    };
    CBaijialeOpenPokerComponent.prototype._onOpenPokerFinished = function (poker) {
        if (this.m_bStop) {
            return true;
        }
        if (!poker || !poker.pokerData) {
            return true;
        }
        return this.m_bActionFinished;
    };
    // 更新牌数据
    CBaijialeOpenPokerComponent.prototype._updatePoker = function (idx, pokerData, isOpen) {
        GM_1.GM.baccData.updatePokerState(idx, pokerData, isOpen);
    };
    CBaijialeOpenPokerComponent.prototype._showMd5 = function (idx) {
        if (this.m_bStop) {
            return true;
        }
        var poker = GM_1.GM.baccData.pokerList[idx];
        var view = this.view.getPokerByIndex(idx);
        this.m_tempPokerView.view = view;
        var md5Component = this.m_pController.getComponent(CBaijialeMd5TipsComponent_1.default);
        if (md5Component)
            md5Component.process(idx, poker, this.m_tempPokerView, true);
    };
    CBaijialeOpenPokerComponent.prototype._hideMd5 = function () {
        if (this.m_bStop) {
            return true;
        }
        var md5Component = this.m_pController.getComponent(CBaijialeMd5TipsComponent_1.default);
        if (md5Component)
            md5Component.process(0, null, null, false);
    };
    CBaijialeOpenPokerComponent.prototype._onFinished = function () {
        if (this.m_finishCallback) {
            this.m_finishCallback.run();
        }
        return true;
    };
    CBaijialeOpenPokerComponent.prototype.stop = function () {
        this.m_bStop = true;
    };
    return CBaijialeOpenPokerComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeOpenPokerComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../../../const/CGlobalConf":18,"../../../_commonModel/CPokerData":21,"./CBaijialeComponent":83,"./CBaijialeDealAnimationComponent":84,"./CBaijialeMd5TipsComponent":91,"./CBaijialeOpenAnimationComponent":93}],95:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var CPokerView_1 = require("../../../../common/CPokerView");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
// 发牌
var CBaijialeOpenPokerQuicklyComponent = /** @class */ (function (_super) {
    __extends(CBaijialeOpenPokerQuicklyComponent, _super);
    function CBaijialeOpenPokerQuicklyComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeOpenPokerQuicklyComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeOpenPokerQuicklyComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeOpenPokerQuicklyComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeOpenPokerQuicklyComponent.prototype.process = function () {
        // 快速发牌。说明牌已经发过了。从enterData里拿数据
        var enterData = GM_1.GM.baccData.enterData;
        var xPokerList = enterData.playerPokers.pokers;
        var bPokerList = enterData.bankerPokers.pokers;
        var _a = [xPokerList[0], xPokerList[1], bPokerList[0], bPokerList[1]], p1 = _a[0], p2 = _a[1], b1 = _a[2], b2 = _a[3];
        // let tmpList = [new CDealPokerData(p1, 0, false), new CDealPokerData(b1, 1, true), 
        //     new CDealPokerData(p2, 2, false), new CDealPokerData(b2, 3, true)];
        // 后0-2张，发牌&开牌
        var p3 = null, b3 = null;
        if (xPokerList.length > 2) {
            p3 = xPokerList[2];
        }
        if (bPokerList.length > 2) {
            b3 = bPokerList[2];
        }
        var tmpList = [new CPokerData_1.CDealPokerData(p1, 0, false), new CPokerData_1.CDealPokerData(b1, 1, true),
            new CPokerData_1.CDealPokerData(p2, 2, false), new CPokerData_1.CDealPokerData(b2, 3, true),
            new CPokerData_1.CDealPokerData(p3, 4, false), new CPokerData_1.CDealPokerData(b3, 5, true)];
        // 前四张发牌
        var i = 0;
        var processItem;
        for (; i < 4; ++i) {
            processItem = tmpList[i];
            this._showPoker(processItem);
        }
        // 后2张
        processItem = tmpList[4];
        if (processItem.pokerData) {
            this._showPoker(processItem);
        }
        processItem = tmpList[5];
        if (processItem.pokerData) {
            this._showPoker(processItem);
        }
    };
    CBaijialeOpenPokerQuicklyComponent.prototype._showPoker = function (data) {
        var portStartObj = this.m_pController.view.desk_emitter_poker;
        var toObj = this.m_pController.view.getPokerByIndex(data.index);
        this.m_pokerView.view = toObj;
        // 显示牌
        toObj.visible = true;
        var isLast2Poker = data.index == 5 || data.index == 6;
        this._showViewMessage(data.pokerData, false, true, isLast2Poker);
    };
    CBaijialeOpenPokerQuicklyComponent.prototype._showViewMessage = function (data, forceHide, showZZ, isLast2Poker) {
        this.m_pokerView.updateView(data, forceHide, showZZ, false, isLast2Poker);
    };
    return CBaijialeOpenPokerQuicklyComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeOpenPokerQuicklyComponent;
},{"../../../../../gm/GM":221,"../../../../common/CPokerView":9,"../../../_commonModel/CPokerData":21,"./CBaijialeComponent":83}],96:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var CPaiCaiView_1 = require("../../../_commonView/paicai/CPaiCaiView");
var CBaccConf_1 = require("../../CBaccConf");
var CBaijialePaicaiComponent = /** @class */ (function (_super) {
    __extends(CBaijialePaicaiComponent, _super);
    function CBaijialePaicaiComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialePaicaiComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialePaicaiComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CBaijialePaicaiComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialePaicaiComponent.prototype.process = function (paicai) {
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = false;
        openComponent.process(CPaiCaiView_1.default, CPaiCaiView_1.default.SIGN, 0, null, true);
        var view = openComponent.getView(0).view;
        view.model.paicai = paicai;
        openComponent.showView(this.m_pController.view, 0);
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_PAICAI);
    };
    CBaijialePaicaiComponent.prototype.reset = function () {
    };
    return CBaijialePaicaiComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialePaicaiComponent;
},{"../../../../common/component/COpenSubViewComponent":16,"../../../_commonView/paicai/CPaiCaiView":42,"../../CBaccConf":66,"./CBaijialeComponent":83}],97:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeView_1 = require("../CBaijialeView");
var sequential_1 = require("../../../../../hbcore/framework/sequential");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPokerView_1 = require("../../../../common/CPokerView");
var CBaccConf_1 = require("../../CBaccConf");
// 收牌效果
var CBaijialeRecoverPokerComponent = /** @class */ (function (_super) {
    __extends(CBaijialeRecoverPokerComponent, _super);
    function CBaijialeRecoverPokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeRecoverPokerComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_pokerView = null;
    };
    CBaijialeRecoverPokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pokerView = new CPokerView_1.default(null);
        return true;
    };
    CBaijialeRecoverPokerComponent.prototype.process = function (caller, callback) {
        _super.prototype.process.call(this);
        this.m_pCallback = callback;
        this.m_pCaller = caller;
        this.m_movedCount = 0;
        this.m_moveCountTarger = 0;
        var seqSystem = GM_1.GM.instance.gameStage.getSystem(sequential_1.sequential.CSequentiaProcedureSystem);
        // 1.所有牌往中间收拢
        seqSystem.addSequential(this, Laya.Handler.create(this, this._moveToCenter), ApiUtil_1.ApiUtil.createHandler(this, this._isMoveFinish));
        // 2.牌往牌合收
        seqSystem.addSequential(this, Laya.Handler.create(this, this._moveToPort), ApiUtil_1.ApiUtil.createHandler(this, this._isMoveFinish));
        // finish
        seqSystem.addSequential(this, Laya.Handler.create(this, this._onFinished), null);
    };
    CBaijialeRecoverPokerComponent.prototype._moveToCenter = function () {
        var _this = this;
        this.m_movedCount = 0;
        this.m_moveCountTarger = CBaijialeView_1.default.PokerCount; // 不管牌有没有发，都算进去
        var p1 = this.view.getPokerByIndex(0);
        var b2 = this.view.getPokerByIndex(3);
        var toPos = new Laya.Point();
        toPos.y = p1.y;
        toPos.x = p1.x + (b2.x + b2.width - p1.x) * 0.5 - p1.width * 0.5; // p1和b2的中点
        for (var i = 0; i < CBaijialeView_1.default.PokerCount; ++i) {
            var poker = this.view.getPokerByIndex(i);
            this.m_pokerView.view = poker;
            this.m_pokerView.md5Box.visible = false;
            Laya.Tween.to(poker, { x: toPos.x, y: toPos.y }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_movedCount++;
            }));
        }
        var times = 0;
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_OPEN_POKER);
        Laya.timer.once(100, this, function () {
            if (_this.m_pController && _this.m_pController.soundComponent) {
                _this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_OPEN_POKER);
            }
        });
    };
    CBaijialeRecoverPokerComponent.prototype._moveToPort = function () {
        var _this = this;
        this.m_movedCount = 0;
        var toObj = this.view.desk_emitter_pokerBack;
        var fromObj;
        for (var i = 0; i < CBaijialeView_1.default.PokerCount; ++i) {
            var poker = this.view.getPokerByIndex(i);
            fromObj = poker;
            var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, fromObj);
            Laya.Tween.to(fromObj, { x: toPos.x, y: toPos.y, alpha: 0, scaleX: 6 / 7, scaleY: 6 / 7 }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_movedCount++;
            }));
        }
    };
    CBaijialeRecoverPokerComponent.prototype._isMoveFinish = function () {
        return this.m_movedCount >= this.m_moveCountTarger;
    };
    CBaijialeRecoverPokerComponent.prototype._onFinished = function () {
        if (this.m_pCallback && this.m_pCaller) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CBaijialeRecoverPokerComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeRecoverPokerComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/sequential":259,"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../CBaccConf":66,"../CBaijialeView":77,"./CBaijialeComponent":83}],98:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CBaijialeLocationComponent_1 = require("./CBaijialeLocationComponent");
var CBaccConf_1 = require("../../CBaccConf");
var CoinView_1 = require("../../../../coin/CoinView");
var CBaijialeBetsComponent_1 = require("./CBaijialeBetsComponent");
var CGlobalConf_1 = require("../../../../const/CGlobalConf");
var CBaijialeResultComponent = /** @class */ (function (_super) {
    __extends(CBaijialeResultComponent, _super);
    function CBaijialeResultComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.TIME_SPACE = 400;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeResultComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bDestroy = true;
        Laya.timer.clearAll(this);
    };
    CBaijialeResultComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        return true;
    };
    CBaijialeResultComponent.prototype.process = function (bingoArasIDs, playerWinInfos, caller, callback) {
        _super.prototype.process.call(this);
        this.m_bingoArasIDs = bingoArasIDs;
        this.m_playerWinInfos = playerWinInfos;
        this.m_pCaller = caller;
        this.m_pCallback = callback;
        this.m_isActionFinished = false;
        if (bingoArasIDs && bingoArasIDs.length > 0) {
            for (var _i = 0, bingoArasIDs_1 = bingoArasIDs; _i < bingoArasIDs_1.length; _i++) {
                var id = bingoArasIDs_1[_i];
                this.view.getDeskSelectAreaByIndex(id - 1).visible = true;
            }
        }
        else {
            this._onFinish();
            return;
        }
        var sequentialSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        // 输的区域的币，往赢的区域飞
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._flyToWinArea), ApiUtil_1.ApiUtil.createHandler(this, this._checkDuringTime, [this.TIME_SPACE * 2]));
        // 庄飞钱到赢的区的币上
        // 币再飞到赢家头像上
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._flyToUserArea), ApiUtil_1.ApiUtil.createHandler(this, this._checkDuringTime, [this.TIME_SPACE * 3]));
        // 赢的头像 显示赢了多少 - 先不做
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._onFinish), null);
        // test
        // Laya.timer.once(3000, this, ()=>{
        //     this._onFinish();
        // })
    };
    // 飞到赢区
    CBaijialeResultComponent.prototype._flyToWinArea = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        this.m_startTime = Laya.timer.currTimer;
        var winSp;
        for (var i = 0; i < 5; ++i) {
            if (-1 != this.m_bingoArasIDs.indexOf(i + 1)) {
                winSp = this.view.getDeskSelectAreaAddByID(i);
            }
        }
        if (!winSp) {
            this.m_isActionFinished = true;
            return;
        }
        var hasLoseCoin = false;
        var toPos;
        for (var i = 0; i < 5; ++i) {
            if (-1 == this.m_bingoArasIDs.indexOf(i + 1)) {
                var coinAddedSp = this.view.getDeskSelectAreaAddByID(i);
                var _loop_1 = function (cidx) {
                    var coin_1 = coinAddedSp.getChildAt(cidx);
                    toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(winSp, coin_1);
                    this_1.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_COIN);
                    Laya.Tween.to(coin_1, { x: toPos.x, y: toPos.y }, this_1.TIME_SPACE, Laya.Ease.linearIn, Laya.Handler.create(this_1, function () {
                        Laya.Tween.to(coin_1, { alpha: 0 }, _this.TIME_SPACE);
                        // coin会在每局之后自动清除, 这里不用理
                    }));
                    hasLoseCoin = true;
                };
                var this_1 = this;
                for (var cidx = 0; cidx < coinAddedSp.numChildren; ++cidx) {
                    _loop_1(cidx);
                }
            }
        }
        if (!hasLoseCoin) {
            // 输区没币
            this.m_isActionFinished = true;
        }
    };
    // 币从庄家飞到赢家
    CBaijialeResultComponent.prototype._flyToUserArea = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        this.m_startTime = Laya.timer.currTimer;
        var fromPos = new Laya.Point(300, 300);
        if (!this.m_playerWinInfos || this.m_playerWinInfos.length == 0) {
            this.m_isActionFinished = true;
            return;
        }
        var winSp;
        var toPos;
        var isPlayedFlyToUserSound = false;
        var _loop_2 = function (playerWinInfo) {
            if (playerWinInfo.betAreaWinInfos.length == 0) {
                return "continue";
            }
            var _loop_3 = function (betAreaWinInfo) {
                if (betAreaWinInfo.winCoin <= 0) {
                    return "continue";
                }
                winSp = this_2.view.getDeskSelectAreaAddByID(betAreaWinInfo.id - 1);
                toPos = ApiUtil_1.ApiUtil.getGlobalPos(winSp);
                var coinList = new Array();
                var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(betAreaWinInfo.winCoin, GM_1.GM.coinMap.valueList, 1);
                for (var _i = 0, coinIndexLlist_1 = coinIndexLlist; _i < coinIndexLlist_1.length; _i++) {
                    var coinIndex = coinIndexLlist_1[_i];
                    var img = CoinView_1.CoinView.buildCoin();
                    img.reset();
                    img.isSelf = false;
                    img.index = coinIndex;
                    this_2.m_pController.view.addChild(img);
                    coinList.push(img);
                }
                var isFlyedUserBetCoin = false;
                var _loop_4 = function (coin_2) {
                    coin_2.x = fromPos.x + Math.random() * 60 - 30;
                    coin_2.y = fromPos.y + Math.random() * 60 - 30;
                    // 飞到赢区了
                    Laya.Tween.to(coin_2, { x: toPos.x, y: toPos.y }, this_2.TIME_SPACE, Laya.Ease.linearIn, Laya.Handler.create(this_2, function () {
                        if (_this.m_bDestroy) {
                            coin_2.removeSelf();
                            CoinView_1.CoinView.recoverCoin(coin_2);
                            return;
                        }
                        _this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_COIN);
                        // 飞到头像
                        var locationComponent = _this.m_pController.getComponent(CBaijialeLocationComponent_1.default);
                        var locationItem = locationComponent.getLocationItemByUID(playerWinInfo.playerId);
                        if (!locationItem) {
                            return;
                        }
                        var toUserPos = ApiUtil_1.ApiUtil.getGlobalPos(locationItem);
                        toUserPos.x += locationItem.width * 0.5;
                        Laya.timer.once(_this.TIME_SPACE, _this, function () {
                            // 该玩家在此下注区的下注额也飞到头像
                            if (!isFlyedUserBetCoin) {
                                isFlyedUserBetCoin = true;
                                var betsComponent = _this.m_pController.getComponent(CBaijialeBetsComponent_1.CBaijialeBetsComponent);
                                if (betsComponent) {
                                    // 该玩家已在此区域下标的金币
                                    var betedCoinList = betsComponent.getBetsCoinListByUser(playerWinInfo.playerId);
                                    for (var _i = 0, betedCoinList_1 = betedCoinList; _i < betedCoinList_1.length; _i++) {
                                        var betedCoin = betedCoinList_1[_i];
                                        var betedToUserPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(locationItem, betedCoin);
                                        betedToUserPos.x += locationItem.width * 0.5;
                                        Laya.Tween.to(betedCoin, { x: betedToUserPos.x, y: betedToUserPos.y }, _this.TIME_SPACE);
                                        if (!isPlayedFlyToUserSound) {
                                            isPlayedFlyToUserSound = true;
                                            _this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_COIN_FLY_2_USER);
                                        }
                                    }
                                }
                            }
                            Laya.Tween.to(coin_2, { x: toUserPos.x, y: toUserPos.y }, _this.TIME_SPACE, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                                // 这里的coin是新增的, 需要清除
                                coin_2.removeSelf();
                                CoinView_1.CoinView.recoverCoin(coin_2);
                            }));
                        });
                    }));
                };
                for (var _a = 0, coinList_1 = coinList; _a < coinList_1.length; _a++) {
                    var coin_2 = coinList_1[_a];
                    _loop_4(coin_2);
                } // end for coinList
            };
            // 赢的区域 信息
            for (var _i = 0, _a = playerWinInfo.betAreaWinInfos; _i < _a.length; _i++) {
                var betAreaWinInfo = _a[_i];
                _loop_3(betAreaWinInfo);
            } // end for betAreaWinInfos
        };
        var this_2 = this;
        // 玩家赢信息
        for (var _i = 0, _a = this.m_playerWinInfos; _i < _a.length; _i++) {
            var playerWinInfo = _a[_i];
            _loop_2(playerWinInfo);
        } // end for m_playerWinInfos
        // 显示玩家结算
        Laya.timer.once(this.TIME_SPACE * 2, this, function () {
            if (!_this.m_bDestroy) {
                if (_this.m_pController) {
                    var locationComponent = _this.m_pController.getComponent(CBaijialeLocationComponent_1.default);
                    if (locationComponent) {
                        locationComponent.updateResultTips(_this.m_playerWinInfos);
                    }
                }
            }
        });
        return true;
    };
    CBaijialeResultComponent.prototype._addPointSound = function (sequentialSystem, isBanker, point) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._addPointSoundB, [isBanker, point]), ApiUtil_1.ApiUtil.createHandler(this, this._checkDuringTime, [this.TIME_SPACE]));
    };
    CBaijialeResultComponent.prototype._addPointSoundB = function (isBanker, point) {
        this._resetTime();
        var soundURL = CGlobalConf_1.default.GetPointSound(isBanker, point);
        this.m_pController.soundComponent.playSound(soundURL);
    };
    CBaijialeResultComponent.prototype._addResultSound = function (sequentialSystem, result) {
        sequentialSystem.addSequential(this, Laya.Handler.create(this, this._addResultSoundB, [result]), ApiUtil_1.ApiUtil.createHandler(this, this._checkDuringTime, [this.TIME_SPACE]));
    };
    CBaijialeResultComponent.prototype._addResultSoundB = function (result) {
        this._resetTime();
        if (result == 0) {
            // 和
            this.m_pController.soundComponent.playSound(CGlobalConf_1.default.SOUND_HE);
        }
        else if (1 == result) {
            // 庄赢
            this.m_pController.soundComponent.playSound(CGlobalConf_1.default.SOUND_BANKER_WIN);
        }
        else {
            this.m_pController.soundComponent.playSound(CGlobalConf_1.default.SOUND_XIAN_WIN);
        }
    };
    CBaijialeResultComponent.prototype._resetTime = function () {
        this.m_startTime = Laya.timer.currTimer;
    };
    // 测试持续时间
    CBaijialeResultComponent.prototype._checkDuringTime = function (checkTime) {
        return this.m_isActionFinished || ((Laya.timer.currTimer - this.m_startTime) >= checkTime);
    };
    CBaijialeResultComponent.prototype._isActionFinished = function () {
        return this.m_isActionFinished;
    };
    CBaijialeResultComponent.prototype._onFinish = function () {
        if (this.m_bDestroy) {
            return;
        }
        this.m_pCallback.call(this.m_pCaller);
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CBaijialeResultComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeResultComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../coin/CoinView":3,"../../../../const/CGlobalConf":18,"../../CBaccConf":66,"./CBaijialeBetsComponent":80,"./CBaijialeComponent":83,"./CBaijialeLocationComponent":90}],99:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeRoadComponent = /** @class */ (function (_super) {
    __extends(CBaijialeRoadComponent, _super);
    function CBaijialeRoadComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeRoadComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeRoadComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        // 设置路书的房间数据
        var bottomModel = this.m_pController.view.bottomView.model;
        var roadView = this.m_pController.view.road;
        roadView.model.bottomModel = bottomModel;
        return true;
    };
    CBaijialeRoadComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var bingoArasIDs = GM_1.GM.baccData.lastAreaWinList;
        var roadView = this.m_pController.view.road;
        roadView.model.addRoadData(bingoArasIDs);
    };
    CBaijialeRoadComponent.prototype.reset = function () {
    };
    return CBaijialeRoadComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeRoadComponent;
},{"../../../../../gm/GM":221,"./CBaijialeComponent":83}],100:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeRoomStateComponent = /** @class */ (function (_super) {
    __extends(CBaijialeRoomStateComponent, _super);
    function CBaijialeRoomStateComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CBaijialeRoomStateComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this._setUnvisible();
    };
    CBaijialeRoomStateComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this._setUnvisible();
        return true;
    };
    CBaijialeRoomStateComponent.prototype.process = function () {
        _super.prototype.process.call(this);
    };
    CBaijialeRoomStateComponent.prototype._setUnvisible = function () {
        var len = this.m_pController.view.roomState.numChildren;
        for (var i = 0; i < len; ++i) {
            var sp = this.m_pController.view.roomState.getChildAt(i);
            if ((sp.name != 'bg')) {
                sp.visible = false;
            }
        }
    };
    CBaijialeRoomStateComponent.prototype.updateCountDown = function (v) {
        if (!this.m_countDownStart) {
            if (v > 0) {
                this.m_countDownStart = true;
                this.m_pController.view.roomState_countDown.visible = true;
            }
        }
        if (!this.m_countDownStart) {
            return;
        }
        if (v < 0) {
            v = 0;
        }
        this.m_pController.view.roomState_countDown_lbl.text = v.toFixed(0);
        // this.m_pController.view.roomState_countDown_circel.rotation+=5;
        var pos = (24 - (v >> 0));
        if (pos > 24)
            pos = 24;
        if (pos < 0) {
            pos = 0;
        }
        if (v <= 0) {
            if (this.m_hideCountDownTime == -1) {
                this.m_hideCountDownTime = Laya.timer.currTimer + 1000;
            }
        }
        if (this.m_hideCountDownTime != -1 && Laya.timer.currTimer > this.m_hideCountDownTime) { // 这里不能用>= , 
            this.setCountDownEndState();
        }
        this.m_pController.view.roomState_countDown_circel.gotoAndStop(pos);
        // this.m_pController.view.roomState_countDown.visible = !needHide;
    };
    CBaijialeRoomStateComponent.prototype.setGamingState = function () {
        console.log('roomstate->gaming');
        this._setUnvisible();
        this.m_pController.view.roomState_gaming.visible = true;
    };
    CBaijialeRoomStateComponent.prototype.setShuffleState = function () {
        console.log('roomstate->shuffle');
        this._setUnvisible();
        this.m_pController.view.roomState_shuffle.visible = true;
    };
    CBaijialeRoomStateComponent.prototype.setResultState = function () {
        console.log('roomstate->result');
        this._setUnvisible();
        this.m_pController.view.roomState_result.visible = true;
    };
    CBaijialeRoomStateComponent.prototype.setCountDownState = function (time) {
        console.log('roomstate->countdown');
        this._setUnvisible();
        this.m_hideCountDownTime = -1;
        this.m_countDownStart = false;
        this.updateCountDown(time);
        // this.m_pController.view.roomState_countDown.visible = true;
    };
    CBaijialeRoomStateComponent.prototype.setCountDownEndState = function () {
        console.log('roomstate->countdownEnd');
        this.m_countDownStart = false;
        GM_1.GM.baccData.dealCountDownData.second = -1;
        this.setGamingState();
    };
    return CBaijialeRoomStateComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeRoomStateComponent;
},{"../../../../../gm/GM":221,"./CBaijialeComponent":83}],101:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPokerView_1 = require("../../../../common/CPokerView");
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var CBaccConf_1 = require("../../CBaccConf");
// 洗牌动画
var CBaijialeShuffleAnimationComponent = /** @class */ (function (_super) {
    __extends(CBaijialeShuffleAnimationComponent, _super);
    function CBaijialeShuffleAnimationComponent(pController) {
        var _this = _super.call(this, pController) || this;
        // 牌盒 ：牌的缩放0.45
        // 发出来的牌 : 缩在放0.6
        _this.BLUE_X_DELTA = 10; // (poker.width *0.6 - poker.width*0.45)/2
        _this.PORT_POKER_SCALC = 0.45; // 牌开始缩放
        _this.POKER_SCALC = 0.7; // 当牌的box为1时， 牌的缩放
        _this.DEAL_SCALC = 0.6; // 发出来的牌的缩放
        _this.BLUE_POS_Y = 145; // 蓝牌位置
        _this.POKER_POS_Y = 255; // 发出来的牌的位置
        _this.POKER_COUNT = 20; // 发出来的牌数
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeShuffleAnimationComponent.prototype.reset = function () {
    };
    CBaijialeShuffleAnimationComponent.prototype.onDestroy = function () {
        this.m_bDestroy = true;
        _super.prototype.onDestroy.call(this);
        Laya.timer.clearAll(this);
    };
    CBaijialeShuffleAnimationComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeShuffleAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        this.m_pokerView = new CPokerView_1.default(null);
        this.m_pokerData = new CPokerData_1.CPokerData();
        return true;
    };
    CBaijialeShuffleAnimationComponent.prototype.process = function (caller, callback) {
        this.m_pokerList = new Array();
        this.m_pCaller = caller;
        this.m_pCallback = callback;
        var seqSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        // 发蓝牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [1]), null); // 开始飞
        this._addDealPokerSeq(seqSystem, 0, true, 0);
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        // 发牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始飞
        for (var i = 0; i < 20; ++i) {
            this._addDealPokerSeq(seqSystem, i, false, 100);
        }
        seqSystem.addSequential(this, ApiUtil_1.ApiUtil.createHandler(this, this._hideEmitterPoker), null); // 隐藏发牌器的牌
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil_1.ApiUtil.createHandler(this, this._isTimeFinish, [200])); // 再等0.2秒
        // 收牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始收      
        seqSystem.addSequential(this, Laya.Handler.create(this, this.__recoverPoker), null); // 收牌
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等收完      
        seqSystem.addSequential(this, Laya.Handler.create(this, this._closePoker), null); // 盖牌      
        // seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil.createHandler(this, this._isTimeFinish, [200])); // 再等0.2秒
        // 飞蓝牌到牌底
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [1]), null); // 开始飞
        seqSystem.addSequential(this, Laya.Handler.create(this, this._flyToPokerBottom), null);
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        // 飞牌盒
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始飞        
        seqSystem.addSequential(this, Laya.Handler.create(this, this._flyToPort), null); // 飞向牌合
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完      
        seqSystem.addSequential(this, ApiUtil_1.ApiUtil.createHandler(this, this._showEmitterPoker), null); // 隐藏发牌器的牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._onFinished), null); // finsh                
    };
    // ========================== 飞牌
    CBaijialeShuffleAnimationComponent.prototype._addDealPokerSeq = function (seqSystem, index, isBlue, waitTime) {
        seqSystem.addSequential(this, Laya.Handler.create(this, this.__dealPoker, [index, isBlue]), null);
        if (waitTime > 0) {
            seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil_1.ApiUtil.createHandler(this, this._isTimeFinish, [waitTime])); // 发下一张牌的间隔
        }
    };
    CBaijialeShuffleAnimationComponent.prototype.__dealPoker = function (index, isBlue) {
        var _this = this;
        if (this.m_bDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var poker = this.__createPoker(index);
        this.m_pokerView.view = poker;
        var fromObj = this.view.desk_emitter_pokerBlue; // 起始点
        var fromPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(fromObj, this.m_pController.view);
        poker.x = fromPos.x;
        poker.y = fromPos.y;
        var toX = 44 + index * 30;
        var toY = this.POKER_POS_Y; // 使用global坐标, scene的坐标
        var fromScale = this.PORT_POKER_SCALC / this.POKER_SCALC;
        poker.scaleX = fromScale;
        poker.scaleY = fromScale;
        if (isBlue) {
            toX = fromPos.x - this.BLUE_X_DELTA;
            toY = this.BLUE_POS_Y;
            this.m_pokerView.updateView(null, false, false, true, false, false, true);
            this.m_blueView = poker;
        }
        else {
            this.m_pokerData = this.__randomPokerData();
            this.m_pokerView.updateView(this.m_pokerData, false, false, true, false, true);
            this.m_pokerList.push(poker);
        }
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_DEAL_POKER);
        // box的scale是1， 牌的scalc是0.7
        var toScale = this.DEAL_SCALC / this.POKER_SCALC;
        Laya.Tween.to(poker, { x: toX, y: toY, scaleX: toScale, scaleY: toScale }, 150, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    CBaijialeShuffleAnimationComponent.prototype.__createPoker = function (index) {
        var poker = Laya.Pool.getItemByClass('PokerViewUI', layaMaxUI_1.ui.common.PokerViewUI);
        this.m_pController.view.addChild(poker);
        return poker;
    };
    CBaijialeShuffleAnimationComponent.prototype.__randomPokerData = function () {
        this.m_pokerData.id = 0;
        var color = ((Math.random() * 4 + 1) >> 0);
        var point = ((Math.random() * 13 + 1) >> 0);
        var pointStr = point.toString();
        if (pointStr.length == 1) {
            pointStr = '0' + pointStr;
        }
        this.m_pokerData.poker = color.toString() + pointStr;
        return this.m_pokerData;
    };
    // ============================收牌
    CBaijialeShuffleAnimationComponent.prototype.__recoverPoker = function () {
        var _this = this;
        if (this.m_bDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var times = 0;
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_DEAL_POKER);
        Laya.timer.loop(100, this, function () {
            times++;
            if (_this.m_pController && _this.m_pController.soundComponent) {
                _this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_DEAL_POKER);
            }
            if (times > 5) {
                Laya.timer.clearAll(_this);
            }
        });
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            var toObj = this.view.desk_emitter_pokerBlue; // 目标点
            var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, this.m_pController.view);
            // let toScale:number = 6/7;
            Laya.Tween.to(poker, { x: toPos.x - this.BLUE_X_DELTA, y: this.POKER_POS_Y }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_flyCount++;
            }));
        }
    };
    // ======================盖牌
    CBaijialeShuffleAnimationComponent.prototype._closePoker = function () {
        if (this.m_bDestroy) {
            return;
        }
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            this.m_pokerView.view = poker;
            this.m_pokerView.updateView(this.m_pokerData, true, false, false, false, true);
        }
    };
    // 飞到牌底
    CBaijialeShuffleAnimationComponent.prototype._flyToPokerBottom = function () {
        var _this = this;
        if (this.m_bDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var poker = this.m_blueView;
        var toY = this.POKER_POS_Y;
        // let toScale:number = 4.5/7;
        this.m_pController.soundComponent.playSound(CBaccConf_1.default.SOUND_DEAL_POKER);
        Laya.Tween.to(poker, { y: toY }, 150, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    // 飞向牌盒 
    CBaijialeShuffleAnimationComponent.prototype._flyToPort = function () {
        var _this = this;
        if (this.m_bDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var toObj = this.view.desk_emitter_pokerBlue; // 目标点
        var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, this.m_pController.view);
        var toScale = this.PORT_POKER_SCALC / this.POKER_SCALC;
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            Laya.Tween.to(poker, { x: toPos.x, y: toPos.y, scaleX: toScale, scaleY: toScale }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_flyCount++;
            }));
        }
        Laya.Tween.to(this.m_blueView, { x: toPos.x, y: toPos.y, scaleX: toScale, scaleY: toScale }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    // 飞计数
    CBaijialeShuffleAnimationComponent.prototype._startFly = function (targetCount) {
        this.m_flyCount = 0;
        this.m_targetFlyCount = targetCount;
    };
    CBaijialeShuffleAnimationComponent.prototype._isFlyFinish = function () {
        return this.m_flyCount >= this.m_targetFlyCount;
    };
    // 等待时间
    CBaijialeShuffleAnimationComponent.prototype._waitTime = function () {
        this.m_startTime = Laya.timer.currTimer;
        return true;
    };
    CBaijialeShuffleAnimationComponent.prototype._isTimeFinish = function (time) {
        return Laya.timer.currTimer - this.m_startTime >= time;
    };
    CBaijialeShuffleAnimationComponent.prototype._hideEmitterPoker = function () {
        this.m_pController.view.desk_emitter_poker.visible = false;
    };
    CBaijialeShuffleAnimationComponent.prototype._showEmitterPoker = function () {
        this.m_pController.view.desk_emitter_poker.visible = true;
    };
    // all finish
    CBaijialeShuffleAnimationComponent.prototype._onFinished = function () {
        if (this.m_bDestroy) {
            return;
        }
        if (this.m_pokerList && this.m_pokerList.length > 0) {
            for (var _i = 0, _a = this.m_pokerList; _i < _a.length; _i++) {
                var poker = _a[_i];
                if (poker) {
                    Laya.Pool.recover('PokerViewUI', poker);
                    poker.removeSelf();
                }
            }
        }
        if (this.m_blueView) {
            Laya.Pool.recover('PokerViewUI', this.m_blueView);
            this.m_blueView.removeSelf();
        }
        if (this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCallback = null;
    };
    return CBaijialeShuffleAnimationComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeShuffleAnimationComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../../ui/layaMaxUI":271,"../../../../common/CPokerView":9,"../../../_commonModel/CPokerData":21,"../../CBaccConf":66,"./CBaijialeComponent":83}],102:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CBaijialeShuffleAnimationComponent_1 = require("./CBaijialeShuffleAnimationComponent");
// 洗牌
var CBaijialeShuffleComponent = /** @class */ (function (_super) {
    __extends(CBaijialeShuffleComponent, _super);
    function CBaijialeShuffleComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CBaijialeShuffleComponent.prototype.reset = function () {
    };
    CBaijialeShuffleComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeShuffleComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new CBaijialeShuffleAnimationComponent_1.default(this.m_pController));
    };
    CBaijialeShuffleComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CBaijialeShuffleComponent.prototype.process = function (caller, callback) {
        this.m_pCaller = caller;
        this.m_pCallback = callback;
        this.getComponent(CBaijialeShuffleAnimationComponent_1.default).process(this, this._onFinished);
    };
    CBaijialeShuffleComponent.prototype._onFinished = function () {
        if (this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CBaijialeShuffleComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeShuffleComponent;
},{"./CBaijialeComponent":83,"./CBaijialeShuffleAnimationComponent":101}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CPathBacc_1 = require("../../CPathBacc");
var CGlobalConf_1 = require("../../../../const/CGlobalConf");
var CPath_1 = require("../../../../const/CPath");
var log_1 = require("../../../../../hbcore/framework/log");
var CBaijialeSoundComponent = /** @class */ (function (_super) {
    __extends(CBaijialeSoundComponent, _super);
    function CBaijialeSoundComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CBaijialeSoundComponent.prototype.reset = function () {
    };
    CBaijialeSoundComponent.prototype.onDestroy = function () {
        this.m_bDestroy = true;
        this.m_pSoundSystem.stopAllSound();
        this.m_pSoundSystem = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.m_bgPlayFinishHandler);
        this.m_bgPlayFinishHandler = null;
        _super.prototype.onDestroy.call(this);
    };
    CBaijialeSoundComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBaijialeSoundComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        this.m_pSoundSystem = GM_1.GM.instance.gameStage.soundSystem;
        this.m_bgList = [CGlobalConf_1.default.SOUND_BG1, CGlobalConf_1.default.SOUND_BG2, CGlobalConf_1.default.SOUND_BG3];
        this.m_bgIndex = -1;
        this.m_bgPlayFinishHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onBgPlayFinished);
        return true;
    };
    CBaijialeSoundComponent.prototype.process = function (lastMusicIndex) {
        if (lastMusicIndex === void 0) { lastMusicIndex = 0; }
        // start
        this.m_bgIndex = lastMusicIndex;
        this._playNextBg();
    };
    CBaijialeSoundComponent.prototype._playNextBg = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        if (this.m_bgIndex == -1) {
            this.m_bgIndex = Math.random() * this.m_bgList.length;
            this.m_bgIndex = this.m_bgIndex >> 0;
        }
        else {
            // 随机出不同于上一个index
            var arr = [];
            for (var i = 0; i < this.m_bgList.length; ++i) {
                if (this.m_bgIndex != i) {
                    arr.push(i);
                }
            }
            var ranIdx = Math.random() * arr.length;
            ranIdx = ranIdx >> 0;
            this.m_bgIndex = arr[ranIdx];
        }
        var path = CPath_1.CPath.getSoundPath(this.m_bgList[this.m_bgIndex]);
        var res = Laya.loader.getRes(path);
        if (!res) {
            Laya.loader.load(path, Laya.Handler.create(this, function () {
                if (_this.m_bDestroy) {
                    return;
                }
                log_1.log.log('播放音乐 ');
                _this.soundCannel = _this.m_pSoundSystem.playMusic(path, 1);
                if (_this.soundCannel) {
                    _this.soundCannel.completeHandler = _this.m_bgPlayFinishHandler;
                }
                else {
                    log_1.log.log('音乐 soundcannel null ');
                    _this._onBgPlayFinished();
                }
            }));
        }
        else {
            log_1.log.log('音乐加载, 播放');
            this.soundCannel = this.m_pSoundSystem.playMusic(path, 1);
            if (this.soundCannel) {
                this.soundCannel.completeHandler = this.m_bgPlayFinishHandler;
            }
            else {
                log_1.log.log('音乐 soundcannel null ');
                this._onBgPlayFinished();
            }
        }
    };
    CBaijialeSoundComponent.prototype._onBgPlayFinished = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        Laya.timer.once(3000, this, function () {
            _this._playNextBg();
        });
    };
    CBaijialeSoundComponent.prototype.playSound = function (path, isDontPlayWhenPlaying, isOverrideSame, multPlaySameInterval, finisiHandler) {
        if (isDontPlayWhenPlaying === void 0) { isDontPlayWhenPlaying = false; }
        if (isOverrideSame === void 0) { isOverrideSame = false; }
        if (multPlaySameInterval === void 0) { multPlaySameInterval = 0; }
        if (finisiHandler === void 0) { finisiHandler = null; }
        if (this.m_bDestroy) {
            return;
        }
        path = CPathBacc_1.default.getSoundPath(path);
        this.m_pSoundSystem.playSound(path, isDontPlayWhenPlaying, isOverrideSame, multPlaySameInterval, finisiHandler);
    };
    CBaijialeSoundComponent.prototype.openSound = function () {
    };
    CBaijialeSoundComponent.prototype.closeSound = function () {
    };
    return CBaijialeSoundComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeSoundComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../../hbcore/util/ApiUtil":266,"../../../../const/CGlobalConf":18,"../../../../const/CPath":19,"../../CPathBacc":67,"./CBaijialeComponent":83}],104:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CGameTopView_1 = require("../../../../common/CGameTopView");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeRuleView_1 = require("./../rule/CBaijialeRuleView");
var GameNetResponse_1 = require("../../../../../gm/GameNetResponse");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CBaijialeComponent_1 = require("./CBaijialeComponent");
var CLookPokersView_1 = require("../../../_commonView/lookPokers/CLookPokersView");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CBaijialeModel_1 = require("../CBaijialeModel");
var CBetsHistoryData_1 = require("../../../_commonModel/CBetsHistoryData");
var CBetsHistroyView_1 = require("../../../_commonView/betsHistory/CBetsHistroyView");
var SFSClient_1 = require("../../../../../hbcore/net/SFSClient");
var CBaijialeTopComponent = /** @class */ (function (_super) {
    __extends(CBaijialeTopComponent, _super);
    function CBaijialeTopComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CBaijialeTopComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.view.topView.unregister();
        this.view.topView = null;
        this.sfsGame.Emitter.off(this, GameNetResponse_1.GameConf.ExitGame);
        this.sfsGame.Emitter.off(this, CBaijialeHallModel_1.BaccNetConf.LookPokers);
        this.sfsGame.Emitter.off(this, CBaijialeHallModel_1.BaccNetConf.History);
        this.sfsGame.Emitter.off(this, SFSClient_1.default.EVENT_SIGNAL);
    };
    CBaijialeTopComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.m_savePageCache = new Object();
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CBaijialeTopComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_exited = false;
        this.sfsGame.Emitter.on(this, GameNetResponse_1.GameConf.ExitGame, this._onExitGameResponse);
        this.sfsGame.Emitter.on(this, CBaijialeHallModel_1.BaccNetConf.LookPokers, this._onLookPokersResponse);
        this.sfsGame.Emitter.on(this, CBaijialeHallModel_1.BaccNetConf.History, this._onHistroyResponse);
        this.sfsGame.Emitter.on(this, SFSClient_1.default.EVENT_SIGNAL, this._onSignalUpdate);
        // 变化部分
        var topBox = this.view.topViewBase;
        this.view.topView = new CGameTopView_1.default(topBox);
        this.view.topView.register(this, this.onReturn_uiHandler, this.onSound_uiHandler, this.onRule_uiHandler, this.onBetsHistroy_uiHandler, this.onLookAll_uiHandler);
        this.view.topView.record_btn.visible = GM_1.GM.baccData.enterData.stageId != 0; // 体验房不显示我的下注
        this._updateSound();
        return true;
    };
    CBaijialeTopComponent.prototype._onSignalUpdate = function (signalLevel) {
        if (this.view && this.view.topView) {
            this.view.topView.updateSignal(signalLevel);
        }
    };
    CBaijialeTopComponent.prototype.exitRoom = function () {
        this.onReturn_uiHandler(false);
    };
    CBaijialeTopComponent.prototype.onReturn_uiHandler = function (fromUI) {
        if (fromUI === void 0) { fromUI = true; }
        if (this.m_exited) {
            return;
        }
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.GameConf.ExitGame)) {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get('net_res_busy'));
            return;
        }
        this.m_pController.netState.setNetStateBusy(GameNetResponse_1.GameConf.ExitGame);
        this.sfsGame.send(GameNetResponse_1.GameConf.ExitGame, {}, true);
        fromUI && GM_1.GM.playButtonSound();
    };
    CBaijialeTopComponent.prototype._onExitGameResponse = function (param) {
        this.m_pController.netState.setNetStateIdle(GameNetResponse_1.GameConf.ExitGame);
        var newData = CBaseNet_1.default.Clone(param, GameNetResponse_1.CExitGame);
        if (newData.isError == false) {
            this.m_exited = true;
            GM_1.GM.instance.userInfo.balance = param.balance;
            // 退出成功
            GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_HALL);
        }
        else {
            CMessageBox_1.default.instance.showNetError(newData.errorCode.toString());
        }
    };
    CBaijialeTopComponent.prototype.onSound_uiHandler = function () {
        GM_1.GM.playButtonSound();
        GM_1.GM.instance.gameStage.soundSystem.isMuted = !GM_1.GM.instance.gameStage.soundSystem.isMuted;
        this._updateSound();
        var userSetting = GM_1.GM.instance.userInfo.userSetting;
        userSetting.bSound = !GM_1.GM.instance.gameStage.soundSystem.isMuted;
        GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.UserConfig, { custom: JSON.stringify(userSetting) });
    };
    CBaijialeTopComponent.prototype._updateSound = function () {
        var pView = this.m_pController.view;
        if (!GM_1.GM.instance.gameStage.soundSystem.isMuted) {
            pView.topView.sound_btn.visible = true;
            pView.topView.sound_close_btn.visible = false;
        }
        else {
            pView.topView.sound_btn.visible = false;
            pView.topView.sound_close_btn.visible = true;
        }
    };
    // rule
    CBaijialeTopComponent.prototype.onRule_uiHandler = function () {
        GM_1.GM.playButtonSound();
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = true;
        openComponent.process(CBaijialeRuleView_1.default, CBaijialeRuleView_1.default.SIGN, CBaijialeTopComponent.ViewIndex.Rule);
    };
    // ============================================bets histroy========================================================
    CBaijialeTopComponent.prototype.onBetsHistroy_uiHandler = function () {
        GM_1.GM.playButtonSound();
        if (this.m_pController.netState.isNetStateBusy(CBaijialeHallModel_1.BaccNetConf.History)) {
            return;
        }
        this.m_pController.netState.setNetStateBusy(CBaijialeHallModel_1.BaccNetConf.History);
        GM_1.GM.instance.network.sfsGame.send(CBaijialeHallModel_1.BaccNetConf.History, { gameCode: GM_1.GM.baccData.enterData.gameCode }, true);
    };
    CBaijialeTopComponent.prototype._onHistroyResponse = function (data) {
        var newData = CBaseNet_1.default.Clone(data, CBetsHistoryData_1.CBetsHistroyListData);
        this.m_pController.netState.setNetStateIdle(CBaijialeHallModel_1.BaccNetConf.History);
        if (newData.isError) {
            GM_1.GM.instance.messageBox.showNetError(newData.errorCode);
            return;
        }
        GM_1.GM.baccData.updateBetsHistroyData(newData);
        var viewIndex = CBaijialeTopComponent.ViewIndex.Record;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = false;
        openComponent.process(CBetsHistroyView_1.default, CBetsHistroyView_1.default.SIGN, viewIndex);
        var view = openComponent.getView(viewIndex).view;
        view.model.histroyList = newData.history;
        openComponent.showView(Laya.stage, viewIndex);
    };
    // ====================================================================================================
    CBaijialeTopComponent.prototype.triggerLookAll = function () {
        this.onLookAll_uiHandler();
    };
    CBaijialeTopComponent.prototype.onLookAll_uiHandler = function () {
        GM_1.GM.playButtonSound();
        for (var key in this.m_savePageCache) {
            delete this.m_savePageCache[key];
        }
        this._queryLookPokers(0, 0);
    };
    CBaijialeTopComponent.prototype._queryLookPokers = function (minPage, maxPage) {
        console.log('query in : minpage ' + minPage + ', maxpage :' + maxPage);
        if (this.m_pController.netState.isNetStateBusy(CBaijialeHallModel_1.BaccNetConf.LookPokers)) {
            return;
        }
        if (minPage > maxPage) {
            var temp = minPage;
            minPage = maxPage;
            maxPage = temp;
        }
        // 限制请求页数最大值
        var MAX_PAGE = ((CBaijialeModel_1.CBaccData.MAX_POKER_COUNT - 1) / 49 + 1) >> 0;
        var MAX_PAGE_IDX = MAX_PAGE - 1; // index
        if (minPage > MAX_PAGE_IDX) {
            minPage = MAX_PAGE_IDX;
        }
        if (maxPage > MAX_PAGE_IDX) {
            maxPage = MAX_PAGE_IDX;
        }
        // 缓存数据。已请求过的数据不再请求
        var hasMin = this.m_savePageCache.hasOwnProperty(minPage.toString());
        var hasMax = this.m_savePageCache.hasOwnProperty(maxPage.toString());
        if (hasMin && hasMax) {
            return;
        }
        if (hasMin) {
            minPage = maxPage;
        }
        if (hasMax) {
            maxPage = minPage;
        }
        this.m_savePageCache[minPage] = true;
        this.m_savePageCache[maxPage] = true;
        console.log('query page info : minpage ' + minPage + ', maxpage :' + maxPage);
        var begin = 0;
        var end = 0;
        begin = 1 + minPage * 49;
        end = (maxPage + 2) * 49;
        if (begin < 0)
            begin = 0;
        if (end > CBaijialeModel_1.CBaccData.MAX_POKER_COUNT)
            end = CBaijialeModel_1.CBaccData.MAX_POKER_COUNT;
        console.log('query page info : begin ' + begin + ', end :' + end);
        this.m_pController.netState.setNetStateBusy(CBaijialeHallModel_1.BaccNetConf.LookPokers);
        GM_1.GM.instance.network.sfsGame.send(CBaijialeHallModel_1.BaccNetConf.LookPokers, { begin: begin, end: end }, true);
    };
    // net response
    CBaijialeTopComponent.prototype._onLookPokersResponse = function (params) {
        var _this = this;
        var newData = CBaseNet_1.default.Clone(params, CBaijialeModel_1.CLookPokerData);
        this.m_pController.netState.setNetStateIdle(CBaijialeHallModel_1.BaccNetConf.LookPokers);
        if (newData.isError) {
            GM_1.GM.instance.messageBox.showNetError(newData.errorMessage);
            return;
        }
        GM_1.GM.baccData.updateLookPokerData(newData);
        var viewIndex = CBaijialeTopComponent.ViewIndex.LookPokers;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        var viewData = openComponent.getView(viewIndex);
        var view;
        if (viewData) {
            // 界面已打开, 直接更新数据
            view = viewData.view;
            view.model.pokerList = GM_1.GM.baccData.lookPokerData;
        }
        else {
            // 界面没打开, 先创建 界面
            openComponent.autoAddToParent = false;
            openComponent.process(CLookPokersView_1.default, CLookPokersView_1.default.SIGN, viewIndex);
            view = openComponent.getView(viewIndex).view;
            // 设置界面数据
            view.model.pokerList = GM_1.GM.baccData.lookPokerData;
            // 显示界面
            openComponent.showView(Laya.stage, viewIndex);
            // 列表滚动, 查询数据
            view.queryHandler = new Laya.Handler(this, function (data) {
                // min : minPage, max : maxPage, 当前列表跨越的两个page
                _this._queryLookPokers(data.min, data.max);
            }, null, false);
        }
    };
    CBaijialeTopComponent.ViewIndex = {
        Rule: 0, Record: 1, LookPokers: 2
    };
    return CBaijialeTopComponent;
}(CBaijialeComponent_1.default));
exports.default = CBaijialeTopComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../../gm/GameNetResponse":223,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/net/SFSClient":264,"../../../../common/CGameTopView":5,"../../../../common/CMessageBox":8,"../../../../common/component/COpenSubViewComponent":16,"../../../../net/CBaseNet":216,"../../../_commonModel/CBetsHistoryData":20,"../../../_commonView/betsHistory/CBetsHistroyView":26,"../../../_commonView/lookPokers/CLookPokersView":34,"../../hall/CBaijialeHallModel":69,"../CBaijialeModel":76,"./../rule/CBaijialeRuleView":121,"./CBaijialeComponent":83}],105:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var procedure_1 = require("../../../../../hbcore/framework/procedure");
/**
 * ...
 * @author auto
 */
var CBjlProcedureBase = /** @class */ (function (_super) {
    __extends(CBjlProcedureBase, _super);
    function CBjlProcedureBase() {
        return _super.call(this) || this;
    }
    CBjlProcedureBase.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        this.m_fsm = fsm;
        this.controller = fsm.owner;
    };
    return CBjlProcedureBase;
}(procedure_1.procedure.CProcedureBase));
exports.default = CBjlProcedureBase;
},{"../../../../../hbcore/framework/procedure":258}],106:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var Fsm_1 = require("../../../../../hbcore/framework/Fsm");
var CFsmSystem = Fsm_1.fsm.CFsmSystem;
var CBjlProcedureEntry_1 = require("./CBjlProcedureEntry");
var CBjlProcedureOpenPokers_1 = require("./CBjlProcedureOpenPokers");
var CBjlProcedureResult_1 = require("./CBjlProcedureResult");
var CBjlProcedureShuffle_1 = require("./CBjlProcedureShuffle");
var CComponent_1 = require("../../../../common/component/CComponent");
var CBjlProcedureDealPokersQuickly_1 = require("./CBjlProcedureDealPokersQuickly");
var CBjlProcedureOpenPokersQuickly_1 = require("./CBjlProcedureOpenPokersQuickly");
var CBjlProcedureResultQuickly_1 = require("./CBjlProcedureResultQuickly");
var CBjlProcedureShuffleQuickly_1 = require("./CBjlProcedureShuffleQuickly");
var CBjlProcedureDealPokers_1 = require("./CBjlProcedureDealPokers");
var CBjlProcedureWaitDealPokers_1 = require("./CBjlProcedureWaitDealPokers");
var CBjlProcedureReset_1 = require("./CBjlProcedureReset");
var CBjlProcedureRecoverPoker_1 = require("./CBjlProcedureRecoverPoker");
var CBjlProcedureComponent = /** @class */ (function (_super) {
    __extends(CBjlProcedureComponent, _super);
    function CBjlProcedureComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_bProcessByParent = false;
        _this.m_pController = pController;
        return _this;
    }
    CBjlProcedureComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.stopProcedure();
        this.m_pController = null;
        this.m_fsmSystem = null;
    };
    CBjlProcedureComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_fsmSystem = GM_1.GM.instance.gameStage.getSystem(CFsmSystem);
        this.m_procedureList = [
            new CBjlProcedureEntry_1.default(),
            new CBjlProcedureDealPokersQuickly_1.default(),
            new CBjlProcedureWaitDealPokers_1.default(),
            new CBjlProcedureDealPokers_1.default(),
            new CBjlProcedureOpenPokersQuickly_1.default(),
            new CBjlProcedureOpenPokers_1.default(),
            new CBjlProcedureResultQuickly_1.default(),
            new CBjlProcedureResult_1.default(),
            new CBjlProcedureRecoverPoker_1.default(),
            new CBjlProcedureReset_1.default(),
            new CBjlProcedureShuffle_1.default(),
            new CBjlProcedureShuffleQuickly_1.default(),
        ];
        return true;
    };
    CBjlProcedureComponent.prototype.process = function () {
        this.startProcedure(CBjlProcedureEntry_1.default);
    };
    CBjlProcedureComponent.prototype.startProcedure = function (cls) {
        this.m_procedureManager = this.m_fsmSystem.createFsm('bjlProcedure', this.m_pController, this.m_procedureList);
        this.m_procedureManager.start(cls);
        // this.m_procedureManager = this.m_fsmSystem.createProcedure("bjlProcedure", this.m_procedureList);		
        // this.m_procedureManager.startProcedure(cls);
    };
    CBjlProcedureComponent.prototype.stopProcedure = function () {
        if (this.m_procedureManager) {
            this.m_fsmSystem.destroyFsm(this.m_procedureManager.Name);
            // this.m_fsmSystem.removeProcedure(this.m_procedureManager.name);
            this.m_procedureManager = null;
        }
    };
    return CBjlProcedureComponent;
}(CComponent_1.CComponent));
exports.default = CBjlProcedureComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Fsm":249,"../../../../common/component/CComponent":15,"./CBjlProcedureDealPokers":107,"./CBjlProcedureDealPokersQuickly":108,"./CBjlProcedureEntry":109,"./CBjlProcedureOpenPokers":110,"./CBjlProcedureOpenPokersQuickly":111,"./CBjlProcedureRecoverPoker":112,"./CBjlProcedureReset":113,"./CBjlProcedureResult":114,"./CBjlProcedureResultQuickly":115,"./CBjlProcedureShuffle":116,"./CBjlProcedureShuffleQuickly":117,"./CBjlProcedureWaitDealPokers":118}],107:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var CBjlProcedureOpenPokers_1 = require("./CBjlProcedureOpenPokers");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeDealPortComponent_1 = require("../component/CBaijialeDealPortComponent");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CBaccConf_1 = require("../../CBaccConf");
var CBaijialeBottomComponent_1 = require("../component/CBaijialeBottomComponent");
/**
 * ...
 * @author auto
 */
var CBjlProcedureDealPokers = /** @class */ (function (_super) {
    __extends(CBjlProcedureDealPokers, _super);
    function CBjlProcedureDealPokers() {
        return _super.call(this) || this;
    }
    CBjlProcedureDealPokers.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureDealPokers.prototype.onEnter = function (fsm) {
        var _this = this;
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 发牌');
        this.m_bFinished = false;
        this.m_bDestroy = false;
        GM_1.GM.gameData.addCurRound();
        if (GM_1.GM.gameData.isCurRound) {
            this.controller.dealComponent.process();
            var backPokerData = GM_1.GM.baccData.dealPokerData.backPokers;
            this.controller.getComponent(CBaijialeDealPortComponent_1.default).process(backPokerData);
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('please_bets'), -1, 0, '#00aa00', true, this.controller.view);
            this.controller.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_START_ALERT, false, false, 0, Laya.Handler.create(this, function () {
                if (!_this.m_bDestroy) {
                    _this.controller.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_START);
                }
            }));
        }
        else {
            // 
        }
        this.controller.betsComponent.openBets();
        this.m_lastCDTime = 25;
        this.controller.roomStateComponent.setCountDownState(25);
        this.controller.getComponent(CBaijialeBottomComponent_1.default).process();
    };
    CBjlProcedureDealPokers.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.controller.netComponent.hasProtocol()) {
            var nextPro = this.controller.netComponent.nextProtocol();
            switch (nextPro.protocol) {
                case CBaijialeHallModel_1.BaccNetConf.BetsBroadcast:
                    this.controller.betsComponent.addBetsCoinByBroadcast(nextPro.data);
                    break;
                case CBaijialeHallModel_1.BaccNetConf.OpenPoker:
                    this.changeProcedure(fsm, CBjlProcedureOpenPokers_1.default);
                    break;
                case CBaijialeHallModel_1.BaccNetConf.StartBetCountDown:
                    this.m_lastCDTime = 25;
                    this.controller.roomStateComponent.setCountDownState(25);
                    break;
            }
        }
        var dealCountDownData = GM_1.GM.baccData.dealCountDownData;
        if (dealCountDownData && dealCountDownData.second >= 0) {
            var coundDownNow = GM_1.GM.baccData.dealCountDownData.second;
            if (coundDownNow < this.m_lastCDTime) {
                this.controller.soundComponent.playSound(CBaccConf_1.default.SOUND_COUNT_DOWN);
                this.m_lastCDTime = coundDownNow;
            }
            this.controller.roomStateComponent.updateCountDown(coundDownNow);
        }
    };
    CBjlProcedureDealPokers.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        this.controller.roomStateComponent.setCountDownEndState(); // updateCount里面1秒后才会重置和隐藏倒计时, 有可能已经切换到openPoker状态了, 不会重置
        this.controller.betsComponent.closeBets();
    };
    CBjlProcedureDealPokers.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
        this.m_bDestroy = true;
    };
    return CBjlProcedureDealPokers;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureDealPokers;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../CBaccConf":66,"../../hall/CBaijialeHallModel":69,"../component/CBaijialeBottomComponent":82,"../component/CBaijialeDealPortComponent":86,"./CBjlProcedureBase":105,"./CBjlProcedureOpenPokers":110}],108:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var CBjlProcedureOpenPokers_1 = require("./CBjlProcedureOpenPokers");
var log_1 = require("../../../../../hbcore/framework/log");
var EBjlProcedureKey_1 = require("./EBjlProcedureKey");
var CBjlProcedureOpenPokersQuickly_1 = require("./CBjlProcedureOpenPokersQuickly");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeDealPortComponent_1 = require("../component/CBaijialeDealPortComponent");
var CBaijialeDealQuicklyComponent_1 = require("../component/CBaijialeDealQuicklyComponent");
var CBaijialeModel_1 = require("../CBaijialeModel");
var CBaijialeBottomComponent_1 = require("../component/CBaijialeBottomComponent");
/**
 * 快速发牌, 如果进入时, 已发完牌, 即下注结束, 或者。第一次进入, 已在发牌阶段, 都进入该流程
 * @author auto
 */
var CBjlProcedureDealPokersQuickly = /** @class */ (function (_super) {
    __extends(CBjlProcedureDealPokersQuickly, _super);
    function CBjlProcedureDealPokersQuickly() {
        return _super.call(this) || this;
    }
    CBjlProcedureDealPokersQuickly.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureDealPokersQuickly.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 快速发牌');
        // 牌显示处理
        this.controller.getComponent(CBaijialeDealQuicklyComponent_1.default).process();
        var backPokerData = GM_1.GM.baccData.enterData.backPokers;
        this.controller.getComponent(CBaijialeDealPortComponent_1.default).process(backPokerData);
        // 下一个阶段, 非快速开牌, 则要处理下注和倒计时
        var isQuicklyOpenPokers = fsm.getData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN);
        if (!isQuicklyOpenPokers) {
            this.controller.betsComponent.openBets();
            var enterCountDown = GM_1.GM.baccData.enterData.time;
            if (enterCountDown <= 0) {
                enterCountDown = 25;
            }
            if (GM_1.GM.baccData.enterData.state == CBaijialeModel_1.ServerGameState.STATE_IDLE) { // 服务器的另一个状态，当只有一个玩家时不会继续跑流程。同时会有另一个倒计时，当另一个玩家进入房间。倒计时重新开始
                enterCountDown = 25;
            }
            this.controller.roomStateComponent.setCountDownState(enterCountDown);
        }
        // 处理之前就下注信息
        var locationInfos = GM_1.GM.baccData.enterData.locationInfos;
        var betAreaInfos = GM_1.GM.baccData.enterData.betAreaInfos;
        if (betAreaInfos && betAreaInfos.length > 0 && locationInfos && locationInfos.length > 0) {
            this.controller.betsComponent.updateBetsCoinByEnterGame(betAreaInfos, locationInfos);
            // 判断玩家本身之前有没有下注, 右已下注， 设置已下注
            var userLocationInfo = GM_1.GM.baccData.enterData.getLocationDataByPlayerId(GM_1.GM.gameData.curStageInfo.playerId);
            if (userLocationInfo && userLocationInfo.playerBetInfos && userLocationInfo.playerBetInfos.length > 0) {
                var betCount = 0;
                for (var _i = 0, _a = userLocationInfo.playerBetInfos; _i < _a.length; _i++) {
                    var betinfo = _a[_i];
                    if (betinfo) {
                        betCount += betinfo.betCoin;
                    }
                }
                if (betCount > 0) {
                    // 之前已投
                    var betComponent = this.controller.betsComponent;
                    if (betComponent) {
                        betComponent.isBeted = true;
                    }
                }
            }
        }
        this.controller.getComponent(CBaijialeBottomComponent_1.default).process();
    };
    CBjlProcedureDealPokersQuickly.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        var isQuicklyOpenPokers = fsm.getData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN);
        if (isQuicklyOpenPokers) {
            this.changeProcedure(fsm, CBjlProcedureOpenPokersQuickly_1.default);
            fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN, false);
        }
        else {
            if (this.controller.netComponent.hasProtocol()) {
                var nextPro = this.controller.netComponent.nextProtocol();
                switch (nextPro.protocol) {
                    case CBaijialeHallModel_1.BaccNetConf.BetsBroadcast:
                        this.controller.betsComponent.addBetsCoinByBroadcast(nextPro.data);
                        break;
                    case CBaijialeHallModel_1.BaccNetConf.OpenPoker:
                        this.changeProcedure(fsm, CBjlProcedureOpenPokers_1.default);
                        break;
                }
            }
        }
        var dealCountDownData = GM_1.GM.baccData.dealCountDownData;
        if (dealCountDownData && dealCountDownData.second >= 0) {
            var coundDownNow = GM_1.GM.baccData.dealCountDownData.second;
            this.controller.roomStateComponent.updateCountDown(coundDownNow);
        }
    };
    CBjlProcedureDealPokersQuickly.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        this.controller.roomStateComponent.setCountDownEndState(); // updateCount里面1秒后才会重置和隐藏倒计时, 有可能已经切换到openPoker状态了, 不会重置
        this.controller.betsComponent.closeBets();
    };
    CBjlProcedureDealPokersQuickly.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureDealPokersQuickly;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureDealPokersQuickly;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../hall/CBaijialeHallModel":69,"../CBaijialeModel":76,"../component/CBaijialeBottomComponent":82,"../component/CBaijialeDealPortComponent":86,"../component/CBaijialeDealQuicklyComponent":87,"./CBjlProcedureBase":105,"./CBjlProcedureOpenPokers":110,"./CBjlProcedureOpenPokersQuickly":111,"./EBjlProcedureKey":119}],109:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CBjlProcedureDealPokersQuickly_1 = require("./CBjlProcedureDealPokersQuickly");
var GM_1 = require("../../../../../gm/GM");
var EBjlProcedureKey_1 = require("./EBjlProcedureKey");
var CBjlProcedureShuffleQuickly_1 = require("./CBjlProcedureShuffleQuickly");
var CBaijialeModel_1 = require("../CBaijialeModel");
var CBjlProcedureWaitDealPokers_1 = require("./CBjlProcedureWaitDealPokers");
var CBjlProcedureReset_1 = require("./CBjlProcedureReset");
var CBaijialeBottomComponent_1 = require("../component/CBaijialeBottomComponent");
var CBaijialeRoadComponent_1 = require("../component/CBaijialeRoadComponent");
/**
 * ...
 * @author auto
 */
var CBjlProcedureEntry = /** @class */ (function (_super) {
    __extends(CBjlProcedureEntry, _super);
    function CBjlProcedureEntry() {
        return _super.call(this) || this;
    }
    CBjlProcedureEntry.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureEntry.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 开始游戏');
        CBjlProcedureReset_1.default.Reset(this.controller);
        this.controller.getComponent(CBaijialeBottomComponent_1.default).process();
        this.controller.getComponent(CBaijialeRoadComponent_1.default).process();
        fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN, false);
        fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_RESULT, false);
        var serverState = GM_1.GM.baccData.enterData.state;
        switch (serverState) {
            case CBaijialeModel_1.ServerGameState.STATE_INIT:
                this.changeProcedure(fsm, CBjlProcedureWaitDealPokers_1.default);
                break;
            case CBaijialeModel_1.ServerGameState.STATE_SHUFFLE:
                this.changeProcedure(fsm, CBjlProcedureShuffleQuickly_1.default);
                break;
            case CBaijialeModel_1.ServerGameState.STATE_DEAL: // 服务器发牌后面紧跟着就是下注状态, 客户端不区分
            case CBaijialeModel_1.ServerGameState.STATE_BETS:
            case CBaijialeModel_1.ServerGameState.STATE_IDLE:
                this.changeProcedure(fsm, CBjlProcedureDealPokersQuickly_1.default);
                break;
            case CBaijialeModel_1.ServerGameState.STATE_OPEN:
                fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN, true);
                this.changeProcedure(fsm, CBjlProcedureDealPokersQuickly_1.default);
                break;
            case CBaijialeModel_1.ServerGameState.STATE_RESULT:
                fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_OPEN, true);
                fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_RESULT, true);
                this.changeProcedure(fsm, CBjlProcedureDealPokersQuickly_1.default);
                break;
            default:
                throw new Error('CBjlProcedureEntry error state');
        }
    };
    CBjlProcedureEntry.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CBjlProcedureEntry.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureEntry.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureEntry;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureEntry;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../CBaijialeModel":76,"../component/CBaijialeBottomComponent":82,"../component/CBaijialeRoadComponent":99,"./CBjlProcedureBase":105,"./CBjlProcedureDealPokersQuickly":108,"./CBjlProcedureReset":113,"./CBjlProcedureShuffleQuickly":117,"./CBjlProcedureWaitDealPokers":118,"./EBjlProcedureKey":119}],110:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var CBjlProcedureResult_1 = require("./CBjlProcedureResult");
var log_1 = require("../../../../../hbcore/framework/log");
var CBaijialeOpenPokerComponent_1 = require("../component/CBaijialeOpenPokerComponent");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CBaccConf_1 = require("../../CBaccConf");
var GM_1 = require("../../../../../gm/GM");
/**
 * ...
 * @author auto
 */
var CBjlProcedureOpenPokers = /** @class */ (function (_super) {
    __extends(CBjlProcedureOpenPokers, _super);
    function CBjlProcedureOpenPokers() {
        return _super.call(this) || this;
    }
    CBjlProcedureOpenPokers.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureOpenPokers.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 开牌');
        this.m_bFinished = false;
        this.controller.roomStateComponent.setResultState();
        if (GM_1.GM.gameData.isCurRound) {
            this.controller.getComponent(CBaijialeOpenPokerComponent_1.default).process(Laya.Handler.create(this, this._onPlayFinished));
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_stop'), -1, 0, '#aa0000', true, this.controller.view);
            this.controller.soundComponent.playSound(CBaccConf_1.default.SOUND_BET_STOP);
        }
        else {
            this._onPlayFinished();
        }
    };
    CBjlProcedureOpenPokers.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            if (this.controller.netComponent.hasProtocol() &&
                this.controller.netComponent.nextProtocol().protocol == CBaijialeHallModel_1.BaccNetConf.Result) {
                this.changeProcedure(fsm, CBjlProcedureResult_1.default);
            }
        }
    };
    CBjlProcedureOpenPokers.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureOpenPokers.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CBjlProcedureOpenPokers.prototype._onPlayFinished = function () {
        this.m_bFinished = true;
    };
    return CBjlProcedureOpenPokers;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureOpenPokers;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../CBaccConf":66,"../../hall/CBaijialeHallModel":69,"../component/CBaijialeOpenPokerComponent":94,"./CBjlProcedureBase":105,"./CBjlProcedureResult":114}],111:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var CBjlProcedureResult_1 = require("./CBjlProcedureResult");
var log_1 = require("../../../../../hbcore/framework/log");
var EBjlProcedureKey_1 = require("./EBjlProcedureKey");
var CBjlProcedureResultQuickly_1 = require("./CBjlProcedureResultQuickly");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var CBaijialeOpenPokerQuicklyComponent_1 = require("../component/CBaijialeOpenPokerQuicklyComponent");
/**
 * ...进入时如果是开牌阶段, 直接开牌
 * @author auto
 */
var CBjlProcedureOpenPokersQuickly = /** @class */ (function (_super) {
    __extends(CBjlProcedureOpenPokersQuickly, _super);
    function CBjlProcedureOpenPokersQuickly() {
        return _super.call(this) || this;
    }
    CBjlProcedureOpenPokersQuickly.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureOpenPokersQuickly.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 直接开牌');
        this.controller.roomStateComponent.setResultState();
        this.controller.getComponent(CBaijialeOpenPokerQuicklyComponent_1.default).process();
    };
    CBjlProcedureOpenPokersQuickly.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        var isQuicklyResult = fsm.getData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_RESULT);
        if (isQuicklyResult) {
            this.changeProcedure(fsm, CBjlProcedureResultQuickly_1.default);
        }
        else {
            // 还在发牌阶段, 等待结算
            if (this.controller.netComponent.hasProtocol() &&
                this.controller.netComponent.nextProtocol().protocol == CBaijialeHallModel_1.BaccNetConf.Result) {
                fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.FROM_QUICKLY_OPEN, true);
                this.changeProcedure(fsm, CBjlProcedureResult_1.default);
            }
        }
        fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.IS_QUICKLY_RESULT, false);
    };
    CBjlProcedureOpenPokersQuickly.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureOpenPokersQuickly.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureOpenPokersQuickly;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureOpenPokersQuickly;
},{"../../../../../hbcore/framework/log":256,"../../hall/CBaijialeHallModel":69,"../component/CBaijialeOpenPokerQuicklyComponent":95,"./CBjlProcedureBase":105,"./CBjlProcedureResult":114,"./CBjlProcedureResultQuickly":115,"./EBjlProcedureKey":119}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CBjlProcedureReset_1 = require("./CBjlProcedureReset");
var CBaijialeRecoverPokerComponent_1 = require("../component/CBaijialeRecoverPokerComponent");
var GM_1 = require("../../../../../gm/GM");
/**
 * ...
 * @author auto
 * 收牌
 */
var CBjlProcedureRecoverPoker = /** @class */ (function (_super) {
    __extends(CBjlProcedureRecoverPoker, _super);
    function CBjlProcedureRecoverPoker() {
        return _super.call(this) || this;
    }
    CBjlProcedureRecoverPoker.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureRecoverPoker.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 收牌');
        this.m_bFinished = false;
        var isCurRound = GM_1.GM.gameData.isCurRound;
        var pRecoverComponent = this.controller.getComponent(CBaijialeRecoverPokerComponent_1.default);
        if (isCurRound && pRecoverComponent) {
            pRecoverComponent.process(this, this._onFinished);
        }
        else {
            this.m_bFinished = true;
        }
    };
    CBjlProcedureRecoverPoker.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            this.changeProcedure(this.m_fsm, CBjlProcedureReset_1.default);
        }
    };
    CBjlProcedureRecoverPoker.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureRecoverPoker.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CBjlProcedureRecoverPoker.prototype._onFinished = function () {
        this.m_bFinished = true;
    };
    return CBjlProcedureRecoverPoker;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureRecoverPoker;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CBaijialeRecoverPokerComponent":97,"./CBjlProcedureBase":105,"./CBjlProcedureReset":113}],113:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CBjlProcedureWaitDealPokers_1 = require("./CBjlProcedureWaitDealPokers");
var CBaijialeMd5TipsComponent_1 = require("../component/CBaijialeMd5TipsComponent");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeDealPortComponent_1 = require("../component/CBaijialeDealPortComponent");
/**
 * ...
 * @author auto
 */
var CBjlProcedureReset = /** @class */ (function (_super) {
    __extends(CBjlProcedureReset, _super);
    function CBjlProcedureReset() {
        return _super.call(this) || this;
    }
    CBjlProcedureReset.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureReset.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 重置');
        // this.m_isNeedShuffle = false;
        CBjlProcedureReset.Reset(this.controller);
    };
    CBjlProcedureReset.Reset = function (pController) {
        pController.dealComponent.reset();
        pController.betsComponent.reset();
        pController.getComponent(CBaijialeMd5TipsComponent_1.default).reset();
        // pController.roomStateComponent.setShuffleState();
        pController.getComponent(CBaijialeDealPortComponent_1.default).reset();
        GM_1.GM.baccData.reset();
    };
    CBjlProcedureReset.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        // if (this.m_isNeedShuffle) {
        // this.changeProcedure(fsm, CBjlProcedureShuffle);
        // } else {
        this.changeProcedure(fsm, CBjlProcedureWaitDealPokers_1.default);
        // }
    };
    CBjlProcedureReset.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureReset.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureReset;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureReset;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CBaijialeDealPortComponent":86,"../component/CBaijialeMd5TipsComponent":91,"./CBjlProcedureBase":105,"./CBjlProcedureWaitDealPokers":118}],114:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CBaijialeResultComponent_1 = require("../component/CBaijialeResultComponent");
var EBjlProcedureKey_1 = require("./EBjlProcedureKey");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaijialeLightWinAreaComponent_1 = require("../component/CBaijialeLightWinAreaComponent");
var CBjlProcedureRecoverPoker_1 = require("./CBjlProcedureRecoverPoker");
var CBaijialeNetComponent_1 = require("../component/CBaijialeNetComponent");
var CBaijialePaicaiComponent_1 = require("../component/CBaijialePaicaiComponent");
var CBaijialeRoadComponent_1 = require("../component/CBaijialeRoadComponent");
var CMessageBox_1 = require("../../../../common/CMessageBox");
/**
 * ...
 * @author auto
 */
var CBjlProcedureResult = /** @class */ (function (_super) {
    __extends(CBjlProcedureResult, _super);
    function CBjlProcedureResult() {
        return _super.call(this) || this;
    }
    CBjlProcedureResult.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureResult.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 结算');
        this.m_bFinished = false;
        this.m_bDestroy = false;
        this.controller.roomStateComponent.setResultState();
        if (GM_1.GM.gameData.isCurRound) {
            var isFromQuicklyOpen = fsm.getData(EBjlProcedureKey_1.EBjlProcedureKey.FROM_QUICKLY_OPEN);
            var data = void 0;
            var playerWinInfos = void 0;
            if (isFromQuicklyOpen) {
                data = GM_1.GM.baccData.enterData.bingoAreaIds;
                fsm.setData(EBjlProcedureKey_1.EBjlProcedureKey.FROM_QUICKLY_OPEN, false);
            }
            else {
                data = GM_1.GM.baccData.openPokerData.bingoAreaIds;
            }
            playerWinInfos = GM_1.GM.baccData.resultData.playerWinInfos; // 进到这里。肯定是有数据的
            this.controller.getComponent(CBaijialeResultComponent_1.default).process(data, playerWinInfos, this, this._onFinish);
            this.controller.getComponent(CBaijialeLightWinAreaComponent_1.default).process(data);
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('resulting'), -1, 0, '#00aa00', true, this.controller.view);
        }
        else {
            this._onFinish();
        }
    };
    CBjlProcedureResult.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            // 更新人物数据
            this.changeProcedure(this.m_fsm, CBjlProcedureRecoverPoker_1.default);
        }
    };
    CBjlProcedureResult.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureResult.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
        this.m_bDestroy = true;
    };
    CBjlProcedureResult.prototype._onFinish = function () {
        if (this.m_bDestroy) {
            return;
        }
        if (!this.controller) {
            return;
        }
        var playerWinInfos;
        // 更新玩家余额
        playerWinInfos = GM_1.GM.baccData.resultData.playerWinInfos;
        var isUpdated = false;
        var paicai = 0;
        for (var _i = 0, playerWinInfos_1 = playerWinInfos; _i < playerWinInfos_1.length; _i++) {
            var playerWinInfo = playerWinInfos_1[_i];
            var locationInfo = GM_1.GM.baccData.enterData.getLocationDataByPlayerId(playerWinInfo.playerId);
            if (locationInfo) {
                locationInfo.balance = playerWinInfo.balance;
                isUpdated = true;
            }
            // 获得玩家派彩
            if (locationInfo && locationInfo.playerId == GM_1.GM.gameData.curStageInfo.playerId) {
                var areaWinInfoList = playerWinInfo.betAreaWinInfos;
                if (areaWinInfoList && areaWinInfoList.length > 0) {
                    for (var _a = 0, areaWinInfoList_1 = areaWinInfoList; _a < areaWinInfoList_1.length; _a++) {
                        var areaWinInfo = areaWinInfoList_1[_a];
                        if (areaWinInfo.winCoin > 0) {
                            paicai += (areaWinInfo.winCoin + areaWinInfo.betCoin);
                        }
                    }
                }
            }
        }
        if (isUpdated) {
            if (paicai > 0) {
                // console.log(paicai);
                this.controller.getComponent(CBaijialePaicaiComponent_1.default).process(paicai);
            }
            this.controller.netComponent.event(CBaijialeNetComponent_1.CBaijialeNetComponent.EVENT_USER_UPDATE);
        }
        // 更新路书信息
        var roadComponent = this.controller.getComponent(CBaijialeRoadComponent_1.default);
        roadComponent.process();
        this.m_bFinished = true;
    };
    return CBjlProcedureResult;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureResult;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../component/CBaijialeLightWinAreaComponent":89,"../component/CBaijialeNetComponent":92,"../component/CBaijialePaicaiComponent":96,"../component/CBaijialeResultComponent":98,"../component/CBaijialeRoadComponent":99,"./CBjlProcedureBase":105,"./CBjlProcedureRecoverPoker":112,"./EBjlProcedureKey":119}],115:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CBjlProcedureRecoverPoker_1 = require("./CBjlProcedureRecoverPoker");
/**
 * ...
 * @author auto
 */
var CBjlProcedureResultQuickly = /** @class */ (function (_super) {
    __extends(CBjlProcedureResultQuickly, _super);
    function CBjlProcedureResultQuickly() {
        return _super.call(this) || this;
    }
    CBjlProcedureResultQuickly.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureResultQuickly.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 快速结算');
        this.controller.roomStateComponent.setResultState();
        this.m_isNeedShuffle = false;
    };
    CBjlProcedureResultQuickly.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        this.changeProcedure(this.m_fsm, CBjlProcedureRecoverPoker_1.default);
    };
    CBjlProcedureResultQuickly.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureResultQuickly.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureResultQuickly;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureResultQuickly;
},{"../../../../../hbcore/framework/log":256,"./CBjlProcedureBase":105,"./CBjlProcedureRecoverPoker":112}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CBjlProcedureWaitDealPokers_1 = require("./CBjlProcedureWaitDealPokers");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaijialeShuffleComponent_1 = require("../component/CBaijialeShuffleComponent");
var CMessageBox_1 = require("../../../../common/CMessageBox");
/**
 * ...
 * @author auto
 */
var CBjlProcedureShuffle = /** @class */ (function (_super) {
    __extends(CBjlProcedureShuffle, _super);
    function CBjlProcedureShuffle() {
        return _super.call(this) || this;
    }
    CBjlProcedureShuffle.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureShuffle.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 洗牌');
        this.m_bFinished = false;
        this.controller.roomStateComponent.setShuffleState();
        // 洗牌时, 清除lookPokerData
        GM_1.GM.baccData.clearByShuffle();
        if (GM_1.GM.gameData.isCurRound) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('shuffling'), -1, 0, '#00aa00', true, this.controller.view);
            this.controller.getComponent(CBaijialeShuffleComponent_1.default).process(this, this._onFinish);
        }
        else {
            this._onFinish();
        }
    };
    CBjlProcedureShuffle.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            this.changeProcedure(fsm, CBjlProcedureWaitDealPokers_1.default);
        }
    };
    CBjlProcedureShuffle.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureShuffle.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CBjlProcedureShuffle.prototype._onFinish = function () {
        this.m_bFinished = true;
    };
    return CBjlProcedureShuffle;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureShuffle;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../component/CBaijialeShuffleComponent":102,"./CBjlProcedureBase":105,"./CBjlProcedureWaitDealPokers":118}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CBjlProcedureWaitDealPokers_1 = require("./CBjlProcedureWaitDealPokers");
/**
 * ...
 * @author auto
 */
var CBjlProcedureShuffleQuickly = /** @class */ (function (_super) {
    __extends(CBjlProcedureShuffleQuickly, _super);
    function CBjlProcedureShuffleQuickly() {
        return _super.call(this) || this;
    }
    CBjlProcedureShuffleQuickly.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureShuffleQuickly.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 快速洗牌');
        this.controller.roomStateComponent.setShuffleState();
        GM_1.GM.baccData.clearByShuffle();
    };
    CBjlProcedureShuffleQuickly.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        this.changeProcedure(fsm, CBjlProcedureWaitDealPokers_1.default);
    };
    CBjlProcedureShuffleQuickly.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CBjlProcedureShuffleQuickly.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureShuffleQuickly;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureShuffleQuickly;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"./CBjlProcedureBase":105,"./CBjlProcedureWaitDealPokers":118}],118:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBjlProcedureBase_1 = require("./CBjlProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CBaijialeHallModel_1 = require("../../hall/CBaijialeHallModel");
var CBjlProcedureDealPokers_1 = require("./CBjlProcedureDealPokers");
var CBjlProcedureShuffle_1 = require("./CBjlProcedureShuffle");
var CWarnView_1 = require("../../../../common/CWarnView");
var CBaijialeTopComponent_1 = require("../component/CBaijialeTopComponent");
/**
 * ...
 * @author auto
 */
var CBjlProcedureWaitDealPokers = /** @class */ (function (_super) {
    __extends(CBjlProcedureWaitDealPokers, _super);
    function CBjlProcedureWaitDealPokers() {
        return _super.call(this) || this;
    }
    CBjlProcedureWaitDealPokers.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CBjlProcedureWaitDealPokers.prototype.onEnter = function (fsm) {
        var _this = this;
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('百家乐 : 等待发牌');
        var stageInfo = GM_1.GM.gameData.getStageInfoByID(GM_1.GM.baccData.enterData.stageId);
        if (stageInfo) {
            var myBalance = 0;
            var locationInfo = GM_1.GM.baccData.enterData.getLocationDataByPlayerId(GM_1.GM.gameData.curStageInfo.playerId);
            if (locationInfo) {
                myBalance = locationInfo.balance;
            }
            var hasEnoughMoney = myBalance >= stageInfo.minJoinCoin;
            if (!hasEnoughMoney) {
                CWarnView_1.default.instance().showNotEnoughMoney(this, function () {
                    GM_1.GM.gameData.setRedirect(1);
                    _this.controller.getComponent(CBaijialeTopComponent_1.default).exitRoom();
                }, function () {
                    _this.controller.getComponent(CBaijialeTopComponent_1.default).exitRoom();
                });
            }
        }
    };
    CBjlProcedureWaitDealPokers.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        // 重置之后, 进入等待发牌, 如果中间收到洗牌的协议。就切到洗牌流程，洗完牌，再切回等待
        if (this.controller.netComponent.hasProtocol()) {
            var nextProtocol = this.controller.netComponent.nextProtocol().protocol;
            if (nextProtocol == CBaijialeHallModel_1.BaccNetConf.DealPoker) {
                this.changeProcedure(this.m_fsm, CBjlProcedureDealPokers_1.default);
            }
            else if (nextProtocol == CBaijialeHallModel_1.BaccNetConf.Shuffle) {
                this.changeProcedure(this.m_fsm, CBjlProcedureShuffle_1.default);
            }
        }
    };
    CBjlProcedureWaitDealPokers.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CBaijialeHallModel_1.BaccNetConf.DealPoker);
    };
    CBjlProcedureWaitDealPokers.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CBjlProcedureWaitDealPokers;
}(CBjlProcedureBase_1.default));
exports.default = CBjlProcedureWaitDealPokers;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../common/CWarnView":12,"../../hall/CBaijialeHallModel":69,"../component/CBaijialeTopComponent":104,"./CBjlProcedureBase":105,"./CBjlProcedureDealPokers":107,"./CBjlProcedureShuffle":116}],119:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EBjlProcedureKey = {
    IS_QUICKLY_OPEN: 'isQuicklyOpen',
    IS_QUICKLY_RESULT: 'isQuicklyResult',
    FROM_QUICKLY_OPEN: 'FROM_QUICKLY_OPEN'
};
},{}],120:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeRuleController = /** @class */ (function (_super) {
    __extends(CBaijialeRuleController, _super);
    function CBaijialeRuleController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CBaijialeRuleController.prototype.onEnable = function () {
        this.m_view = this.owner;
        // StopAllMouseEvent.register(this.m_view);
        this.m_view.closeBtn.on(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_view.panel.vScrollBar.skin = "";
        this.m_view.panel.vScrollBar.hide = true;
        this.m_view.panel.scrollTo(0, 0);
        this.updateView();
    };
    CBaijialeRuleController.prototype.onDisable = function () {
        // StopAllMouseEvent.unregister(this.m_view);
        this.m_view.closeBtn.off(Laya.Event.MOUSE_DOWN, this, this._onClose);
    };
    CBaijialeRuleController.prototype.updateView = function () {
        this._updateView();
    };
    CBaijialeRuleController.prototype._updateView = function () {
    };
    CBaijialeRuleController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    return CBaijialeRuleController;
}(Laya.Script));
exports.default = CBaijialeRuleController;
},{}],121:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var CBaijialeRuleView = /** @class */ (function (_super) {
    __extends(CBaijialeRuleView, _super);
    function CBaijialeRuleView() {
        return _super.call(this) || this;
    }
    CBaijialeRuleView.prototype.onDestroy = function () {
    };
    CBaijialeRuleView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CBaijialeRuleView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CBaijialeRuleView.prototype._updateView = function () {
    };
    CBaijialeRuleView.prototype._onEvent = function () {
    };
    CBaijialeRuleView.prototype._offEvent = function () {
    };
    Object.defineProperty(CBaijialeRuleView.prototype, "panel", {
        get: function () {
            return this.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CBaijialeRuleView.prototype, "closeBtn", {
        get: function () {
            return this.getChildByName('close_btn');
        },
        enumerable: true,
        configurable: true
    });
    CBaijialeRuleView.SIGN = 'CBaijialeRuleView';
    return CBaijialeRuleView;
}(layaMaxUI_1.ui.gamelist.bjl.subView.BaijialeRuleViewUI));
exports.default = CBaijialeRuleView;
},{"../../../../../ui/layaMaxUI":271}],122:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var netData_1 = require("../../_commonModel/netData");
var ApiUtil_1 = require("../../../../hbcore/util/ApiUtil");
var CPokerData_1 = require("../../_commonModel/CPokerData");
var log_1 = require("../../../../hbcore/framework/log");
var p21Data;
(function (p21Data) {
    p21Data.EUserState = {
        // 玩家状态（0：正常，1：掉线）
        online: 0, offline: 1
    };
    p21Data.EUserGameStatus = {
        unReady: 0, waitReady: 1, playing: 2 // 玩家在游戏中的状态（0：等待中，1：准备中，2：游戏中）
    };
    p21Data.EPokerStatus = {
        // 牌型 "牌型(0为爆牌，1为普通牌型，2为blackjack ，3为过五关)"
        boun: 0, normal: 1, blackJack: 2, level5: 3
    };
    p21Data.EControlType = {
        // 操作类型 0已经操作，1未操作
        controled: 0, unControl: 1
    };
    p21Data.EGameState = {
        //（ 0：未成局 1：基本下注 2：买保险 3：操作牌 4：统计 5：洗牌）
        unready: 0, bet: 1, insurance: 2, playerControl: 3, result: 4, shuffle: 5,
        deal: 11,
    };
    var CP21Data = /** @class */ (function () {
        function CP21Data() {
            this.room = new CRoomInfo();
            this.locationList = new Array();
            this.bankerInfo = new CLocationInfo();
            this.result = new CResultData();
            this.betHistroy = new netData_1.common.netData.CBetsHistroyListData();
            this.pokerDetailData = new netData_1.common.netData.CPokerDetailData();
            this.operateBetList = [];
            // this.operateInsuance = new COperateInsuranceInfo();
            this.operateInsuranceList = [];
            this.operateDoubleBet = new COperateDoubleBet();
            this.operateGetPoker = new COperateGetPoker();
            this.operateStopPoker = new COperateStopPoker();
            // this.operateSplitPoker = new COperateSplitPoker();
            this.operateSplitList = [];
            this.operateDealPoker = new COperateDealPoker();
            this.countDownData = new CCountDownData();
        }
        // 每局reset
        CP21Data.prototype.reset = function () {
            this.pokerDetailData.reset();
            this.operateSplitList.length = 0;
        };
        // 有些数据, 是进入之前保留的, 比如中途退出再进, 需要保留， 因此这些数据放到结束的时候清除
        CP21Data.prototype.resetByEnd = function () {
            this.resetLocationInfo();
            this.operateDealPoker.reset();
        };
        CP21Data.prototype.updateEnter = function (data, myPlayerId) {
            this.reset();
            this.resetByEnd();
            this.myId = myPlayerId;
            this.room.updateByData(data);
            if (data.hasOwnProperty('historyBankerPoker')) {
                this.bankerPokerHistory = data['historyBankerPoker'];
            }
            else {
                this.bankerPokerHistory = [];
            }
            this.userHistory = data['history'];
            this.locationList = [];
            if (data.hasOwnProperty('locationInfos')) {
                var locations = data['locationInfos'];
                for (var i = 0; i < locations.length; ++i) {
                    this.updateLocation(locations[i]);
                }
            }
            var dealPokerData = this._buildOperaterDealDataFromLocation(data);
            this.updateDealPoker(dealPokerData);
            var countDownTime = data['time'];
            this.countDownData.second = countDownTime;
        };
        CP21Data.prototype._buildOperaterDealDataFromLocation = function (data) {
            // 创造dealpokerdata from betAreaInfos
            var dealPokerData = null;
            var type = 0;
            var bluePoker = -1;
            var waitPokerData = null;
            var playerPokerDataList = [];
            if (data.hasOwnProperty('waitPoker')) {
                waitPokerData = data['waitPoker'];
            }
            var processLocationList = [];
            for (var _i = 0, _a = this.locationList; _i < _a.length; _i++) {
                var locationInfo = _a[_i];
                processLocationList.push(locationInfo);
            }
            processLocationList.push(this.bankerInfo);
            for (var _b = 0, processLocationList_1 = processLocationList; _b < processLocationList_1.length; _b++) {
                var locationInfo = processLocationList_1[_b];
                if (!locationInfo) {
                    continue;
                }
                for (var _c = 0, _d = locationInfo.betAreaInfos; _c < _d.length; _c++) {
                    var areaInfo = _d[_c];
                    var tempObj = areaInfo;
                    if (!tempObj) {
                        continue;
                    }
                    var pokerObj = tempObj['pokers'];
                    if (!pokerObj || pokerObj.length == 0) { // 庄家的数据和玩家的不一样, 固定areainfo有一个数据, 但是不一定有牌
                        continue;
                    }
                    var playerPokerData = CPokerInfo.CreateBuildData(locationInfo.playerId, areaInfo.areaId, areaInfo.pointStr, areaInfo.type, areaInfo.pokers);
                    playerPokerDataList.push(playerPokerData);
                }
            }
            dealPokerData = COperateDealPoker.CreateBuildData(type, bluePoker, waitPokerData, playerPokerDataList);
            return dealPokerData;
        };
        // ==== 庄家历史
        CP21Data.prototype.updateBankerHistroy = function (point) {
            this.bankerPokerHistory.unshift(point);
        };
        CP21Data.prototype.getBankerHistroyDisplayList = function () {
            var list = [];
            var startIndex = 3;
            if (startIndex >= this.bankerPokerHistory.length) {
                startIndex = this.bankerPokerHistory.length - 1;
            }
            if (startIndex < 0) {
                return list;
            }
            for (var i = startIndex; i >= 0; --i) {
                list.push(this.bankerPokerHistory[i]);
                if (list.length >= 4) {
                    break;
                }
            }
            return list;
        };
        // =================================operater
        CP21Data.prototype.updateBet = function (data) {
            var operData = new COperateBetInfo();
            operData.updateByData(data);
            this.operateBetList.push(operData);
            var pLocationInfo = this.getLocationInfo(operData.userId);
            if (pLocationInfo) {
                pLocationInfo.balance = operData.balance;
                pLocationInfo.updateByBet(operData.betMoney);
            }
            return operData;
        };
        CP21Data.prototype.getBetInfoByUser = function (userId) {
            if (this.operateBetList.length == 0) {
                return null;
            }
            for (var i = 0; i < this.operateBetList.length; ++i) {
                var operData = this.operateBetList[i];
                if (operData.userId == userId) {
                    return operData;
                }
            }
            return null;
        };
        CP21Data.prototype.updateInsurance = function (data) {
            var operData = new COperateInsuranceInfo();
            operData.updateByData(data);
            this.operateInsuranceList.push(operData);
            var locationInfo = this.getLocationInfo(operData.userId);
            if (locationInfo) {
                locationInfo.balance = operData.balance;
            }
        };
        CP21Data.prototype.removeInsurance = function (userId) {
            for (var i = 0; i < this.operateInsuranceList.length; ++i) {
                var operData = this.operateInsuranceList[i];
                if (operData.userId == userId) {
                    this.operateInsuranceList.splice(i);
                    break;
                }
            }
        };
        CP21Data.prototype.hasInsuranceByUser = function (userId) {
            if (this.operateInsuranceList.length == 0) {
                return false;
            }
            for (var i = 0; i < this.operateInsuranceList.length; ++i) {
                var operData = this.operateInsuranceList[i];
                if (operData.userId == userId) {
                    return true;
                }
            }
            return false;
        };
        CP21Data.prototype.updateDoubleBet = function (data) {
            this.operateDoubleBet.updateByData(data);
            this.operateDoubleBet.areaId;
            this.operateDoubleBet.userId;
            this.operateDoubleBet.money;
            var operData = this.operateDoubleBet;
            var pLocationInfo = this.getLocationInfo(operData.userId);
            if (pLocationInfo) {
                pLocationInfo.balance = operData.balance;
                pLocationInfo.updateByDoubleBet(operData.areaId);
            }
        };
        CP21Data.prototype.updateGetPoker = function (data) {
            this.operateGetPoker.updateByData(data);
        };
        CP21Data.prototype.updateStopPoker = function (data) {
            this.operateStopPoker.updateByData(data);
        };
        CP21Data.prototype.updateSplitPoker = function (data) {
            // this.operateSplitPoker.updateByData(data);
            var operData = new COperateSplitPoker();
            operData.updateByData(data);
            this.operateSplitList.push(operData);
            var pLocationInfo = this.getLocationInfo(operData.userId);
            if (pLocationInfo) {
                pLocationInfo.balance = operData.balance;
                var betOne = operData.money * 0.5;
                betOne = ApiUtil_1.ApiUtil.formatNumber(betOne);
                pLocationInfo.updateBySplit(betOne);
            }
        };
        CP21Data.prototype.removeSplitPoker = function (userId) {
            for (var i = 0; i < this.operateSplitList.length; ++i) {
                var operData = this.operateSplitList[i];
                if (operData.userId == userId) {
                    this.operateSplitList.splice(i);
                    break;
                }
            }
        };
        CP21Data.prototype.hasSplitByUser = function (userId) {
            if (this.operateSplitList.length == 0) {
                return false;
            }
            for (var i = 0; i < this.operateSplitList.length; ++i) {
                var operData = this.operateSplitList[i];
                if (operData.userId == userId) {
                    return true;
                }
            }
            return false;
        };
        CP21Data.prototype.updateDealPoker = function (data) {
            this.operateDealPoker.updateByData(data);
        };
        // =================================status
        CP21Data.prototype.updateGameState = function (data) {
            this.room.state = data['gameState'];
        };
        CP21Data.prototype.updatePlayerState = function (data) {
        };
        // =================================result
        CP21Data.prototype.updateResult = function (data) {
            this.result.updateByData(data);
            var resultInfo = this.result.getByPID(0);
            var point = resultInfo.winInfos[0].point;
            this.bankerPokerHistory.unshift(point);
            var resultList = this.result.resultList;
            for (var _i = 0, resultList_1 = resultList; _i < resultList_1.length; _i++) {
                var result = resultList_1[_i];
                if (!result) {
                    continue;
                }
                var locationInfo = this.getLocationInfo(result.userId);
                if (!locationInfo) {
                    continue;
                }
                locationInfo.balance = result.endCoin;
            }
        };
        // =================================new round
        CP21Data.prototype.updateNewRound = function (newRound) {
            this.room.roundNum = newRound['runNumber']; // roundNum;
        };
        // =================================countdown
        CP21Data.prototype.updateCountDown = function (data) {
            // let second = data['second'];
            // if (second > 0) {
            //     second--; // 服务器时间会停在1秒, 这里把时间处理下, 后面如果有其他地方要用到这个协议做倒计时的。要注意
            // }
            // this.room.countDownTime = second;
            this.countDownData.updateByData(data);
        };
        // =================================location
        CP21Data.prototype.updateLocation = function (data) {
            var flag = -1;
            if (data.hasOwnProperty('flag')) {
                flag = data['flag'];
            }
            var playerId = data['playerId'];
            if (0 == playerId) {
                // 庄
                this.bankerInfo.updateByData(data);
            }
            else {
                if (flag == 0) {
                    // 玩家退出
                    this.removeLocationInfo(playerId);
                }
                else {
                    // 新玩家进入
                    var locationInfo = this.getLocationInfo(playerId);
                    if (!locationInfo) {
                        locationInfo = new CLocationInfo();
                        this.locationList.push(locationInfo);
                    }
                    locationInfo.updateByData(data);
                }
            }
        };
        CP21Data.prototype.getLocationIdx = function (playerId) {
            var ret = 0;
            for (var i = 0; i < this.locationList.length; i++) {
                var locationInfo = this.locationList[i];
                if (!locationInfo) {
                    continue;
                }
                if (locationInfo.playerId == playerId) {
                    ret = i;
                    break;
                }
            }
            return ret;
        };
        CP21Data.prototype.getLocationInfo = function (playerId) {
            var ret = null;
            for (var i = 0; i < this.locationList.length; i++) {
                var locationInfo = this.locationList[i];
                if (!locationInfo) {
                    continue;
                }
                if (locationInfo.playerId == playerId) {
                    ret = locationInfo;
                    break;
                }
            }
            return ret;
        };
        Object.defineProperty(CP21Data.prototype, "myLocationInfo", {
            get: function () {
                return this.getLocationInfo(this.myId);
            },
            enumerable: true,
            configurable: true
        });
        CP21Data.prototype.removeLocationInfo = function (playerId) {
            for (var i = 0; i < this.locationList.length; i++) {
                var locationInfo = this.locationList[i];
                if (!locationInfo) {
                    continue;
                }
                if (locationInfo.playerId == playerId) {
                    this.locationList.splice(i, 1);
                    break;
                }
            }
        };
        // 新局需要重置 下注信息
        CP21Data.prototype.resetLocationInfo = function () {
            for (var _i = 0, _a = this.locationList; _i < _a.length; _i++) {
                var locationInfo = _a[_i];
                if (locationInfo) {
                    locationInfo.betAreaInfos = [];
                }
            }
        };
        // =================================业务
        CP21Data.prototype.updateBetHistory = function (data) {
            this.betHistroy.updateByData(data);
        };
        CP21Data.prototype.updatePokerDetail = function (data) {
            this.pokerDetailData.updateByData(data);
        };
        CP21Data.prototype.clearPokerDetail = function () {
            this.pokerDetailData = new netData_1.common.netData.CPokerDetailData();
        };
        Object.defineProperty(CP21Data.prototype, "myBalance", {
            // =================================property
            // get isBeted() : boolean {
            //     let myLocationInfo = this.getLocationInfo(this.myId);
            //     if (!myLocationInfo) {
            //         return false;
            //     }
            //     myLocationInfo.betInstance
            //     return false;
            // }
            get: function () {
                if (!this.myLocationInfo) {
                    return 0;
                }
                return this.myLocationInfo.balance;
            },
            enumerable: true,
            configurable: true
        });
        CP21Data.prototype.hasEnoughMoney = function (money) {
            var ret = this.myBalance + money;
            ret = ApiUtil_1.ApiUtil.formatNumber(ret);
            return ret > 0;
        };
        Object.defineProperty(CP21Data.prototype, "curControlPlayer", {
            // 当前正在操作的玩家ID
            get: function () {
                return this.countDownData.userId;
            },
            enumerable: true,
            configurable: true
        });
        CP21Data.PLAYER_COUNT = 3;
        return CP21Data;
    }());
    p21Data.CP21Data = CP21Data;
    var CRoomInfo = /** @class */ (function () {
        function CRoomInfo() {
        }
        CRoomInfo.prototype.updateByData = function (data) {
            this.stageId = data['stageId'];
            this.gameCode = data['gameCode'];
            this.location = data['location'];
            this.state = data['state'];
            this.roundNum = data['runNumber'];
            this.minBet = data['minBet'];
            this.maxBet = data['maxBet'];
            this.countDownTime = data['time'];
        };
        return CRoomInfo;
    }());
    p21Data.CRoomInfo = CRoomInfo;
    var CLocationInfo = /** @class */ (function () {
        function CLocationInfo() {
            this.betAreaInfos = [];
        }
        CLocationInfo.prototype.updateByData = function (data) {
            this.location = data['location'];
            this.playerId = data['playerId'];
            this.nickName = data['nickName'];
            this.balance = data['balance'];
            if (data.hasOwnProperty('headImg')) {
                this.headImg = data['headImg'];
            }
            if (data.hasOwnProperty('userState')) {
                this.userState = data['userState'];
            }
            if (data.hasOwnProperty('betInstance')) {
                this.betInstance = data['betInstance'];
            }
            if (data.hasOwnProperty('userInGameState')) {
                this.userInGameState = data['userInGameState'];
            }
            if (data.hasOwnProperty('betAreaInfos')) {
                this.betAreaInfos = [];
                var areaInfoList = data['betAreaInfos'];
                if (areaInfoList) {
                    for (var i = 0; i < areaInfoList.length; ++i) {
                        var areaInfo = new CAreaBetInfo();
                        areaInfo.updateByData(areaInfoList[i]);
                        this.betAreaInfos.push(areaInfo);
                    }
                }
            }
        };
        CLocationInfo.prototype.updateByBet = function (betCount) {
            if (this.betAreaInfos.length == 0) {
                // 第一次下注
                var areaInfo = new CAreaBetInfo();
                areaInfo.areaId = 1;
                areaInfo.totalBet = betCount;
                this.betAreaInfos.push(areaInfo);
            }
        };
        CLocationInfo.prototype.updateBySplit = function (betCount) {
            this.betAreaInfos = [];
            // 分牌下注
            var areaInfo = new CAreaBetInfo();
            areaInfo.areaId = 11;
            areaInfo.totalBet = betCount;
            this.betAreaInfos.push(areaInfo);
            areaInfo = new CAreaBetInfo();
            areaInfo.areaId = 12;
            areaInfo.totalBet = betCount;
            this.betAreaInfos.push(areaInfo);
        };
        CLocationInfo.prototype.updateByDoubleBet = function (areaId) {
            for (var _i = 0, _a = this.betAreaInfos; _i < _a.length; _i++) {
                var areaInfo = _a[_i];
                if (areaInfo && areaInfo.areaId == areaId) {
                    areaInfo.totalBet = areaInfo.totalBet * 2;
                    areaInfo.totalBet = ApiUtil_1.ApiUtil.formatNumber(areaInfo.totalBet);
                }
            }
        };
        Object.defineProperty(CLocationInfo.prototype, "hasBet", {
            get: function () {
                var betCount = this.totalBet;
                return betCount > 0.000000001;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLocationInfo.prototype, "totalBet", {
            get: function () {
                if (!this.betAreaInfos) {
                    return 0;
                }
                var c = 0;
                for (var i = 0; i < this.betAreaInfos.length; ++i) {
                    c += this.betAreaInfos[i].totalBet;
                }
                c = ApiUtil_1.ApiUtil.formatNumber(c);
                return c;
            },
            enumerable: true,
            configurable: true
        });
        CLocationInfo.prototype.isSplit = function () {
            return this.betAreaInfos.length >= 2;
        };
        // 是否所有注区都下注了
        CLocationInfo.prototype.isAllBeted = function () {
            // 只要有一个下注了。就是所有都下注了
            return this.betAreaInfos.length > 0;
        };
        CLocationInfo.prototype.isEnoughToBet = function (v) {
            var ret = this.balance + v;
            ret = ApiUtil_1.ApiUtil.formatNumber(ret);
            return ret >= 0;
        };
        // 玩家最多输1.2倍
        CLocationInfo.transToLoseMax = function (v) {
            var ret = v * 1.2;
            ret = ApiUtil_1.ApiUtil.formatNumber(ret);
            return ret;
        };
        // 转换成玩家最大可以下注
        CLocationInfo.transToBetMax = function (v) {
            var ret = v / 1.2;
            ret = ApiUtil_1.ApiUtil.formatNumber(ret);
            return ret;
        };
        return CLocationInfo;
    }());
    p21Data.CLocationInfo = CLocationInfo;
    var CAreaBetInfo = /** @class */ (function () {
        function CAreaBetInfo() {
        }
        CAreaBetInfo.prototype.updateByData = function (data) {
            this.areaId = data['id'];
            this.totalBet = data['totalBet'];
            this.pokers = data['pokers'];
            this.pointStr = data['pointStr'];
            this.type = data['type'];
            this.isOver = data['isOver'];
        };
        Object.defineProperty(CAreaBetInfo.prototype, "isSplit", {
            get: function () { return this.areaId > 9; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CAreaBetInfo.prototype, "areaIndex", {
            get: function () {
                if (this.isSplit) {
                    return this.areaId - 11;
                }
                else {
                    return 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        return CAreaBetInfo;
    }());
    p21Data.CAreaBetInfo = CAreaBetInfo;
    // ================================各种操作数据=======================================
    // =============下注
    var COperateBetInfo = /** @class */ (function () {
        function COperateBetInfo() {
        }
        COperateBetInfo.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.location = data['location'];
            this.betMoney = data['money'];
            this.balance = data['currentBalance'];
        };
        return COperateBetInfo;
    }());
    p21Data.COperateBetInfo = COperateBetInfo;
    // =============买保险
    var COperateInsuranceInfo = /** @class */ (function () {
        function COperateInsuranceInfo() {
        }
        COperateInsuranceInfo.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.money = data['money'];
            this.balance = data['currentBalance'];
        };
        return COperateInsuranceInfo;
    }());
    p21Data.COperateInsuranceInfo = COperateInsuranceInfo;
    var COperateDoubleBet = /** @class */ (function () {
        function COperateDoubleBet() {
        }
        COperateDoubleBet.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.areaId = data['id'];
            this.money = data['money'];
            this.balance = data['currentBalance'];
        };
        return COperateDoubleBet;
    }());
    p21Data.COperateDoubleBet = COperateDoubleBet;
    var COperateGetPoker = /** @class */ (function () {
        function COperateGetPoker() {
        }
        COperateGetPoker.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.areaId = data['id'];
        };
        return COperateGetPoker;
    }());
    p21Data.COperateGetPoker = COperateGetPoker;
    var COperateStopPoker = /** @class */ (function () {
        function COperateStopPoker() {
        }
        COperateStopPoker.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.areaId = data['id'];
            this.pointStr = data['pointStr'];
        };
        return COperateStopPoker;
    }());
    p21Data.COperateStopPoker = COperateStopPoker;
    var COperateSplitPoker = /** @class */ (function () {
        function COperateSplitPoker() {
        }
        COperateSplitPoker.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.money = data['money'];
            this.balance = data['currentBalance'];
        };
        return COperateSplitPoker;
    }());
    p21Data.COperateSplitPoker = COperateSplitPoker;
    var COperateDealPoker = /** @class */ (function () {
        function COperateDealPoker() {
            this.PokerState = {
                UNREADY: 0, DEALED: 1, OPENED: 2
            };
            // this.pokerList = [];
            this.pokerListMap = {};
            this.pokerStateMap = {};
            this.areaIndex = 0;
            this.backPokers = [];
            this.hasDealBlue = false;
            this.startPokerID = 9999;
            this.endPokerID = -1;
        }
        COperateDealPoker.prototype.reset = function () {
            for (var key in this.pokerStateMap) {
                delete this.pokerStateMap[key];
            }
            for (var key in this.pokerListMap) {
                delete this.pokerListMap[key];
            }
            // this.pokerList.length = 0;
            this.areaIndex = 0;
            this.hasDealBlue = false;
            this.startPokerID = 9999;
            this.endPokerID = -1;
        };
        COperateDealPoker.CreateBuildData = function (type, bluePoker, waitPoker, pokers) {
            var ret = { type: type, bluePoker: bluePoker, waitPoker: waitPoker, pokers: pokers };
            return ret;
        };
        // 每次发牌都是增量更新
        COperateDealPoker.prototype.updateByData = function (data) {
            this.type = data['type'];
            this.bludPlace = data['bluePoker'];
            // 发牌器的2张牌
            var backPokers = null;
            if (data.hasOwnProperty('waitPoker')) {
                backPokers = data['waitPoker'];
            }
            else {
                backPokers = [];
            }
            if (backPokers) {
                for (var i = 0; i < backPokers.length; ++i) {
                    var backPoker = backPokers[i];
                    if (!this.backPokers[i]) {
                        this.backPokers[i] = new CPokerData_1.CPokerData();
                    }
                    this.backPokers[i].updateByData(backPoker);
                }
            }
            // 发下来的牌
            if (data.hasOwnProperty('pokers')) {
                var pokers = data['pokers'];
                for (var i = 0; i < pokers.length; ++i) {
                    var userID = pokers[i]['userId'];
                    var areaID = pokers[i]['id'];
                    // 庄的areaID， 后台发的是0, 要转成1
                    if (areaID <= 0) {
                        pokers[i]['id'] = 1;
                        areaID = 1;
                    }
                    if (areaID > 9) {
                        // 分牌
                        // 删除之前未分的牌
                        this.removeOrginPokerByPID_AreaID(userID);
                    }
                    var pokerInfo = this.getPokerByPID_AreaID(userID, areaID);
                    if (!pokerInfo) {
                        pokerInfo = this.addPokerByPID_AreaID(userID, areaID);
                    }
                    pokerInfo.updateByData(pokers[i]);
                    // this.pokerList.push(pokerInfo);
                    // this.pokerListMap
                    // 设置最大最小id
                    if (pokerInfo.getFirstID() < this.startPokerID) {
                        this.startPokerID = pokerInfo.getFirstID();
                    }
                    if (pokerInfo.getLastID() > this.endPokerID) {
                        this.endPokerID = pokerInfo.getLastID();
                    }
                }
            }
        };
        COperateDealPoker.prototype.setState = function (id, state) {
            this.pokerStateMap[id.toString()] = state;
        };
        COperateDealPoker.prototype.getState = function (id) {
            if (this.pokerStateMap.hasOwnProperty(id.toString())) {
                return this.pokerStateMap[id];
            }
            return this.PokerState.UNREADY;
        };
        COperateDealPoker.prototype.getBankPokerInfo = function () {
            var pokerList = this.getPokerListByPID(0);
            if (pokerList) {
                return pokerList[0];
            }
            return null;
        };
        COperateDealPoker.prototype.getAreaIDByPID_Index = function (pid, areaIdx) {
            var isSplited = this.isSplitedByPID(pid);
            if (isSplited) {
                return 10 + (1 + areaIdx);
            }
            else {
                return 1;
            }
        };
        COperateDealPoker.prototype.isSplitedByPID = function (pid) {
            var pokerList = this.getPokerListByPID(pid);
            if (!pokerList) {
                return false;
            }
            for (var i = 0; i < pokerList.length; ++i) {
                var pokerInfo = pokerList[i];
                if (pokerInfo.areaId > 9) {
                    return true;
                }
            }
            return false;
        };
        COperateDealPoker.prototype.isFinish = function (pid, areaIndex) {
            var pokerInfo = this.getPokerByPID_AreaIndex(pid, areaIndex);
            var ret = pokerInfo.isFinish();
            return ret;
        };
        // 获得玩家的牌列表
        COperateDealPoker.prototype.getPokerListByPID = function (pid) {
            if (this.pokerListMap.hasOwnProperty(pid.toString())) {
                return this.pokerListMap[pid];
            }
            return null;
        };
        COperateDealPoker.prototype.addPokerListByPID = function (pid) {
            var pokerList;
            if (this.pokerListMap.hasOwnProperty(pid.toString())) {
                pokerList = this.pokerListMap[pid];
            }
            if (!pokerList) {
                pokerList = [];
                this.pokerListMap[pid.toString()] = pokerList;
            }
            return pokerList;
        };
        COperateDealPoker.prototype.getPokerDataByPID_AreaIndex_pokerIndex = function (pid, areaIndex, pokerIndex) {
            var pokerInfo = this.getPokerByPID_AreaIndex(pid, areaIndex);
            if (!pokerInfo) {
                return null;
            }
            var pokerData = pokerInfo.getByIndex(pokerIndex);
            return pokerData;
        };
        COperateDealPoker.prototype.getPokerByPID_AreaIndex = function (pid, areaIndex) {
            var pokerList = this.getPokerListByPID(pid);
            if (!pokerList) {
                return null;
            }
            var areaID = this.getAreaIDByPID_Index(pid, areaIndex);
            for (var _i = 0, pokerList_1 = pokerList; _i < pokerList_1.length; _i++) {
                var pokerInfo = pokerList_1[_i];
                if (pokerInfo.areaId == areaID) {
                    return pokerInfo;
                }
            }
            return null;
        };
        COperateDealPoker.prototype.getPokerByPID_AreaID = function (pid, areaID) {
            var pokerList = this.getPokerListByPID(pid);
            if (!pokerList) {
                return null;
            }
            for (var _i = 0, pokerList_2 = pokerList; _i < pokerList_2.length; _i++) {
                var pokerInfo = pokerList_2[_i];
                if (pokerInfo.areaId == areaID) {
                    return pokerInfo;
                }
            }
            return null;
        };
        // 删除原本未分牌的牌
        COperateDealPoker.prototype.removeOrginPokerByPID_AreaID = function (pid) {
            var pokerList = this.getPokerListByPID(pid);
            if (!pokerList) {
                return null;
            }
            var i = 0;
            for (; i < pokerList.length; ++i) {
                var pokerInfo = pokerList[i];
                if (pokerInfo.areaId < 10) {
                    pokerList.splice(i, 1);
                    return pokerInfo;
                }
            }
            return null;
        };
        COperateDealPoker.prototype.addPokerByPID_AreaID = function (pid, areaID) {
            if (!(this.getPokerListByPID(pid))) {
                this.addPokerListByPID(pid);
            }
            var pokerInfo = this.getPokerByPID_AreaID(pid, areaID);
            if (!pokerInfo) {
                pokerInfo = new CPokerInfo();
                var pokerList = this.getPokerListByPID(pid);
                pokerList.push(pokerInfo);
            }
            return pokerInfo;
        };
        // getByIndex(idx:number) : CPokerInfo {
        //     for (let key in this.pokerListMap) {}
        //     if (this.pokerList.length > idx) {
        //         return this.pokerList[idx];
        //     }
        //     return null;
        // }
        COperateDealPoker.prototype.getDealDataByPokerID = function (id) {
            for (var key in this.pokerListMap) {
                var pokerList = this.pokerListMap[key];
                for (var _i = 0, pokerList_3 = pokerList; _i < pokerList_3.length; _i++) {
                    var pokerInfo = pokerList_3[_i];
                    for (var i = 0; i < pokerInfo.pokers.length; ++i) {
                        var pokerData = pokerInfo.pokers[i];
                        if (pokerData.id == id) {
                            // i : 牌的索引, 暂时没处理分牌
                            return new CPokerData_1.CDealPokerData(pokerData, id - this.startPokerID, pokerInfo.userId == 0, pokerInfo.userId, i);
                        }
                    }
                }
            }
            return null;
        };
        COperateDealPoker.prototype.getDealPokerList = function () {
            var ret = new Array();
            for (var id = this.startPokerID; id <= this.endPokerID; ++id) {
                var dealData = this.getDealDataByPokerID(id);
                if (!dealData) {
                    log_1.log.log('error : getDealPokerList(), dealData is null. ID : ', id, ' startID : ', this.startPokerID, ' endID : ', this.endPokerID);
                    continue;
                }
                ret[ret.length] = dealData;
            }
            return ret;
        };
        // 停牌/要牌/加倍/倒计时结束, 等情况需要判断操作是否完成, 其中停牌是在协议回来是处理, 要牌和加倍是在动画播放完处理
        COperateDealPoker.prototype.processOperaterFinish = function (pid) {
            if (0 == this.areaIndex) {
                var isSplited = this.isSplitedByPID(pid);
                if (isSplited) { // 没分牌只有一组牌就不需要处理, 分了牌有两组牌, 才处理
                    var isFinished = this.isFinish(pid, this.areaIndex);
                    if (isFinished) {
                        // 完成第一组牌操作
                        this.addAreaIndex();
                    }
                }
            }
        };
        COperateDealPoker.prototype.addAreaIndex = function () {
            this.areaIndex++;
        };
        return COperateDealPoker;
    }());
    p21Data.COperateDealPoker = COperateDealPoker;
    var CResultData = /** @class */ (function () {
        function CResultData() {
        }
        CResultData.prototype.updateByData = function (data) {
            this.resultList = [];
            if (data.hasOwnProperty('users')) {
                var users = data['users'];
                for (var i = 0; i < users.length; ++i) {
                    var resultInfo = new CResultInfo();
                    resultInfo.updateByData(users[i]);
                    this.resultList.push(resultInfo);
                }
            }
        };
        CResultData.prototype.getByPID = function (pid) {
            for (var _i = 0, _a = this.resultList; _i < _a.length; _i++) {
                var result = _a[_i];
                if (result && result.userId == pid) {
                    return result;
                }
            }
            return null;
        };
        return CResultData;
    }());
    p21Data.CResultData = CResultData;
    var CResultInfo = /** @class */ (function () {
        function CResultInfo() {
        }
        CResultInfo.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.startCoin = data['startCoin'];
            this.endCoin = data['endCoin'];
            this.totalWin = data['totalWin'];
            this.winInfos = data['winInfos'];
            this.validBet = data['validBet'];
            this.time = data['time'];
        };
        return CResultInfo;
    }());
    p21Data.CResultInfo = CResultInfo;
    var CAreaWinInfo = /** @class */ (function () {
        function CAreaWinInfo() {
        }
        return CAreaWinInfo;
    }());
    p21Data.CAreaWinInfo = CAreaWinInfo;
    var CPokerInfo = /** @class */ (function () {
        function CPokerInfo() {
            this.m_bStop = false;
        }
        CPokerInfo.CreateBuildData = function (pid, areaID, pointStr, type, pokers) {
            var ret = { userId: pid, id: areaID, pointStr: pointStr, type: type, pokers: pokers };
            return ret;
        };
        CPokerInfo.prototype.updateByData = function (data) {
            this.userId = data['userId'];
            this.areaId = data['id'];
            this.pointStr = data['pointStr'];
            this.type = data['type'];
            this.pokers = [];
            var tempPokerListData = data['pokers'];
            if (tempPokerListData) {
                for (var i = 0; i < tempPokerListData.length; ++i) {
                    var pokerData = new CPokerData_1.CPokerData();
                    pokerData.updateByData(tempPokerListData[i]);
                    pokerData.areaID = this.areaId;
                    this.pokers.push(pokerData);
                }
            }
        };
        CPokerInfo.prototype.stopPoker = function () {
            this.m_bStop = true;
        };
        CPokerInfo.prototype.getFirstID = function () {
            return this.pokers[0].id;
        };
        CPokerInfo.prototype.getLastID = function () {
            return this.pokers[this.pokers.length - 1].id;
        };
        CPokerInfo.prototype.getByIndex = function (index) {
            if (!this.pokers) {
                return null;
            }
            if (index < this.pokers.length) {
                return this.pokers[index];
            }
            return null;
        };
        CPokerInfo.prototype.getPoint = function () {
            var point = 0;
            for (var _i = 0, _a = this.pokers; _i < _a.length; _i++) {
                var poker = _a[_i];
                point += CPokerData_1.CPokerData.getRealPoint(poker);
            }
            return point;
        };
        // 或者count数量牌的点数, 用于在做表现时, 不一下子就显示最终的点数
        // p1 : 原始点数, p2 : A转成11的点数
        CPokerInfo.GetPointByCount = function (pokers, count) {
            var ret = { p1: 0, p2: -1, len: count };
            var curCount = 0;
            var point = 0;
            var hasA = false;
            for (var i = 0; i < pokers.length; ++i) {
                var poker = pokers[i];
                var tempPoint = CPokerData_1.CPokerData.getRealPoint(poker);
                point += tempPoint;
                if (tempPoint == 1) {
                    hasA = true;
                }
                curCount++;
                if (curCount >= count) {
                    break;
                }
            }
            ret.p1 = point;
            if (hasA && point <= 11) {
                ret.p2 = point + 10;
            }
            return ret;
        };
        CPokerInfo.prototype.getPointByCount = function (count) {
            return CPokerInfo.GetPointByCount(this.pokers, count);
        };
        CPokerInfo.prototype.canSplit = function () {
            if (!this.isMinLength()) {
                return false;
            }
            var p1 = CPokerData_1.CPokerData.getRealPoint(this.pokers[0]);
            var p2 = CPokerData_1.CPokerData.getRealPoint(this.pokers[1]);
            var isSplit = p1 == p2;
            if (!isSplit) {
                isSplit = p1 >= 10 && p2 >= 10;
            }
            return isSplit;
        };
        CPokerInfo.prototype.isMinLength = function () {
            return this.pokers.length == 2;
        };
        CPokerInfo.prototype.isMaxLength = function () {
            return this.pokers.length >= 7;
        };
        CPokerInfo.prototype.is21 = function () {
            var point = 0;
            for (var _i = 0, _a = this.pokers; _i < _a.length; _i++) {
                var poker = _a[_i];
                point += CPokerData_1.CPokerData.getRealPoint(poker);
            }
            return 21 == point;
        };
        CPokerInfo.IsBound = function (pokers) {
            var point = 0;
            for (var _i = 0, pokers_1 = pokers; _i < pokers_1.length; _i++) {
                var poker = pokers_1[_i];
                point += CPokerData_1.CPokerData.getRealPoint(poker);
            }
            return point > 21;
        };
        CPokerInfo.prototype.isBound = function () {
            return CPokerInfo.IsBound(this.pokers);
        };
        CPokerInfo.prototype.isBlackJack = function () {
            if (!this.isMinLength()) {
                return false;
            }
            var p1 = CPokerData_1.CPokerData.getRealPoint(this.pokers[0]);
            var p2 = CPokerData_1.CPokerData.getRealPoint(this.pokers[1]);
            // 有分牌的话不算blackJack
            return (p1 == 10 && p2 == 1) || (p1 == 1 && 10 == p2);
        };
        CPokerInfo.prototype.isFinish = function () {
            var isOk = false;
            if (this.m_bStop) {
                return true;
            }
            if (this.isMaxLength()) {
                return true;
            }
            if (this.isBlackJack()) {
                return true;
            }
            if (this.isBound()) {
                return true;
            }
            if (this.is21()) {
                return true;
            }
            return isOk;
        };
        CPokerInfo.prototype.getPokerCount = function () {
            return this.pokers.length;
        };
        Object.defineProperty(CPokerInfo.prototype, "isSplit", {
            get: function () { return this.areaId > 9; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CPokerInfo.prototype, "areaIndex", {
            get: function () {
                if (this.isSplit) {
                    return this.areaId - 11;
                }
                else {
                    return 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        return CPokerInfo;
    }());
    p21Data.CPokerInfo = CPokerInfo;
    var CCountDownData = /** @class */ (function () {
        function CCountDownData() {
        }
        CCountDownData.prototype.updateByData = function (data) {
            this.type = data['type'];
            this.userId = data['userId'];
            this.second = data['second'];
        };
        return CCountDownData;
    }());
    p21Data.CCountDownData = CCountDownData;
})(p21Data = exports.p21Data || (exports.p21Data = {}));
},{"../../../../hbcore/framework/log":256,"../../../../hbcore/util/ApiUtil":266,"../../_commonModel/CPokerData":21,"../../_commonModel/netData":23}],123:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EP21Conf = /** @class */ (function () {
    function EP21Conf() {
    }
    EP21Conf.SOUND_BET_COIN = 'bet_coin';
    EP21Conf.SOUND_BET_START_ALERT = 'bet_start_alert';
    EP21Conf.SOUND_BET_START = 'bet_start';
    EP21Conf.SOUND_BET_STOP = 'bet_stop';
    EP21Conf.SOUND_COIN_FLY_2_USER = 'coin_fly_to_user';
    EP21Conf.SOUND_COUNT_DOWN = 'countdown';
    EP21Conf.SOUND_DEAL_POKER = 'deal_poker';
    EP21Conf.SOUND_OPEN_POKER = 'open_poker';
    EP21Conf.SOUND_PAICAI = 'paicai';
    EP21Conf.SOUND_SHOU_POKER = 'shouPoker';
    EP21Conf.MAX_POKER_COUNT = 417;
    return EP21Conf;
}());
exports.default = EP21Conf;
},{}],124:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EP21Path = /** @class */ (function () {
    function EP21Path() {
    }
    EP21Path.getSoundPath = function (name) {
        return EP21Path.s_rootDir + name + EP21Path.TYPE;
    };
    EP21Path.s_rootDir = 'gamelist/baijiale/sound/';
    EP21Path.TYPE = '.wav';
    return EP21Path;
}());
exports.default = EP21Path;
},{}],125:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21HallRoomListComponent_1 = require("./component/CP21HallRoomListComponent");
var CP21HallTopComponent_1 = require("./component/CP21HallTopComponent");
var CComponent_1 = require("../../../common/component/CComponent");
var CP21ReconnectComponent_1 = require("./component/CP21ReconnectComponent");
var CP21HallRedirectComponent_1 = require("./component/CP21HallRedirectComponent");
var CP21HallController = /** @class */ (function (_super) {
    __extends(CP21HallController, _super);
    function CP21HallController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CP21HallController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(new CP21HallRoomListComponent_1.default(this));
        this.m_compManager.addComponent(new CP21HallTopComponent_1.default(this));
        this.m_compManager.addComponent(new CP21ReconnectComponent_1.default(this));
        this.m_compManager.addComponent(new CP21HallRedirectComponent_1.default(this));
        this.m_compManager.start();
        // StopAllMouseEvent.register(this.m_view);
        this.updateView();
    };
    CP21HallController.prototype.onDisable = function () {
        // StopAllMouseEvent.unregister(this.m_view);
        this.m_compManager.destroy();
        this.m_compManager = null;
    };
    Object.defineProperty(CP21HallController.prototype, "compManager", {
        get: function () {
            return this.m_compManager;
        },
        enumerable: true,
        configurable: true
    });
    CP21HallController.prototype.updateView = function () {
        this.m_compManager.process();
    };
    Object.defineProperty(CP21HallController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    return CP21HallController;
}(Laya.Script));
exports.default = CP21HallController;
},{"../../../common/component/CComponent":15,"./component/CP21HallRedirectComponent":127,"./component/CP21HallRoomListComponent":128,"./component/CP21HallTopComponent":129,"./component/CP21ReconnectComponent":130}],126:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CP21HallView = /** @class */ (function (_super) {
    __extends(CP21HallView, _super);
    function CP21HallView() {
        return _super.call(this) || this;
    }
    CP21HallView.prototype.onDestroy = function () {
    };
    CP21HallView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CP21HallView.prototype.onDisable = function () {
        this._offEvent();
    };
    CP21HallView.prototype._updateView = function () {
    };
    CP21HallView.prototype._onEvent = function () {
    };
    CP21HallView.prototype._offEvent = function () {
    };
    Object.defineProperty(CP21HallView.prototype, "topView", {
        get: function () {
            return this.m_topView;
        },
        set: function (v) {
            this.m_topView = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21HallView.prototype, "topBox", {
        get: function () {
            return this.getChildByName('top_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21HallView.prototype, "panel", {
        get: function () {
            return this.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21HallView.prototype, "deskList", {
        get: function () {
            return this.panel.getChildByName('desk_list');
        },
        enumerable: true,
        configurable: true
    });
    CP21HallView.prototype.getDeskRoomName = function (item, index) {
        return item.getChildByName('room' + (index));
    };
    CP21HallView.prototype.getDeskRoomTotalMoneyLimit = function (item) {
        return item.getChildByName('room_money_limit');
    };
    CP21HallView.prototype.getDeskRoomBetsRull = function (item) {
        return item.getChildByName('room_money_bets');
    };
    CP21HallView.prototype.getDeskImgNormal = function (item) { return item.getChildByName('desk_img'); };
    CP21HallView.prototype.getDeskImgTest = function (item) { return item.getChildByName('desk_img2'); };
    return CP21HallView;
}(layaMaxUI_1.ui.gamelist.p21.P21HallSceneUI));
exports.default = CP21HallView;
},{"../../../../ui/layaMaxUI":271}],127:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21HallTopComponent_1 = require("./CP21HallTopComponent");
var CP21HallRedirectComponent = /** @class */ (function (_super) {
    __extends(CP21HallRedirectComponent, _super);
    function CP21HallRedirectComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CP21HallRedirectComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21HallRedirectComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21HallRedirectComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21HallRedirectComponent.prototype.process = function () {
        var redirect = GM_1.GM.gameData.getRedirect();
        if (redirect > 0) {
            var topComponent = this.m_pController.compManager.getComponent(CP21HallTopComponent_1.default);
            if (topComponent) {
                topComponent.openAddMoneyView();
            }
        }
        GM_1.GM.gameData.resetRedirect();
    };
    return CP21HallRedirectComponent;
}(CComponent_1.CComponent));
exports.default = CP21HallRedirectComponent;
},{"../../../../../gm/GM":221,"../../../../common/component/CComponent":15,"./CP21HallTopComponent":129}],128:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var NetState_1 = require("../../../../../hbcore/net/NetState");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CComponent_1 = require("../../../../common/component/CComponent");
var CP21Net_1 = require("../../net/CP21Net");
var CWarnView_1 = require("../../../../common/CWarnView");
var CP21HallTopComponent_1 = require("./CP21HallTopComponent");
var CP21HallRoomListComponent = /** @class */ (function (_super) {
    __extends(CP21HallRoomListComponent, _super);
    function CP21HallRoomListComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CP21HallRoomListComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_view.panel.vScrollBarSkin = "";
        this.m_view.panel.vScrollBar.autoHide = true;
        this.m_view.deskList.renderHandler = Laya.Handler.create(this, this._onDeskRenderItem, null, false);
        this.m_view.deskList.mouseHandler = Laya.Handler.create(this, this._onDeskSelectHandler, null, false);
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.EnterRoom, this._onEnterGameRes);
        this.m_entered = false;
        this.m_netState = new NetState_1.default();
        return true;
    };
    CP21HallRoomListComponent.prototype.onDestroy = function () {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.EnterRoom);
        if (this.m_view.deskList.renderHandler) {
            this.m_view.deskList.renderHandler.recover();
            this.m_view.deskList.renderHandler = null;
        }
        if (this.m_view.deskList.mouseHandler) {
            this.m_view.deskList.mouseHandler.recover();
            this.m_view.deskList.mouseHandler = null;
        }
    };
    CP21HallRoomListComponent.prototype.process = function () {
        this._updateView();
    };
    CP21HallRoomListComponent.prototype._updateView = function () {
        var stageInfo = GM_1.GM.instance.userInfo.gameData.curStageInfo;
        this.m_view.deskList.array = stageInfo.stageInfos;
    };
    CP21HallRoomListComponent.prototype._onDeskRenderItem = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var deskInfo = item.dataSource;
        for (var i = 0; i < 4; ++i) {
            if (i == idx) {
                this.m_view.getDeskRoomName(item, i).visible = true;
            }
            else {
                this.m_view.getDeskRoomName(item, i).visible = false;
            }
        }
        var isTest = 0 == deskInfo.stageId;
        this.m_view.getDeskImgNormal(item).visible = !isTest;
        this.m_view.getDeskImgTest(item).visible = isTest;
        this.m_view.getDeskRoomTotalMoneyLimit(item).text = Lang_1.default.Get('game_hall_join_rule', { v1: deskInfo.minJoinCoin });
        this.m_view.getDeskRoomBetsRull(item).text = Lang_1.default.Get('game_hall_bets_rule', { v1: deskInfo.minBet, v2: deskInfo.maxBet });
    };
    CP21HallRoomListComponent.prototype._onDeskSelectHandler = function (e, idx) {
        var _this = this;
        if (this.m_entered) {
            return;
        }
        if (e.type != Laya.Event.CLICK) {
            return;
        }
        if (this.m_netState.isNetStateBusy(CP21Net_1.p21Net.NetConf.EnterRoom)) {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get('net_res_busy'));
            return;
        }
        var cell = this.m_view.deskList.getCell(idx);
        if (cell && cell.dataSource) {
            GM_1.GM.playButtonSound();
            var deskInfo = cell.dataSource;
            if (deskInfo) {
                var hasEnoughMoney = GM_1.GM.instance.userInfo.balance >= deskInfo.minJoinCoin;
                if (!hasEnoughMoney) {
                    CWarnView_1.default.instance().showNotEnoughMoney(this, function () {
                        var topComponent = _this.m_pController.compManager.getComponent(CP21HallTopComponent_1.default);
                        if (topComponent) {
                            topComponent.openAddMoneyView();
                        }
                    }, null);
                }
                else {
                    this.m_netState.setNetStateBusy(CP21Net_1.p21Net.NetConf.EnterRoom);
                    CP21Net_1.p21Net.sendEnterRoom(deskInfo.stageId);
                }
            }
        }
    };
    CP21HallRoomListComponent.prototype._onEnterGameRes = function (params) {
        this.m_netState.setNetStateIdle(CP21Net_1.p21Net.NetConf.EnterRoom);
        if (params.errorCode != 0) {
            GM_1.GM.instance.messageBox.showNetError(params.errorCode);
            return;
        }
        this.m_entered = true;
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_ROOM);
    };
    Object.defineProperty(CP21HallRoomListComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CP21HallRoomListComponent;
}(CComponent_1.CComponent));
exports.default = CP21HallRoomListComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/net/NetState":263,"../../../../common/CWarnView":12,"../../../../common/component/CComponent":15,"../../net/CP21Net":131,"./CP21HallTopComponent":129}],129:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var GM_1 = require("../../../../../gm/GM");
var CTopView_1 = require("../../../../common/CTopView");
var CUserView_1 = require("../../../../hall/user/CUserView");
var CRuleView_1 = require("../../../../hall/rule/CRuleView");
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CComponent_1 = require("../../../../common/component/CComponent");
var CP21HallTopComponent = /** @class */ (function (_super) {
    __extends(CP21HallTopComponent, _super);
    function CP21HallTopComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CP21HallTopComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_BALANCE_UPDATE);
        this.m_view.topView.unregister();
    };
    CP21HallTopComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CP21HallTopComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        // 变化部分
        var topBox = this.m_view.topBox;
        var infoBoxVisible = true;
        this.m_view.topView = new CTopView_1.CTopView(topBox);
        this.m_view.topView.infoBox.visible = infoBoxVisible;
        this.m_view.topView.register(this, this.onReturn_uiHandler, this.onUser_uiHandler, this.onRule_uiHandler, this.onAddMoney_uiHandle);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_BALANCE_UPDATE, this._onBalanceUpdate);
        this._updateTop();
        return true;
    };
    CP21HallTopComponent.prototype._onBalanceUpdate = function () {
        this._updateTop();
    };
    CP21HallTopComponent.prototype._updateTop = function () {
        var money = GM_1.GM.instance.userInfo.balance;
        var nickName = GM_1.GM.instance.userInfo.nickName;
        var topDisplayData = new CTopView_1.CTopViewDisplayData(money, nickName);
        this.m_view.topView.updateView(topDisplayData, GM_1.GM.coinMap.getCoinType(), false);
    };
    // return 
    CP21HallTopComponent.prototype.onReturn_uiHandler = function () {
        GM_1.GM.playButtonSound();
        var returnEvent = GMEvent_1.default.EVENT_ENTER_HALL;
        GM_1.GM.instance.eventDispater.event(returnEvent);
    };
    ;
    // user
    CP21HallTopComponent.prototype.onUser_uiHandler = function () {
        var _this = this;
        GM_1.GM.playButtonSound();
        var viewIdx = CP21HallTopComponent.ViewIndex.User;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.process(CUserView_1.default, CUserView_1.default.SIGN, viewIdx, null, false, null, Laya.Handler.create(this, function () {
            _this._updateTop();
        }));
    };
    ;
    // rule
    CP21HallTopComponent.prototype.onRule_uiHandler = function () {
        GM_1.GM.playButtonSound();
        this.getComponent(COpenSubViewComponent_1.default).process(CRuleView_1.default, CRuleView_1.default.SIGN, CP21HallTopComponent.ViewIndex.Rule);
    };
    ;
    // addMoney
    CP21HallTopComponent.prototype.openAddMoneyView = function () {
        this.onAddMoney_uiHandle(false);
    };
    // addMoney
    CP21HallTopComponent.prototype.onAddMoney_uiHandle = function (isFromUI) {
        var _this = this;
        if (isFromUI === void 0) { isFromUI = true; }
        if (isFromUI) {
            GM_1.GM.playButtonSound();
        }
        var viewIdx = CP21HallTopComponent.ViewIndex.User;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        var viewOpenFunction = function () {
            var view = openComponent.getView(viewIdx).view;
            view.off('onOpened', this, viewOpenFunction);
            view.redirectToPay();
        };
        openComponent.process(CUserView_1.default, CUserView_1.default.SIGN, viewIdx, null, false, Laya.Handler.create(this, function () {
            var view = openComponent.getView(viewIdx).view;
            if (!view.opened) {
                view.on('onOpened', _this, viewOpenFunction);
            }
            else {
                view.redirectToPay();
            }
        }), Laya.Handler.create(this, function () {
            _this._updateTop();
        }));
    };
    Object.defineProperty(CP21HallTopComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    CP21HallTopComponent.ViewIndex = {
        User: 0, Rule: 1
    };
    return CP21HallTopComponent;
}(CComponent_1.CComponent));
exports.default = CP21HallTopComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../common/CTopView":11,"../../../../common/component/CComponent":15,"../../../../common/component/COpenSubViewComponent":16,"../../../../hall/rule/CRuleView":196,"../../../../hall/user/CUserView":199}],130:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../../common/component/CComponent");
var GM_1 = require("../../../../../gm/GM");
var GameNetResponse_1 = require("../../../../../gm/GameNetResponse");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ReconnectComponent = /** @class */ (function (_super) {
    __extends(CP21ReconnectComponent, _super);
    function CP21ReconnectComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CP21ReconnectComponent.prototype.onDestroy = function () {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, GameNetResponse_1.GameConf.Reconnect);
        _super.prototype.onDestroy.call(this);
    };
    CP21ReconnectComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21ReconnectComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21ReconnectComponent.prototype.process = function () {
        var loginData = GM_1.GM.instance.userInfo.gameData.curStageInfo;
        if (loginData.hasInGame > 0) {
            loginData.hasInGame = 0;
            log_1.log.log('开始重连');
            this.m_pController.view.mouseEnabled = false;
            var pSfsGame = GM_1.GM.instance.network.sfsGame;
            pSfsGame.Emitter.on(this, GameNetResponse_1.GameConf.Reconnect, this._onReconnectRes);
            pSfsGame.send(GameNetResponse_1.GameConf.Reconnect, { roomName: loginData.roomName });
        }
    };
    CP21ReconnectComponent.prototype._onReconnectRes = function (res) {
        var pSfsGame = GM_1.GM.instance.network.sfsGame;
        pSfsGame.Emitter.off(this, GameNetResponse_1.GameConf.Reconnect);
        var newData = CBaseNet_1.default.Clone(res, CBaseNet_1.default);
        if (newData.isError) {
            log_1.log.log('重连失败');
            this.m_pController.view.mouseEnabled = true;
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('reconnect_fail'));
            return;
        }
        log_1.log.log('重连成功');
    };
    return CP21ReconnectComponent;
}(CComponent_1.CComponent));
exports.default = CP21ReconnectComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GameNetResponse":223,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../../../common/component/CComponent":15,"../../../../net/CBaseNet":216}],131:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../gm/GM");
var p21Net;
(function (p21Net) {
    p21Net.NetConf = {
        // send
        EnterRoom: '1103',
        Bet: '1104',
        Insurance: '1105',
        DoubleBet: '1106',
        GetPoker: '1107',
        StopPoker: '1108',
        SplitPoker: '1109',
        ClientReady: '1110',
        PokerDetail: '1111',
        // broadcast
        BroadcastBet: '1207',
        BroadcastInsurance: '1208',
        BroadcastDouble: '1209',
        BroadcastGetPoker: '1210',
        BroadcastStop: '1211',
        BroadcastSplit: '1212',
        BroadcastDeal: '1213',
        BroadcastGState: '1214',
        BroadcastPState: '1215',
        // 结算
        Result: '1216',
        NewRound: '1217',
    };
    function getHallNet() {
        return GM_1.GM.instance.network.sfsHall;
    }
    function getGameNet() {
        return GM_1.GM.instance.network.sfsGame;
    }
    // ==================================send=====================================================
    function sendEnterRoom(stageId) {
        getGameNet().send(p21Net.NetConf.EnterRoom, { stageId: stageId });
    }
    p21Net.sendEnterRoom = sendEnterRoom;
    ;
    function sendClientReady() {
        getGameNet().send(p21Net.NetConf.ClientReady, {}, true);
    }
    p21Net.sendClientReady = sendClientReady;
    ;
    function sendPokerDetail(begin, end) {
        getGameNet().send(p21Net.NetConf.PokerDetail, { begin: begin, end: end }, true);
    }
    p21Net.sendPokerDetail = sendPokerDetail;
    ;
    // 下注
    function sendBet(betMoney) {
        getGameNet().send(p21Net.NetConf.Bet, { betMoney: betMoney }, true);
    }
    p21Net.sendBet = sendBet;
    ;
    // code : 是否下保险 0 下保险，1 不下保险
    function sendInsurance(code) {
        getGameNet().send(p21Net.NetConf.Insurance, { code: code }, true);
    }
    p21Net.sendInsurance = sendInsurance;
    ;
    // id ：注区ID 1 / 11 12
    function sendDoubleBet(areaID) {
        getGameNet().send(p21Net.NetConf.DoubleBet, { id: areaID }, true);
    }
    p21Net.sendDoubleBet = sendDoubleBet;
    ;
    // id ：注区ID, 1,2,3,4,5
    function sendGetPoker(areaID) {
        getGameNet().send(p21Net.NetConf.GetPoker, { id: areaID }, true);
    }
    p21Net.sendGetPoker = sendGetPoker;
    ;
    // id ：注区ID, 1,2,3,4,5
    function sendStopPoker(areaID) {
        getGameNet().send(p21Net.NetConf.StopPoker, { id: areaID }, true);
    }
    p21Net.sendStopPoker = sendStopPoker;
    ;
    // id ：注区ID, 1,2,3,4,5
    function sendSplitPoker(areaID) {
        getGameNet().send(p21Net.NetConf.SplitPoker, { id: areaID }, true);
    }
    p21Net.sendSplitPoker = sendSplitPoker;
    ;
})(p21Net = exports.p21Net || (exports.p21Net = {}));
},{"../../../../gm/GM":221}],132:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Net_1 = require("./net/CP21Net");
var CP21Data_1 = require("./data/CP21Data");
exports.p21 = {
    net: CP21Net_1.p21Net,
    data: CP21Data_1.p21Data
};
},{"./data/CP21Data":122,"./net/CP21Net":131}],133:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NetState_1 = require("../../../../hbcore/net/NetState");
var GM_1 = require("../../../../gm/GM");
var CComponent_1 = require("../../../common/component/CComponent");
var ApiUtil_1 = require("../../../../hbcore/util/ApiUtil");
var CP21NetComponent_1 = require("./component/CP21NetComponent");
var CP21ProcedureComponent_1 = require("./procedure/CP21ProcedureComponent");
var CP21LocationComponent_1 = require("./component/CP21LocationComponent");
var CP21TopComponent_1 = require("./component/CP21TopComponent");
var CP21RoomStateComponent_1 = require("./component/CP21RoomStateComponent");
var CP21BetsComponent_1 = require("./component/CP21BetsComponent");
var CP21DealPortComponent_1 = require("./component/CP21DealPortComponent");
var CP21OpenAnimationComponent_1 = require("./component/CP21OpenAnimationComponent");
var CP21DealComponent_1 = require("./component/CP21DealComponent");
var CP21OpenPokerComponent_1 = require("./component/CP21OpenPokerComponent");
var CP21ResultComponent_1 = require("./component/CP21ResultComponent");
var CP21BottomComponent_1 = require("./component/CP21BottomComponent");
var CP21LightWinAreaComponent_1 = require("./component/CP21LightWinAreaComponent");
var CP21RecoverPokerComponent_1 = require("./component/CP21RecoverPokerComponent");
var CP21PaicaiComponent_1 = require("./component/CP21PaicaiComponent");
var CP21ShuffleComponent_1 = require("./component/CP21ShuffleComponent");
var CP21SoundComponent_1 = require("./component/CP21SoundComponent");
var CP21ControlBtnComponent_1 = require("./component/CP21ControlBtnComponent");
var CP21PokerComponent_1 = require("./component/CP21PokerComponent");
var CP21BankerHistroyComponent_1 = require("./component/CP21BankerHistroyComponent");
var CP21BgComponent_1 = require("./procedure/CP21BgComponent");
var CP21Controller = /** @class */ (function (_super) {
    __extends(CP21Controller, _super);
    function CP21Controller() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CP21Controller.prototype.onEnable = function () {
        GM_1.GM.instance.gameStage.soundSystem.stopMusic();
        this.m_view = this.owner;
        this.m_netState = new NetState_1.default();
        this.m_isReady = false;
        this.m_isBeted = false;
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(this.m_netComponent = new CP21NetComponent_1.CP21NetComponent(this));
        this.m_compManager.addComponent(new CP21BgComponent_1.default(this));
        this.m_compManager.addComponent(this.m_procedureComponent = new CP21ProcedureComponent_1.default(this));
        this.m_compManager.addComponent(new CP21LocationComponent_1.default(this));
        this.m_compManager.addComponent(new CP21TopComponent_1.default(this));
        this.m_compManager.addComponent(this.m_roomStateComponent = new CP21RoomStateComponent_1.default(this));
        this.m_compManager.addComponent(new CP21BetsComponent_1.CP21BetsComponent(this));
        this.m_compManager.addComponent(new CP21DealPortComponent_1.default(this));
        this.m_compManager.addComponent(new CP21OpenAnimationComponent_1.default(this));
        this.m_compManager.addComponent(new CP21DealComponent_1.default(this));
        this.m_compManager.addComponent(new CP21OpenPokerComponent_1.default(this));
        this.m_compManager.addComponent(new CP21ResultComponent_1.default(this));
        this.m_compManager.addComponent(new CP21BottomComponent_1.default(this));
        this.m_compManager.addComponent(new CP21LightWinAreaComponent_1.default(this));
        this.m_compManager.addComponent(new CP21RecoverPokerComponent_1.default(this));
        this.m_compManager.addComponent(new CP21PaicaiComponent_1.default(this));
        this.m_compManager.addComponent(new CP21ShuffleComponent_1.default(this));
        this.m_compManager.addComponent(new CP21ControlBtnComponent_1.default(this));
        this.m_compManager.addComponent(new CP21PokerComponent_1.default(this));
        this.m_compManager.addComponent(new CP21BankerHistroyComponent_1.default(this));
        this.m_compManager.addComponent(this.m_soundComponent = new CP21SoundComponent_1.default(this));
        // 测试注释掉
        // if (GM.instance.userInfo.userSetting.isNewBacc) {
        //     GM.instance.userInfo.userSetting.isNewBacc = false;
        //     this.m_compManager.addComponent(new CP21TutorialComponent(this));
        // }
        this.m_compManager.start();
        GM_1.GM.instance.gameStage.sequentialSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._waitStart));
    };
    CP21Controller.prototype._waitStart = function () {
        var isStarted = this.m_compManager.start();
        if (isStarted) {
            Laya.timer.clear(this, this._waitStart);
            this.m_isReady = true;
            this.m_compManager.process();
            this.m_compManager.getComponent(CP21ProcedureComponent_1.default).process();
            return true;
        }
        return false;
    };
    CP21Controller.prototype.onDisable = function () {
        this.m_compManager.destroy();
        this.m_compManager = null;
    };
    CP21Controller.prototype.getComponent = function (cls) {
        if (!this.m_compManager) {
            return null;
        }
        ;
        return this.m_compManager.getComponent(cls);
    };
    Object.defineProperty(CP21Controller.prototype, "netComponent", {
        get: function () {
            return this.m_netComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21Controller.prototype, "roomStateComponent", {
        get: function () {
            return this.m_roomStateComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21Controller.prototype, "view", {
        get: function () {
            return this.m_view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21Controller.prototype, "soundComponent", {
        get: function () {
            return this.m_soundComponent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21Controller.prototype, "netState", {
        get: function () { return this.m_netState; },
        enumerable: true,
        configurable: true
    });
    return CP21Controller;
}(Laya.Script));
exports.default = CP21Controller;
},{"../../../../gm/GM":221,"../../../../hbcore/net/NetState":263,"../../../../hbcore/util/ApiUtil":266,"../../../common/component/CComponent":15,"./component/CP21BankerHistroyComponent":144,"./component/CP21BetsComponent":146,"./component/CP21BottomComponent":147,"./component/CP21ControlBtnComponent":149,"./component/CP21DealComponent":150,"./component/CP21DealPortComponent":151,"./component/CP21LightWinAreaComponent":153,"./component/CP21LocationComponent":154,"./component/CP21NetComponent":155,"./component/CP21OpenAnimationComponent":156,"./component/CP21OpenPokerComponent":157,"./component/CP21PaicaiComponent":158,"./component/CP21PokerComponent":159,"./component/CP21RecoverPokerComponent":160,"./component/CP21ResultComponent":161,"./component/CP21RoomStateComponent":162,"./component/CP21ShuffleComponent":164,"./component/CP21SoundComponent":165,"./component/CP21TopComponent":166,"./procedure/CP21BgComponent":167,"./procedure/CP21ProcedureComponent":172}],134:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var CP21View = /** @class */ (function (_super) {
    __extends(CP21View, _super);
    function CP21View() {
        var _this = _super.call(this) || this;
        _this.PO_BOX_SPLIT_Y = 43;
        _this.PO_BOX_UNSPLIT_Y = 86;
        return _this;
    }
    CP21View.prototype.onDestroy = function () {
    };
    CP21View.prototype.onEnable = function () {
        this.mouseEnabled = true;
    };
    CP21View.prototype.onDisable = function () {
    };
    Object.defineProperty(CP21View.prototype, "topViewBase", {
        // ==================top
        // top_box
        get: function () { return this.getChildByName('top'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk", {
        // ==================port emitter
        // desk
        get: function () { return this.getChildByName('desk'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter", {
        // emitter
        get: function () { return this.desk.getChildByName('emitter'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_bg", {
        get: function () { return this.desk_emitter.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_poker", {
        get: function () { return this.desk_emitter.getChildByName('poker'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_pokerAdd", {
        get: function () { return this.desk_emitter.getChildByName('pokerAdd'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_pokerBack", {
        get: function () { return this.desk_emitter_pokerAdd.getChildByName('pokerBack'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_pokerBlue", {
        get: function () { return this.desk_emitter_pokerAdd.getChildByName('pokerBlue'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_top", {
        get: function () { return this.desk_emitter.getChildByName('top'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_cicle1", {
        get: function () { return this.desk_emitter.getChildByName('cicle1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_line1", {
        get: function () { return this.desk_emitter.getChildByName('line1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_cicle2", {
        get: function () { return this.desk_emitter.getChildByName('cicle2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_line2", {
        get: function () { return this.desk_emitter.getChildByName('line2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info2", {
        // info2
        get: function () { return this.desk_emitter.getChildByName('info2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info2_num2", {
        get: function () { return this.desk_emitter_info2.getChildByName('num2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info2_final2", {
        get: function () { return this.desk_emitter_info2.getChildByName('final2'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info1", {
        // info1
        get: function () { return this.desk_emitter.getChildByName('info1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info1_num1", {
        get: function () { return this.desk_emitter_info1.getChildByName('num1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "desk_emitter_info1_final1", {
        get: function () { return this.desk_emitter_info1.getChildByName('final1'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState", {
        // ==================roomstate
        // roomState
        get: function () { return this.getChildByName('roomState'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_bg", {
        get: function () { return this.roomState.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_countDown", {
        // countDown
        get: function () { return this.roomState.getChildByName('countDown'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_countDown_circel", {
        get: function () { return this.roomState_countDown.getChildByName('circel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_countDown_lbl", {
        get: function () { return this.roomState_countDown.getChildByName('lbl'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_gaming", {
        get: function () { return this.roomState.getChildByName('gaming'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_result", {
        get: function () { return this.roomState.getChildByName('result'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "roomState_shuffle", {
        get: function () { return this.roomState.getChildByName('shuffle'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betsCoin", {
        // betsCoin
        get: function () { return this.getChildByName('betsCoin'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betsCoin_coin", {
        // get betsCoin_cancelGray() : Laya.Image { return this.betsCoin.getChildByName('cancelGray') as Laya.Image; }
        get: function () { return this.betsCoin.getChildByName('coin'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betsCoin_coin_panel", {
        get: function () { return this.betsCoin_coin.getChildByName('panel'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betsCoin_coin_list", {
        get: function () { return this.betsCoin_coin_panel.getChildByName('list'); },
        enumerable: true,
        configurable: true
    });
    CP21View.prototype.get_betsCoin_coin_list_selectBox = function (item) { return item.getChildByName('selectBox'); };
    CP21View.prototype.get_betsCoin_coin_list_money = function (item) { return item.getChildByName('money'); };
    Object.defineProperty(CP21View.prototype, "betsCoin_coin_right", {
        get: function () { return this.betsCoin_coin.getChildByName('right'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betsCoin_coin_left", {
        get: function () { return this.betsCoin_coin.getChildByName('left'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "userBox", {
        // LOCATION
        get: function () { return this.getChildByName('userBox'); },
        enumerable: true,
        configurable: true
    });
    CP21View.prototype.getLocationItem = function (idx) { return this.userBox.getChildByName('user' + (idx + 1)); };
    CP21View.prototype.get_userList_my2 = function (item) { return item.getChildByName('my2'); };
    CP21View.prototype.get_userList_other1 = function (item) { return item.getChildByName('other1'); };
    CP21View.prototype.get_userList_my1 = function (item) { return item.getChildByName('my1'); };
    CP21View.prototype.get_userList_other2 = function (item) { return item.getChildByName('other2'); };
    CP21View.prototype.get_userList_otherName = function (item) { return item.getChildByName('otherName'); };
    CP21View.prototype.get_userList_otherMoney = function (item) { return item.getChildByName('otherMoney'); };
    CP21View.prototype.get_userList_myName = function (item) { return item.getChildByName('myName'); };
    CP21View.prototype.get_userList_myMoney = function (item) { return item.getChildByName('myMoney'); };
    CP21View.prototype.get_userList_empty = function (item) { return item.getChildByName('empty'); };
    CP21View.prototype.get_userList_resultTips = function (item) { return item.getChildByName('result'); };
    CP21View.prototype.get_userList_resultTxt = function (item) { return item.getChildByName('resultTxt'); };
    CP21View.prototype.get_userList_bg = function (item) { return item.getChildByName('bg'); };
    CP21View.prototype.get_userList_bao = function (idx) { return this.userBox.getChildByName('bao' + (idx + 1)); };
    CP21View.prototype.get_userList_cd = function (idx) { return this.userBox.getChildByName('cd' + (idx + 1)); };
    CP21View.prototype.get_userList_cdTxt = function (idx) { return this.userBox.getChildByName('cdTxt' + (idx + 1)); };
    Object.defineProperty(CP21View.prototype, "fenPaiBtn", {
        // button
        get: function () { return this.desk.getChildByName('fenfaiBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "fenPaiGrayBtn", {
        get: function () { return this.desk.getChildByName('fenpai2Btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "confirmBtn", {
        get: function () { return this.desk.getChildByName('confirmBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "cancelBtn", {
        get: function () { return this.desk.getChildByName('cancelBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "fapaiBtn", {
        get: function () { return this.desk.getChildByName('fapaiBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "doubleBtn", {
        get: function () { return this.desk.getChildByName('doubleBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "stopBtn", {
        get: function () { return this.desk.getChildByName('stopBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "callBtn", {
        get: function () { return this.desk.getChildByName('callBtn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "betArea", {
        // betArea
        get: function () { return this.desk.getChildByName('betArea'); },
        enumerable: true,
        configurable: true
    });
    CP21View.prototype.getBetAreaSelect = function (idx) { return this.betArea.getChildByName('select' + (1 + idx)); };
    CP21View.prototype.getBetAreaAdd = function (idx) { return this.getBetAreaSelect(idx).getChildByName('add'); };
    // num1
    CP21View.prototype.getBetAreaNumBox = function (idx) { return this.betArea.getChildByName('num' + (1 + idx)); };
    CP21View.prototype.getDesk_bets_numBg1 = function (item) { return item.getChildByName('bg1'); };
    CP21View.prototype.getDesk_bets_numBg2 = function (item) { return item.getChildByName('bg2'); };
    CP21View.prototype.getDesk_bets_numNum = function (item) { return item.getChildByName('num'); };
    CP21View.prototype.getDesk_bets_numCoin = function (item) { return item.getChildByName('coin'); };
    Object.defineProperty(CP21View.prototype, "bankerHsitroy", {
        // bankerHistroy
        get: function () { return this.getChildByName('bankHistory'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "bankerHistroyItemList", {
        get: function () { return this.bankerHsitroy.getChildByName('list'); },
        enumerable: true,
        configurable: true
    });
    CP21View.prototype.getBankerHistroyItemWhite = function (item) { return item.getChildByName('white'); };
    CP21View.prototype.getBankerHistroyItemRed = function (item) { return item.getChildByName('red'); };
    CP21View.prototype.getBankerHistroyItemPoint = function (item) { return item.getChildByName('txt'); };
    Object.defineProperty(CP21View.prototype, "pokerBox", {
        // poker
        get: function () { return this.desk.getChildByName('poker'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "pokerBankBox", {
        get: function () { return this.pokerBox.getChildByName('bank'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "pokerBankPoBox", {
        get: function () { return this.pokerBankBox.getChildByName('poBox'); },
        enumerable: true,
        configurable: true
    });
    CP21View.prototype.getPokerPlayerBox = function (idx) { return this.pokerBox.getChildByName('player' + (1 + idx)); };
    CP21View.prototype.getPokerPlayerPoBox = function (locationIndex, areaIndex) {
        return this.getPokerPlayerBox(locationIndex).getChildByName('poBox' + (1 + areaIndex));
    };
    // getPokerPlayerPoBox2(idx:number) { return this.getPokerPlayerBox(idx).getChildByName('poBox2') as Laya.Box;}
    CP21View.prototype.getPoker = function (item, idx) { return item.getChildByName('p' + (idx + 1)); };
    CP21View.prototype.getBaoAnimation = function (item) { return item.getChildByName('baoAni'); };
    CP21View.prototype.getDark = function (item) { return item.getChildByName('dark'); }; // 只有玩家有
    CP21View.prototype.getPointBox = function (item) { return item.getChildByName('point'); }; //
    CP21View.prototype.getPointTxt = function (pointBox) { return pointBox.getChildByName('point'); };
    CP21View.prototype.getPointBg1 = function (pointBox) { return pointBox.getChildByName('bg1'); };
    CP21View.prototype.getPointBg2 = function (pointBox) { return pointBox.getChildByName('bg2'); };
    Object.defineProperty(CP21View.prototype, "bottomView", {
        get: function () { return this.getChildByName('bottom'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "bgImg", {
        get: function () { return this.getChildByName('bg'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21View.prototype, "bgTestImg", {
        get: function () { return this.getChildByName('bg2'); },
        enumerable: true,
        configurable: true
    });
    return CP21View;
}(layaMaxUI_1.ui.gamelist.p21.P21SceneUI));
exports.default = CP21View;
},{"../../../../ui/layaMaxUI":271}],135:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var EP21Conf_1 = require("../../enum/EP21Conf");
// 蓝牌发牌动画
var CP21DealBlueAnimation = /** @class */ (function (_super) {
    __extends(CP21DealBlueAnimation, _super);
    function CP21DealBlueAnimation(pController, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this._tempPoint = new Laya.Point();
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        return _this;
    }
    CP21DealBlueAnimation.prototype.onStart = function () {
        this._flyFromPort();
    };
    CP21DealBlueAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.m_pBackPoker) {
            Laya.Tween.clearAll(this.m_pBackPoker);
        }
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
    };
    CP21DealBlueAnimation.prototype._flyFromPort = function () {
        var _this = this;
        var poker = this.m_pController.view.desk_emitter_pokerBlue;
        this.m_pBackPoker = poker;
        poker.x = 0;
        poker.y = 0;
        poker.scaleX = poker.scaleY = 0.45;
        poker.visible = true;
        var p = this._tempPoint;
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
        var toScale = 0.6;
        var xDelta = -(toScale - 0.45) * poker.width * 0.5;
        var toX = xDelta;
        Laya.Tween.to(poker, { x: toX, y: 100, scaleX: toScale, scaleY: toScale }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (!_this.isStop) {
                Laya.timer.once(100, _this, function () {
                    if (!_this.isStop) {
                        _this._processBlue(poker);
                    }
                });
            }
        }));
    };
    CP21DealBlueAnimation.prototype._processBlue = function (poker) {
        var _this = this;
        Laya.Tween.to(poker, { x: poker.x - 200, y: 0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (!_this.isStop) {
                _this.end();
            }
        }));
    };
    return CP21DealBlueAnimation;
}(animation_1.animation.CAnimation));
exports.CP21DealBlueAnimation = CP21DealBlueAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../enum/EP21Conf":123}],136:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CPokerView_1 = require("../../../../common/CPokerView");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CP21DealPokerAnimation = /** @class */ (function (_super) {
    __extends(CP21DealPokerAnimation, _super);
    function CP21DealPokerAnimation(pController, dealData, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.m_pDealData = dealData;
        _this._tempPoint = new Laya.Point();
        _this.m_pokerView = new CPokerView_1.default(null);
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        return _this;
    }
    CP21DealPokerAnimation.prototype.onStart = function () {
        console.log('_____________发牌 id : ' + this.m_pDealData.pokerData.id);
        this._flyFromPort(this.m_pDealData, false);
    };
    CP21DealPokerAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.m_pBackPoker) {
            Laya.Tween.clearAll(this.m_pBackPoker);
        }
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        if (this.m_pokerView && this.m_pokerView.view && this.m_pDealData && this.m_pDealData.pokerData) {
            this.m_pokerView.updateView(this.m_pDealData.pokerData, true, false, false, false, false, false, true);
        }
    };
    CP21DealPokerAnimation.prototype._flyFromPort = function (data, isFroceHide) {
        var _this = this;
        if (isFroceHide === void 0) { isFroceHide = false; }
        var portStartObj = this.m_pController.view.desk_emitter_poker;
        var parentObj = this.m_pController.view.desk_emitter_pokerAdd;
        var poker;
        poker = this.m_pController.view.desk_emitter_pokerBack;
        this.m_pBackPoker = poker;
        poker.x = 0;
        poker.y = 0;
        poker.scaleX = poker.scaleY = 0.45;
        poker.visible = true;
        var p = this._tempPoint;
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
        var toScale = 1;
        if (data.isBanker) {
            toScale = 0.6 * 1.33; // 牌缩放0.6, box 缩放1.33
        }
        else {
            toScale = 0.6; // 牌缩放0.6, box缩放1
        }
        var xDelta = -(toScale - 0.45) * poker.width * 0.5;
        var toX = xDelta;
        Laya.Tween.to(poker, { x: toX, y: 100, scaleX: toScale, scaleY: toScale }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (!_this.isStop) {
                Laya.timer.once(100, _this, function () {
                    if (!_this.isStop) {
                        _this._processPoker(poker, data, isFroceHide);
                        poker.visible = false;
                        poker.x = poker.y = 0;
                    }
                });
            }
        }));
    };
    CP21DealPokerAnimation.prototype._processPoker = function (pokerBack, data, isFroceHide) {
        var _this = this;
        var view = this.m_pController.view;
        var NOT_SPLIT_Y = this.m_pController.view.PO_BOX_SPLIT_Y; // 不分牌时, box的y
        var SPACE = data.isBanker ? 40 : 30; // 牌间距
        // 先不考虑分牌的情况 
        // 拿到要操作的牌box, 根据牌的pid, 找到所在的位置, 再根据是否分牌, 找到对应的box
        var poBox;
        var pokerIndex = data.subIndex; // 牌索引
        if (data.isBanker) {
            poBox = view.pokerBankPoBox;
        }
        else {
            var locationComponent = this.m_pController.getComponent(CP21LocationComponent_1.default);
            var locationIdx = locationComponent.getLocationIndexByUser(data.pid);
            poBox = view.getPokerPlayerPoBox(locationIdx, data.pokerData.areaIndex); // 用box1处理不分牌的情部, 需要设置
            if (data.pokerData.isSplit) {
                poBox.y = data.pokerData.areaIndex == 0 ? this.m_pController.view.PO_BOX_UNSPLIT_Y : 0;
            }
            else {
                poBox.y = NOT_SPLIT_Y;
            }
        }
        // 下面使用真正的牌做动画, 前面是用发布器的牌做动画
        var poker = view.getPoker(poBox, pokerIndex); // 当前发的牌
        this.m_pokerView.view = poker;
        this.m_pokerView.updateView(data.pokerData, true, false, false, false, true, false, true);
        var fromObj = pokerBack;
        var fromPoint = ApiUtil_1.ApiUtil.obj1ToObj2Pos(fromObj, poker);
        poker.x = fromPoint.x;
        poker.y = fromPoint.y;
        poker.visible = true;
        // 布局
        var allPokerWidth = poker.displayWidth + pokerIndex * SPACE;
        var startX = (poBox.width - allPokerWidth) * 0.5;
        // 所有已发出来的牌移动
        var finishCount = 0;
        for (var i = 0; i <= pokerIndex; ++i) {
            var poker_1 = view.getPoker(poBox, i);
            var toX = startX + i * SPACE;
            var flyTime = 50;
            if (i == pokerIndex) {
                // 当前发的牌飞的久点
                flyTime = 300;
            }
            Laya.Tween.to(poker_1, { x: toX, y: 0 }, flyTime, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                finishCount++;
                if (finishCount >= pokerIndex + 1) {
                    if (!_this.isStop) {
                        _this.end();
                    }
                }
            }), i * 50);
        }
    };
    return CP21DealPokerAnimation;
}(animation_1.animation.CAnimation));
exports.CP21DealPokerAnimation = CP21DealPokerAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../../../../common/CPokerView":9,"../../enum/EP21Conf":123,"../component/CP21LocationComponent":154}],137:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CPokerView_1 = require("../../../../common/CPokerView");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21PokerComponent_1 = require("../component/CP21PokerComponent");
var CP21OpenPokerAnimation = /** @class */ (function (_super) {
    __extends(CP21OpenPokerAnimation, _super);
    function CP21OpenPokerAnimation(pController, dealData, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.m_pDealData = dealData;
        _this._tempPoint = new Laya.Point();
        _this.m_pokerView = new CPokerView_1.default(null);
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        return _this;
    }
    CP21OpenPokerAnimation.prototype.onStart = function () {
        this._processPoker(this.m_pDealData);
    };
    CP21OpenPokerAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        if (this.m_pokerView && this.m_pokerView.view && this.m_pDealData && this.m_pDealData.pokerData) {
            this.m_pokerView.updateView(this.m_pDealData.pokerData, false, false, false, false, false, false, true);
            this.m_pokerView.backImg.scaleX = this.m_baseScale;
        }
    };
    CP21OpenPokerAnimation.prototype._processPoker = function (data) {
        var _this = this;
        var view = this.m_pController.view;
        var locationIdx = -1;
        // 先不考虑分牌的情况 
        // 拿到要操作的牌box, 根据牌的pid, 找到所在的位置, 再根据是否分牌, 找到对应的box
        var poBox;
        var pokerIndex = data.subIndex; // 牌索引
        if (data.isBanker) {
            poBox = view.pokerBankPoBox;
            locationIdx = -1;
        }
        else {
            var locationComponent = this.m_pController.getComponent(CP21LocationComponent_1.default);
            locationIdx = locationComponent.getLocationIndexByUser(data.pid);
            poBox = view.getPokerPlayerPoBox(locationIdx, data.pokerData.areaIndex);
        }
        // 当前发的牌
        var poker = view.getPoker(poBox, pokerIndex);
        this.m_pokerView.view = poker;
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_OPEN_POKER);
        this.m_baseScale = this.m_pokerView.backImg.scaleX;
        this.m_pokerView.updateView(data.pokerData, true, false, false, false, true, false, true);
        // 翻转牌
        Laya.Tween.to(this.m_pokerView.backImg, { scaleX: 0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (!_this.isStop) {
                _this.m_pokerView.updateView(data.pokerData, false, false, true, false, true, false, true);
                Laya.Tween.to(_this.m_pokerView.backImg, { scaleX: _this.m_baseScale }, 400, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    if (!_this.isStop) {
                        // 判断是否爆牌
                        var userPokerInfo = GM_1.GM.p21Data.operateDealPoker.getPokerByPID_AreaIndex(data.pid, data.pokerData.areaIndex);
                        if (pokerIndex + 1 == userPokerInfo.getPokerCount()) {
                            if (userPokerInfo.isBound()) {
                                // 爆牌
                                var ani = view.getBaoAnimation(poBox);
                                ani.visible = true;
                                ani.play(0, false);
                            }
                        }
                        // 更新点数
                        // let point = userPokerInfo.getPoint(); // 不能用这个, 会提前把点数显示出来
                        var point = userPokerInfo.getPointByCount(pokerIndex + 1);
                        _this.m_pController.getComponent(CP21PokerComponent_1.default).updatePoint(poBox, point, locationIdx);
                        _this.end();
                    }
                }));
            }
        }));
    };
    return CP21OpenPokerAnimation;
}(animation_1.animation.CAnimation));
exports.CP21OpenPokerAnimation = CP21OpenPokerAnimation;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/animation":252,"../../../../common/CPokerView":9,"../../enum/EP21Conf":123,"../component/CP21LocationComponent":154,"../component/CP21PokerComponent":159}],138:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
// 收牌动画
var CP21RecoverPokerAnimation = /** @class */ (function (_super) {
    __extends(CP21RecoverPokerAnimation, _super);
    function CP21RecoverPokerAnimation(pController, dealList, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.m_pDealList = dealList;
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        _this.m_movedCount = 0;
        return _this;
    }
    CP21RecoverPokerAnimation.prototype.onStart = function () {
        this._moveToPort();
    };
    CP21RecoverPokerAnimation.prototype.onFinal = function () {
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        this.m_pDealList = null;
        this.m_pController = null;
    };
    CP21RecoverPokerAnimation.prototype._moveToPort = function () {
        var _this = this;
        if (!this.m_pDealList || this.m_pDealList.length == 0) {
            if (!this.isStop) {
                this.end();
            }
            return;
        }
        this.m_movedCount = 0;
        var _loop_1 = function (i) {
            var dealData = this_1.m_pDealList[i];
            if (!dealData) {
                this_1.m_movedCount++;
                if (this_1.m_movedCount >= this_1.m_pDealList.length) {
                    if (!this_1.isStop) {
                        this_1.end();
                        return { value: void 0 };
                    }
                }
                return "continue";
            }
            // 获得牌
            var pokerIndex = dealData.subIndex; // 牌索引
            var poBox = void 0;
            if (dealData.isBanker) {
                poBox = this_1.view.pokerBankPoBox;
            }
            else {
                var locationComponent = this_1.m_pController.getComponent(CP21LocationComponent_1.default);
                var locationIdx = locationComponent.getLocationIndexByUser(dealData.pid);
                poBox = this_1.view.getPokerPlayerPoBox(locationIdx, dealData.pokerData.areaIndex); // 用box1处理不分牌的情部, 需要设置
            }
            var poker = this_1.view.getPoker(poBox, pokerIndex); // 当前发的牌
            this_1._addTweeningObj(poker);
            // 获得飞到的目标点
            var toScale = 0.45 / 0.6; // 缩放转化
            var toObj = this_1.m_pController.view.desk_emitter_pokerBack; // 发牌器
            var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, poker); // 发牌器的坐标，转换成牌所在的坐标
            Laya.Tween.to(poker, { x: toPos.x, y: toPos.y, alpha: 0, scaleX: toScale, scaleY: toScale }, 400, Laya.Ease.linearIn, Laya.Handler.create(this_1, function () {
                if (!_this.isStop) {
                    _this._removeTweeningObj(poker);
                    _this.m_movedCount++;
                    if (_this.m_movedCount >= _this.m_pDealList.length) {
                        _this.end();
                        return;
                    }
                }
            }));
        };
        var this_1 = this;
        for (var i = 0; i < this.m_pDealList.length; ++i) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
    };
    Object.defineProperty(CP21RecoverPokerAnimation.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CP21RecoverPokerAnimation;
}(animation_1.animation.CAnimation));
exports.CP21RecoverPokerAnimation = CP21RecoverPokerAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../component/CP21LocationComponent":154}],139:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CoinView_1 = require("../../../../coin/CoinView");
// 结算, 输的金币收到庄家
var CP21ResultLoseAnimation = /** @class */ (function (_super) {
    __extends(CP21ResultLoseAnimation, _super);
    function CP21ResultLoseAnimation(pController, resultInfo, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        _this.m_pResultInfo = resultInfo;
        return _this;
    }
    CP21ResultLoseAnimation.prototype.onStart = function () {
        this._process();
    };
    CP21ResultLoseAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        // 清除币
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        var pView = this.m_pController.view;
        if (pLocation && pView) {
            var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
            var userItem = pView.getLocationItem(locationIdx);
            if (userItem) {
                var coinAddSp = pView.getBetAreaAdd(locationIdx);
                if (coinAddSp) {
                    while (coinAddSp.numChildren > 0) {
                        var coin = coinAddSp.getChildAt(0);
                        if (coin) {
                            Laya.Tween.clearAll(coin);
                            coin.removeSelf();
                            CoinView_1.CoinView.recoverCoin(coin);
                        }
                    }
                }
            }
        }
    };
    CP21ResultLoseAnimation.prototype._process = function () {
        var _this = this;
        if (this.m_pResultInfo.userId == 0) {
            this.end();
            return;
        }
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (!pLocation) {
            if (!this.isStop) {
                this.end();
                return;
            }
        }
        // 根据userid, 找出下注区
        var pView = this.m_pController.view;
        var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
        var userItem = pView.getLocationItem(locationIdx);
        var coinAddSp = pView.getBetAreaAdd(locationIdx);
        // 如果下注的币为0, 则不处理, 这里指的是表现上的
        var targetCount = coinAddSp.numChildren;
        if (targetCount == 0) {
            if (!this.isStop) {
                this.end();
                return;
            }
        }
        // 币从注区飞到庄家
        var finishCount = 0;
        var _loop_1 = function (index) {
            var coin = coinAddSp.getChildAt(index);
            var toGlobalPos = new Laya.Point(300, 300);
            var toLocalPos = ApiUtil_1.ApiUtil.globalToLocal(coin, toGlobalPos);
            this_1._addTweeningObj(coin);
            Laya.Tween.to(coin, { x: toLocalPos.x, y: toLocalPos.y }, 400, Laya.Ease.linearIn, Laya.Handler.create(this_1, function () {
                if (!_this.isStop) {
                    _this._removeTweeningObj(coin);
                    finishCount++;
                    if (finishCount >= targetCount) {
                        _this.end();
                    }
                }
            }));
        };
        var this_1 = this;
        for (var index = 0; index < targetCount; ++index) {
            _loop_1(index);
        }
    };
    return CP21ResultLoseAnimation;
}(animation_1.animation.CAnimation));
exports.CP21ResultLoseAnimation = CP21ResultLoseAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../../../../coin/CoinView":3,"../component/CP21LocationComponent":154}],140:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
// 结算, 显示输赢结果
var CP21ResultResultCountTipAnimation = /** @class */ (function (_super) {
    __extends(CP21ResultResultCountTipAnimation, _super);
    function CP21ResultResultCountTipAnimation(pController, resultInfo, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        _this.m_pResultInfo = resultInfo;
        return _this;
    }
    CP21ResultResultCountTipAnimation.prototype.onStart = function () {
        this._process();
    };
    CP21ResultResultCountTipAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        var pView = this.m_pController.view;
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (pView && this.m_pController && this.m_pResultInfo) {
            var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
            var userItem = pView.getLocationItem(locationIdx);
            if (userItem) {
                var resultTip = pView.get_userList_resultTips(userItem);
                var resultTxt = pView.get_userList_resultTxt(userItem);
                if (resultTip) {
                    resultTip.alpha = 0;
                    resultTip.visible = false;
                }
                if (resultTxt) {
                    resultTxt.alpha = 0;
                    resultTxt.visible = false;
                }
            }
        }
    };
    CP21ResultResultCountTipAnimation.prototype._process = function () {
        var _this = this;
        if (this.m_pResultInfo.userId == 0) {
            this.end();
            return;
        }
        var pView = this.m_pController.view;
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
        var userItem = pView.getLocationItem(locationIdx);
        var resultTip = pView.get_userList_resultTips(userItem);
        var resultTxt = pView.get_userList_resultTxt(userItem);
        resultTip.visible = resultTxt.visible = true;
        resultTip.alpha = resultTxt.alpha = 1;
        var winCoin = this.m_pResultInfo.totalWin;
        winCoin = ApiUtil_1.ApiUtil.formatNumber(winCoin);
        if (winCoin != 0) {
            if (winCoin > 0) {
                resultTip.index = 1;
                resultTxt.text = '+' + winCoin;
            }
            else {
                resultTip.index = 0;
                resultTxt.text = winCoin.toString();
            }
        }
        else {
            // == 0;
            resultTip.index = 2;
            resultTxt.text = '0';
        }
        Laya.timer.once(2500, this, function () {
            if (!_this.isStop) {
                _this._hideResultTips(false);
            }
        });
    };
    CP21ResultResultCountTipAnimation.prototype._hideResultTips = function (hideDirect) {
        var _this = this;
        var pView = this.m_pController.view;
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (!pLocation) {
            return;
        }
        var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
        var userItem = pView.getLocationItem(locationIdx);
        var resultTip = pView.get_userList_resultTips(userItem);
        var resultTxt = pView.get_userList_resultTxt(userItem);
        Laya.Tween.to(resultTip, { alpha: 0 }, 499, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            if (!_this.isStop) {
                _this.end();
            }
        }));
    };
    return CP21ResultResultCountTipAnimation;
}(animation_1.animation.CAnimation));
exports.CP21ResultResultCountTipAnimation = CP21ResultResultCountTipAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../component/CP21LocationComponent":154}],141:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CoinView_1 = require("../../../../coin/CoinView");
var GM_1 = require("../../../../../gm/GM");
// 结算, 赢的金币发到下注区, 并飞到玩家头像
var CP21ResultWinAnimation = /** @class */ (function (_super) {
    __extends(CP21ResultWinAnimation, _super);
    function CP21ResultWinAnimation(pController, resultInfo, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.TIME_SPACE = 400;
        _this.m_pController = pController;
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        _this.m_pResultInfo = resultInfo;
        return _this;
    }
    CP21ResultWinAnimation.prototype.onStart = function () {
        this._process();
    };
    CP21ResultWinAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        if (this.m_flyCoinList) {
            for (var _i = 0, _a = this.m_flyCoinList; _i < _a.length; _i++) {
                var coin = _a[_i];
                if (!coin) {
                    continue;
                }
                Laya.Tween.clearAll(coin);
                coin.removeSelf();
                CoinView_1.CoinView.recoverCoin(coin);
            }
        }
        this.m_flyCoinList = null;
        // 清除之前下的币
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        var pView = this.m_pController.view;
        if (pLocation && pView) {
            var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
            var userItem = pView.getLocationItem(locationIdx);
            if (userItem) {
                var coinAddSp = pView.getBetAreaAdd(locationIdx);
                if (coinAddSp) {
                    while (coinAddSp.numChildren > 0) {
                        var coin = coinAddSp.getChildAt(0);
                        if (coin) {
                            Laya.Tween.clearAll(coin);
                            coin.removeSelf();
                            CoinView_1.CoinView.recoverCoin(coin);
                        }
                    }
                }
            }
        }
    };
    CP21ResultWinAnimation.prototype._process = function () {
        if (this.m_pResultInfo.userId == 0) {
            this.end();
            return;
        }
        this.m_flyCoinList = [];
        if (this.m_pResultInfo.totalWin > 0) {
            this._buildFlyList();
        }
        // 计数
        this.m_totalCount = this.m_flyCoinList.length;
        this.m_curCount = 0;
        this._flyToArea();
    };
    // 庄家出的钱列表
    CP21ResultWinAnimation.prototype._buildFlyList = function () {
        var coinList = new Array();
        var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(this.m_pResultInfo.totalWin, GM_1.GM.coinMap.valueList, 1);
        for (var _i = 0, coinIndexLlist_1 = coinIndexLlist; _i < coinIndexLlist_1.length; _i++) {
            var coinIndex = coinIndexLlist_1[_i];
            var img = CoinView_1.CoinView.buildCoin();
            img.reset();
            img.isSelf = false;
            img.index = coinIndex;
            this.m_pController.view.addChild(img);
            coinList.push(img);
            this.m_flyCoinList.push(img);
        }
    };
    // 飞到注区
    CP21ResultWinAnimation.prototype._flyToArea = function () {
        var _this = this;
        if (this.m_pResultInfo.totalWin == 0 || this.m_flyCoinList.length == 0) {
            this._flyToAreaFinish();
            return;
        }
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (!pLocation) {
            if (!this.isStop) {
                this.end();
                return;
            }
        }
        var fromGlobalPos = new Laya.Point(300, 300);
        // 根据userid, 找出下注区
        var pView = this.m_pController.view;
        var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
        var coinAddSp = pView.getBetAreaAdd(locationIdx); // 注区
        // 庄家飞币到注区
        for (var _i = 0, _a = this.m_flyCoinList; _i < _a.length; _i++) {
            var coin = _a[_i];
            coin.x = fromGlobalPos.x + Math.random() * 60 - 30;
            coin.y = fromGlobalPos.y + Math.random() * 60 - 30;
            var toGlobalPos = ApiUtil_1.ApiUtil.getGlobalPos(coinAddSp); // 飞到注区所转化的全局坐标
            // 庄家飞币到注区
            Laya.Tween.to(coin, { x: toGlobalPos.x, y: toGlobalPos.y }, this.TIME_SPACE, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                if (!_this.isStop) {
                    _this._flyToAreaFinish();
                }
            }));
        }
    };
    CP21ResultWinAnimation.prototype._flyToAreaFinish = function () {
        if (this.isStop) {
            return;
        }
        this.m_curCount++;
        if (this.m_curCount >= this.m_totalCount) {
            this.m_curCount = 0;
            Laya.timer.once(500, this, this._onWaitFinish);
        }
    };
    CP21ResultWinAnimation.prototype._onWaitFinish = function () {
        var _this = this;
        if (this.isStop) {
            return;
        }
        // 注区的币飞到头像
        var pLocation = this.m_pController.getComponent(CP21LocationComponent_1.default);
        var pView = this.m_pController.view;
        var locationIdx = pLocation.getLocationIndexByUser(this.m_pResultInfo.userId);
        var userItem = pView.getLocationItem(locationIdx);
        var headIcon = pView.get_userList_my1(userItem);
        var toUserPos; // = ApiUtil.getGlobalPos(headIcon);
        // 原本下注的币
        var coinAddSp = pView.getBetAreaAdd(locationIdx);
        if (coinAddSp) {
            for (var i = 0; i < coinAddSp.numChildren; ++i) {
                var coin = coinAddSp.getChildAt(i);
                if (coin) {
                    toUserPos = ApiUtil_1.ApiUtil.getGlobalPos(headIcon); // 经过前面的转换，toUserPos的坐标会改变
                    toUserPos = ApiUtil_1.ApiUtil.globalToLocal(coin, toUserPos);
                    Laya.Tween.to(coin, { x: toUserPos.x, y: toUserPos.y }, this.TIME_SPACE * 0.3, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                        _this._flyToHeadFinish();
                    }));
                }
            }
            this.m_totalCount = this.m_flyCoinList.length + coinAddSp.numChildren;
        }
        else {
            this.m_totalCount = this.m_flyCoinList.length;
        }
        toUserPos = ApiUtil_1.ApiUtil.getGlobalPos(headIcon); // 经过前面的转换，toUserPos的坐标会改变
        for (var _i = 0, _a = this.m_flyCoinList; _i < _a.length; _i++) {
            var coin = _a[_i];
            Laya.Tween.to(coin, { x: toUserPos.x, y: toUserPos.y }, this.TIME_SPACE * 0.3, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this._flyToHeadFinish();
            }));
        }
    };
    CP21ResultWinAnimation.prototype._flyToHeadFinish = function () {
        if (this.isStop) {
            return;
        }
        this.m_curCount++;
        if (this.m_curCount >= this.m_totalCount) {
            this.end();
        }
    };
    return CP21ResultWinAnimation;
}(animation_1.animation.CAnimation));
exports.CP21ResultWinAnimation = CP21ResultWinAnimation;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../../../../coin/CoinView":3,"../component/CP21LocationComponent":154}],142:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CPokerView_1 = require("../../../../common/CPokerView");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var CP21SplitPokerAnimation = /** @class */ (function (_super) {
    __extends(CP21SplitPokerAnimation, _super);
    function CP21SplitPokerAnimation(pController, dealData, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        _this.m_pDealData = dealData;
        _this.m_pokerView = new CPokerView_1.default(null);
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        return _this;
    }
    CP21SplitPokerAnimation.prototype.onStart = function () {
        console.log('_____________分牌 id : ' + this.m_pDealData.pokerData.id);
        this._processPoker(this.m_pDealData);
    };
    CP21SplitPokerAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
        if (this.m_pokerView && this.m_pokerView.view && this.m_pDealData && this.m_pDealData.pokerData) {
            this.m_pokerView.updateView(this.m_pDealData.pokerData, false, false, false, false, false, false, true);
        }
    };
    CP21SplitPokerAnimation.prototype._processPoker = function (data) {
        var view = this.m_pController.view;
        var NOT_SPLIT_Y = this.m_pController.view.PO_BOX_SPLIT_Y;
        ; // 不分牌时, box的y
        var isSplit = data.pokerData.isSplit;
        // 拿到要操作的牌box, 根据牌的pid, 找到所在的位置, 再根据是否分牌, 找到对应的box
        var poBox;
        var pokerIndex = data.subIndex; // 牌索引
        if (data.isBanker) {
            poBox = view.pokerBankPoBox;
        }
        else {
            var locationComponent = this.m_pController.getComponent(CP21LocationComponent_1.default);
            var locationIdx = locationComponent.getLocationIndexByUser(data.pid);
            poBox = view.getPokerPlayerPoBox(locationIdx, data.pokerData.areaIndex);
            poBox.y = NOT_SPLIT_Y;
        }
        // 当前发的牌, 分牌后, 开始只显示一张牌, 分牌前有一组牌显示了两张牌, 要先隐藏了
        var p1 = view.getPoker(poBox, 0);
        var p2 = view.getPoker(poBox, 1);
        p2.visible = false;
        p1.visible = true;
        this.m_pokerView.view = p1;
        this.m_pokerView.updateView(data.pokerData, false, false, false, false, false, false, true);
        // box移动
        var toY; // = this.m_pController.view.PO_BOX_UNSPLIT_Y;
        if (data.pokerData.areaIndex == 0) {
            // 移到下面
            toY = this.m_pController.view.PO_BOX_UNSPLIT_Y;
        }
        else {
            toY = 0;
        }
        Laya.Tween.to(poBox, { y: toY }, 100);
        // 牌布局
        var allPokerWidth = p1.displayWidth;
        var startX = (poBox.width - allPokerWidth) * 0.5;
        // 所有已发出来的牌移动
        var finishCount = 0;
        Laya.Tween.to(p1, { x: startX }, 100);
        this.end();
    };
    return CP21SplitPokerAnimation;
}(animation_1.animation.CAnimation));
exports.CP21SplitPokerAnimation = CP21SplitPokerAnimation;
},{"../../../../../hbcore/framework/animation":252,"../../../../common/CPokerView":9,"../component/CP21LocationComponent":154}],143:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation_1 = require("../../../../../hbcore/framework/animation");
var CP21WaitTimeAnimation = /** @class */ (function (_super) {
    __extends(CP21WaitTimeAnimation, _super);
    // time : ms
    function CP21WaitTimeAnimation(time, caller, finishCallback) {
        var _this = _super.call(this) || this;
        _this.time = time;
        _this.caller = caller;
        _this.finishCallback = finishCallback;
        return _this;
    }
    CP21WaitTimeAnimation.prototype.onStart = function () {
        console.log('_____________等时间 : ');
        Laya.timer.once(this.time, this, this.end);
    };
    CP21WaitTimeAnimation.prototype.onFinal = function () {
        Laya.timer.clearAll(this);
        if (this.finishCallback) {
            this.finishCallback.call(this.caller);
        }
        this.finishCallback = null;
        this.caller = null;
    };
    return CP21WaitTimeAnimation;
}(animation_1.animation.CAnimation));
exports.CP21WaitTimeAnimation = CP21WaitTimeAnimation;
},{"../../../../../hbcore/framework/animation":252}],144:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CP21BankerHistroyComponent = /** @class */ (function (_super) {
    __extends(CP21BankerHistroyComponent, _super);
    function CP21BankerHistroyComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21BankerHistroyComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        ApiUtil_1.ApiUtil.recoverHandler(this.view.bankerHistroyItemList.renderHandler);
        this.view.bankerHistroyItemList.renderHandler = null;
    };
    CP21BankerHistroyComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.view.bankerHistroyItemList.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onItemRender_uiHandler);
        return true;
    };
    CP21BankerHistroyComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var displayList = GM_1.GM.p21Data.getBankerHistroyDisplayList();
        this.view.bankerHistroyItemList.dataSource = displayList;
    };
    CP21BankerHistroyComponent.prototype._onItemRender_uiHandler = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
        }
        item.visible = true;
        var value = item.dataSource;
        value = ApiUtil_1.ApiUtil.formatNumber(value);
        if (value > 21) {
            // 爆点
            this.view.getBankerHistroyItemRed(item).visible = true;
            this.view.getBankerHistroyItemWhite(item).visible = false;
        }
        else {
            this.view.getBankerHistroyItemRed(item).visible = false;
            this.view.getBankerHistroyItemWhite(item).visible = true;
        }
        this.view.getBankerHistroyItemPoint(item).text = value.toString();
    };
    CP21BankerHistroyComponent.prototype.reset = function () {
    };
    return CP21BankerHistroyComponent;
}(CP21Component_1.default));
exports.default = CP21BankerHistroyComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"./CP21Component":148}],145:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21BetsCoinBreathComponent = /** @class */ (function (_super) {
    __extends(CP21BetsCoinBreathComponent, _super);
    function CP21BetsCoinBreathComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21BetsCoinBreathComponent.prototype.onDestroy = function () {
        this.m_bStop = true;
        if (this.m_pView) {
            Laya.Tween.clearAll(this.m_pView);
        }
        this.m_pView = null;
        _super.prototype.onDestroy.call(this);
    };
    CP21BetsCoinBreathComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21BetsCoinBreathComponent.prototype.process = function (coin) {
        _super.prototype.process.call(this);
        this.changeView(coin);
    };
    CP21BetsCoinBreathComponent.prototype.changeView = function (v) {
        if (this.m_pView) {
            Laya.Tween.clearAll(this.m_pView);
            this.m_pView.alpha = 1;
            this.m_pView = null;
        }
        if (!v) {
            return;
        }
        this.m_pView = v;
        v.alpha = 0;
        this._onUp();
    };
    CP21BetsCoinBreathComponent.prototype._onUp = function () {
        if (!this.m_pView) {
            return;
        }
        if (this.m_bStop) {
            return;
        }
        Laya.Tween.to(this.m_pView, { alpha: 1 }, 700, Laya.Ease.linearIn, Laya.Handler.create(this, this._onDown));
    };
    CP21BetsCoinBreathComponent.prototype._onDown = function () {
        if (!this.m_pView) {
            return;
        }
        if (this.m_bStop) {
            return;
        }
        Laya.Tween.to(this.m_pView, { alpha: 0 }, 700, Laya.Ease.linearIn, Laya.Handler.create(this, this._onUp));
    };
    CP21BetsCoinBreathComponent.prototype.reset = function () {
    };
    return CP21BetsCoinBreathComponent;
}(CP21Component_1.default));
exports.default = CP21BetsCoinBreathComponent;
},{"./CP21Component":148}],146:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21LightWinAreaComponent_1 = require("./CP21LightWinAreaComponent");
var CP21LightMyBetAreaComponent_1 = require("./CP21LightMyBetAreaComponent");
var CP21BetsCoinBreathComponent_1 = require("./CP21BetsCoinBreathComponent");
var CRollListType1Component_1 = require("../../../../common/component/CRollListType1Component");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var GM_1 = require("../../../../../gm/GM");
var CoinView_1 = require("../../../../coin/CoinView");
var CP21Data_1 = require("../../data/CP21Data");
var commonData_1 = require("../../../_commonModel/commonData");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var TweenUtil_1 = require("../../../../../hbcore/util/TweenUtil");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CP21LocationComponent_1 = require("./CP21LocationComponent");
var CP21Net_1 = require("../../net/CP21Net");
var CBaseNet_1 = require("../../../../net/CBaseNet");
// 下注
// 选币. 投币.下注数量.其他玩家的下注数据
var CP21BetsComponent = /** @class */ (function (_super) {
    __extends(CP21BetsComponent, _super);
    function CP21BetsComponent(pController) {
        var _this = _super.call(this, pController) || this;
        // =============================bet coin list
        _this.m_lastSelectCoinIndex = -1;
        _this.COIN_ON_DESK_SCALC = 0.5;
        return _this;
    }
    CP21BetsComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        ApiUtil_1.ApiUtil.recoverHandler(this.view.betsCoin_coin_list.renderHandler);
        this.view.betsCoin_coin_list.renderHandler = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.view.betsCoin_coin_list.selectHandler);
        this.view.betsCoin_coin_list.selectHandler = null;
        this.view.confirmBtn.off(Laya.Event.MOUSE_UP, this, this._onBetsConfirm);
        this.view.cancelBtn.off(Laya.Event.MOUSE_UP, this, this._onBetsCancel);
        var select = this.view.getBetAreaSelect(1);
        select.off(Laya.Event.MOUSE_DOWN, this, this._onClickSelectBox_uiHandler);
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.Bet);
        this._removeAllBetsCoin(false);
    };
    CP21BetsComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        var rollComponent = new CRollListType1Component_1.default(this.view, this.view.betsCoin_coin_panel, this.view.betsCoin_coin_list, false, 5, this.view.betsCoin_coin_left, this.view.betsCoin_coin_right);
        rollComponent.leftRightClickHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onClickLeftRightPage);
        this.addComponent(rollComponent);
        this.addComponent(new CP21LightWinAreaComponent_1.default(this.m_pController));
        this.addComponent(new CP21LightMyBetAreaComponent_1.default(this.m_pController));
        this.addComponent(new CP21BetsCoinBreathComponent_1.default(this.m_pController));
        this.addComponent(new CoinFlyToDeskComponent(this.m_pController));
    };
    CP21BetsComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_playerBetMap = new Object();
        this.m_tempBetsCoinList = [];
        // 币
        var coinList = GM_1.GM.coinMap.getCoinListByStage(GM_1.GM.p21Data.room.stageId);
        this.view.betsCoin_coin_list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem);
        this.view.betsCoin_coin_list.selectHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onSelectCoinList_uiHandler);
        if (this.view.betsCoin_coin_list.repeatX != coinList.length) {
            this.view.betsCoin_coin_list.repeatX = coinList.length;
        }
        this.view.betsCoin_coin_list.array = coinList;
        this.view.betsCoin_coin_list.selectedIndex = 0;
        // 
        var select = this.view.getBetAreaSelect(1);
        select.on(Laya.Event.MOUSE_DOWN, this, this._onClickSelectBox_uiHandler);
        // 
        this.view.confirmBtn.on(Laya.Event.MOUSE_UP, this, this._onBetsConfirm);
        this.view.cancelBtn.on(Laya.Event.MOUSE_UP, this, this._onBetsCancel);
        return true;
    };
    CP21BetsComponent.prototype.reset = function () {
        this._removeAllBetsCoin(false);
        this.isBeted = false;
        this.m_pController.netState.setNetStateIdle(CP21Net_1.p21Net.NetConf.Bet);
        // this._hideWinFlag();
    };
    CP21BetsComponent.prototype.openBets = function () {
        this.m_isOpenBets = true;
    };
    CP21BetsComponent.prototype.closeBets = function () {
        this.m_isOpenBets = false;
        this.cancelTempBetsUnSubmit();
    };
    // =============================
    // select bets box, 点击投注
    CP21BetsComponent.prototype._onClickSelectBox_uiHandler = function (e) {
        if (!this.m_isOpenBets) {
            return;
        }
        if (this.isBeted) {
            return;
        }
        e.stopPropagation();
        var pGameData = GM_1.GM.p21Data;
        // 币
        var iconSelectIndex = this.view.betsCoin_coin_list.selectedIndex;
        var iconCell = this.view.betsCoin_coin_list.getCell(iconSelectIndex);
        var coinData = iconCell.dataSource;
        var betsCoinData = new commonData_1.CBetsCoinData(0, coinData);
        var BET_MAX = pGameData.room.maxBet;
        var betedCount = this.getMyTempBetCount();
        var allBetCount = betedCount + betsCoinData.coinData.value;
        allBetCount = ApiUtil_1.ApiUtil.formatNumber(allBetCount);
        var myBalance = 0;
        var locationInfo = GM_1.GM.p21Data.getLocationInfo(GM_1.GM.gameData.curStageInfo.playerId);
        if (locationInfo) {
            myBalance = locationInfo.balance;
        }
        var MAX_COUNT = 0;
        var langMax1;
        var langMax2;
        var loseMax = CP21Data_1.p21Data.CLocationInfo.transToLoseMax(BET_MAX); // 最大下注。转换为玩家最大会输额度
        loseMax = ApiUtil_1.ApiUtil.formatNumber(loseMax);
        if (loseMax > myBalance) {
            MAX_COUNT = CP21Data_1.p21Data.CLocationInfo.transToBetMax(myBalance); // 玩家币数转换为最大可下注额度
            MAX_COUNT = ApiUtil_1.ApiUtil.formatNumber(MAX_COUNT);
            langMax1 = 'bets_not_enough_money';
            langMax2 = 'bets_not_enough_money2';
        }
        else {
            MAX_COUNT = BET_MAX;
            langMax1 = 'bets_max_limit';
            langMax2 = 'bets_max_limit_2';
        }
        if (allBetCount > MAX_COUNT) {
            // 重新下注新的币
            var wantBetCount = MAX_COUNT - betedCount;
            wantBetCount = ApiUtil_1.ApiUtil.formatNumber(wantBetCount);
            var coinList = GM_1.GM.coinMap.getCoinListByStage(pGameData.room.stageId);
            var valueList = GM_1.GM.coinMap.transCoinListToValueList(coinList);
            var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(wantBetCount, valueList, 1);
            if (!coinIndexLlist || coinIndexLlist.length == 0) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(langMax1), CMessageBox_1.default.TYPE_FLY, 0, null, true);
                return; //拆分不了
            }
            // 可以下注
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(langMax2), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            for (var _i = 0, coinIndexLlist_1 = coinIndexLlist; _i < coinIndexLlist_1.length; _i++) {
                var idx = coinIndexLlist_1[_i];
                var coinData_1 = coinList[idx];
                betsCoinData = new commonData_1.CBetsCoinData(0, coinData_1);
                this.m_tempBetsCoinList.push(betsCoinData);
                this._processBetsCoin(betsCoinData, true, pGameData.myId);
            }
        }
        else {
            this.m_tempBetsCoinList.push(betsCoinData);
            this._processBetsCoin(betsCoinData, true, pGameData.myId);
        }
        betedCount = this.getMyTempBetCount();
        this.m_playerBetMap[pGameData.myId] = betedCount;
        // 播放下注闪光, this.m_tempBetsCoinList 在后面会清空, 
        // this.getComponent(CBaijialeLightMyBetAreaComponent).process(areaIndex);
        this._updateTempBetsCount();
    };
    // 显示已下注信息(未确定的币)
    CP21BetsComponent.prototype._updateTempBetsCount = function () {
        var locationComponent = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (!locationComponent) {
            return;
        }
        var locationIndex = locationComponent.getLocationIndexByUser(GM_1.GM.p21Data.myId);
        var numBox = this.view.getBetAreaNumBox(locationIndex);
        if (!this.m_tempBetsCoinList || this.m_tempBetsCoinList.length == 0) {
            numBox.visible = false;
            return;
        }
        numBox.visible = true;
        var betCount = 0;
        for (var _i = 0, _a = this.m_tempBetsCoinList; _i < _a.length; _i++) {
            var coinData = _a[_i];
            if (!coinData) {
                continue;
            }
            betCount += coinData.coinData.value;
        }
        betCount = ApiUtil_1.ApiUtil.formatNumber(betCount);
        this.view.getDesk_bets_numNum(numBox).text = betCount.toString();
        this.view.getDesk_bets_numCoin(numBox).index = GM_1.GM.coinMap.getCoinType().type;
    };
    CP21BetsComponent.prototype.addBetsCoinByBroadcast = function (data) {
        this.betCoinByValue(data.pid, data.betCount);
    };
    CP21BetsComponent.prototype.betCoinByValue = function (userId, wantBetCount) {
        var pGameData = GM_1.GM.p21Data;
        var BET_MAX = pGameData.room.maxBet;
        // 重新下注新的币
        wantBetCount = ApiUtil_1.ApiUtil.formatNumber(wantBetCount);
        var coinList = GM_1.GM.coinMap.getCoinListByStage(pGameData.room.stageId);
        var valueList = GM_1.GM.coinMap.transCoinListToValueList(coinList);
        var coinIndexLlist = ApiUtil_1.ApiUtil.SplitValueToValueList(wantBetCount, valueList, 1);
        if (!coinIndexLlist || coinIndexLlist.length == 0) {
            return; //拆分不了
        }
        // 可以下注
        for (var _i = 0, coinIndexLlist_2 = coinIndexLlist; _i < coinIndexLlist_2.length; _i++) {
            var idx = coinIndexLlist_2[_i];
            var coinData = coinList[idx];
            var betsCoinData = new commonData_1.CBetsCoinData(0, coinData);
            this._processBetsCoin(betsCoinData, userId == pGameData.myId, userId);
        }
        this.m_playerBetMap[userId] = wantBetCount;
    };
    CP21BetsComponent.prototype._onBetsConfirm = function (e) {
        GM_1.GM.playButtonSound();
        var pGameData = GM_1.GM.p21Data;
        var betedCount = this.getMyTempBetCount();
        if (betedCount > pGameData.room.maxBet) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_max_limit'), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            return;
        }
        else if (betedCount < pGameData.room.minBet) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_min_limit'), CMessageBox_1.default.TYPE_FLY, 0, null, true);
            return;
        }
        if (this.m_pController.netState.isNetStateBusy(CP21Net_1.p21Net.NetConf.Bet)) {
            return;
        }
        this.m_pController.netState.setNetStateBusy(CP21Net_1.p21Net.NetConf.Bet);
        e.stopPropagation();
        this._updateBetsControlBtns();
        GM_1.GM.instance.network.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.Bet, this._onBetsResponse);
        CP21Net_1.p21Net.sendBet(betedCount);
        this.isBeted = true;
    };
    CP21BetsComponent.prototype._onBetsResponse = function (data) {
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.Bet);
        this.m_pController.netState.setNetStateIdle(CP21Net_1.p21Net.NetConf.Bet);
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            this.isBeted = false;
            this._updateBetsControlBtns();
            return;
        }
        this._clearTempBetsCoin();
        this._updateBetsControlBtns();
        this.isBeted = true;
        CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('bets_success'), -1, 0, '#00aa00', true, this.m_pController.view);
    };
    CP21BetsComponent.prototype._onBetsCancel = function (e) {
        e && e.stopPropagation();
        GM_1.GM.playButtonSound();
        this._removeAllBetsCoin(true);
        this._updateBetsControlBtns();
    };
    // 取消下注，但未提交的筹码
    CP21BetsComponent.prototype.cancelTempBetsUnSubmit = function () {
        if (!this.isBeted && this.m_tempBetsCoinList && this.m_tempBetsCoinList.length > 0) {
            this._onBetsCancel(null);
        }
    };
    CP21BetsComponent.prototype._onSelectCoinList_uiHandler = function (index) {
        if (this.m_lastSelectCoinIndex == -1) {
            this.m_lastSelectCoinIndex = index;
        }
        else {
            if (this.m_lastSelectCoinIndex != index) {
                this.m_lastSelectCoinIndex = index;
                GM_1.GM.playButtonSound();
            }
        }
        // this._processCoinBreathAnimation();
    };
    // private _processCoinBreathAnimation() {
    //     let selectIndex:number = this.m_lastSelectCoinIndex;
    //     if (selectIndex < 0) {
    //         selectIndex = 0;
    //     }
    //     let iconCell = this.view.betsCoin_coin_list.getCell(selectIndex);
    //     if (iconCell) {
    //         let selectBox = this.view.get_betsCoin_coin_list_selectBox(iconCell);
    //         if (selectBox) {
    //             let coinBreathComponent = this.getComponent(CBaijialeBetsCoinBreathComponent) as CBaijialeBetsCoinBreathComponent;
    //             if (coinBreathComponent) {
    //                 coinBreathComponent.process(selectBox)
    //             }
    //         }
    //     }
    // }
    // ==========================
    // private getPlayerBetsCount(pId:number) : number {
    //     let count = 0;
    //     if (!this.m_playerBetCoinMap.hasOwnProperty(pId.toString())) {
    //         return count;
    //     }
    //     let coindata:CBetsCoinData = this.m_playerBetCoinMap[pId];
    //     if (!coindata) {
    //         return count;
    //     }
    //     count = coindata.coinData.value;
    //     count = ApiUtil.formatNumber(count);
    //     return count;
    // }
    CP21BetsComponent.prototype.getMyTempBetCount = function () {
        var count = 0;
        for (var _i = 0, _a = this.m_tempBetsCoinList; _i < _a.length; _i++) {
            var betData = _a[_i];
            count += betData.coinData.value;
        }
        count = ApiUtil_1.ApiUtil.formatNumber(count);
        return count;
    };
    CP21BetsComponent.prototype._processBetsCoin = function (betsCoinData, isSelf, playerId) {
        if (this.isBeted && isSelf) {
            return;
        }
        this.getComponent(CoinFlyToDeskComponent).process(betsCoinData, isSelf, playerId);
        this._updateBetsControlBtns();
    };
    CP21BetsComponent.prototype._removeAllBetsCoin = function (onlySlef) {
        for (var i = 0; i < CP21Data_1.p21Data.CP21Data.PLAYER_COUNT; i++) {
            var sp = this.m_pController.view.getBetAreaAdd(i);
            for (var index = 0; index < sp.numChildren; ++index) {
                var coin_1 = sp.getChildAt(index);
                if (!onlySlef || coin_1.isSelf) {
                    sp.removeChildAt(index);
                    CoinView_1.CoinView.recoverCoin(coin_1);
                    index--;
                }
            }
        }
        this._clearTempBetsCoin();
        this._updateTempBetsCount();
        var isClearAll = !onlySlef;
        if (isClearAll) {
            // this._clearTempAreaBet();
        }
    };
    CP21BetsComponent.prototype._clearTempBetsCoin = function () {
        this.m_tempBetsCoinList = [];
    };
    CP21BetsComponent.prototype._clearPlayerBetCoin = function (pid) {
        delete this.m_playerBetMap[pid];
    };
    // ====================== 更新控制按钮 ======================
    CP21BetsComponent.prototype._updateBetsControlBtns = function () {
        var myBetCount = this.getMyTempBetCount(); // this.getPlayerBetsCount(GM.p21Data.myId);
        var isBeted = myBetCount > 0.00000001;
        this.view.cancelBtn.visible = this.view.confirmBtn.visible = isBeted;
        // this.view.betsCoin_cancelGray.visible = this.view.betsCoin_confirmGray.visible = !isBeted;
    };
    // ====================== coin list======================
    // 点筹码的left right
    CP21BetsComponent.prototype._onClickLeftRightPage = function () {
        GM_1.GM.playButtonSound();
    };
    CP21BetsComponent.prototype._onRenderItem = function (comp, idx) {
        if (!comp.dataSource) {
            comp.visible = false;
            return;
        }
        comp.visible = true;
        var coinData = comp.dataSource;
        var clip = this.view.get_betsCoin_coin_list_money(comp);
        CoinView_1.CoinView.formatCoin(clip);
        clip.index = coinData.index;
    };
    return CP21BetsComponent;
}(CP21Component_1.default));
exports.CP21BetsComponent = CP21BetsComponent;
// ===========================================================component
var CoinFlyToDeskComponent = /** @class */ (function (_super) {
    __extends(CoinFlyToDeskComponent, _super);
    function CoinFlyToDeskComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CoinFlyToDeskComponent.prototype.reset = function () {
    };
    // 创建金币添加到注区, 需要删除
    CoinFlyToDeskComponent.prototype.process = function (betsCoinData, isSelf, playerId) {
        var _this = this;
        var img = CoinView_1.CoinView.buildCoin();
        img.isSelf = isSelf;
        img.index = betsCoinData.coinData.index;
        img.owner = playerId;
        var locationIndex = this.m_pController.getComponent(CP21LocationComponent_1.default).getLocationIndexByUser(playerId);
        var addSp = this.view.getBetAreaAdd(locationIndex);
        var fromObj = this.view.getLocationItem(locationIndex);
        // 坐标转换
        var fromposGlobal = ApiUtil_1.ApiUtil.getGlobalPos(fromObj);
        var icon = this.view.get_userList_other1(fromObj);
        fromposGlobal.x += Math.abs(icon.width) * 0.5;
        fromposGlobal.y += Math.abs(icon.height) * 0.5;
        TweenUtil_1.TweenUtil.shakeObject(fromObj, false, false, 1, 2, true, true, 0.05);
        // 金币添加到的桌台的实际对象
        addSp.addChild(img);
        var pos = ApiUtil_1.ApiUtil.globalToLocal(img, fromposGlobal);
        img.x = pos.x;
        img.y = pos.y;
        img.scaleX = img.scaleY = 0.7;
        var toX = Math.random() * 40 - 20;
        var toY = Math.random() * 20 - 10;
        var toScale = img.baseScale;
        // 金币从开始位置飞到台上
        Laya.Tween.to(img, { x: toX, y: toY, scaleX: toScale, scaleY: toScale }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            var isH;
            var isShake;
            // 到台上之后随机影响已有的金币的位置, 震一震
            for (var i = 0; i < addSp.numChildren; ++i) {
                var coinOnDesk = addSp.getChildAt(i);
                if (coinOnDesk.isOnDesk) {
                    isShake = Math.random() * 10 > 8;
                    isH = Math.random() * 10 > 5;
                    if (isShake) {
                        TweenUtil_1.TweenUtil.shakeObject(coinOnDesk, !isH, isH, 1, 1, false);
                    }
                }
            }
            _this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_BET_COIN);
            img.isOnDesk = true;
        }));
    };
    return CoinFlyToDeskComponent;
}(CP21Component_1.default));
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/util/ApiUtil":266,"../../../../../hbcore/util/TweenUtil":270,"../../../../coin/CoinView":3,"../../../../common/CMessageBox":8,"../../../../common/component/CRollListType1Component":17,"../../../../net/CBaseNet":216,"../../../_commonModel/commonData":22,"../../data/CP21Data":122,"../../enum/EP21Conf":123,"../../net/CP21Net":131,"./CP21BetsCoinBreathComponent":145,"./CP21Component":148,"./CP21LightMyBetAreaComponent":152,"./CP21LightWinAreaComponent":153,"./CP21LocationComponent":154}],147:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CP21BottomComponent = /** @class */ (function (_super) {
    __extends(CP21BottomComponent, _super);
    function CP21BottomComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21BottomComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21BottomComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21BottomComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        // tofix
        var roomData = GM_1.GM.p21Data.room;
        var stageInfo;
        var roomNum;
        for (var _i = 0, _a = GM_1.GM.gameData.curStageInfo.stageInfos; _i < _a.length; _i++) {
            stageInfo = _a[_i];
            if (stageInfo.stageId == roomData.stageId) {
                roomNum = stageInfo.name;
                break;
            }
        }
        var bottomView = this.view.bottomView;
        bottomView.model.roomName = Lang_1.default.Get(roomData.gameCode);
        bottomView.model.roundNum = roomNum;
        bottomView.model.roundCount = roomData.roundNum;
        bottomView.model.limit = roomData.minBet + ' - ' + roomData.maxBet;
    };
    CP21BottomComponent.prototype.reset = function () {
    };
    return CP21BottomComponent;
}(CP21Component_1.default));
exports.default = CP21BottomComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"./CP21Component":148}],148:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CComponent_1 = require("../../../../common/component/CComponent");
var CP21Component = /** @class */ (function (_super) {
    __extends(CP21Component, _super);
    function CP21Component(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CP21Component.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bDestroy = true;
    };
    CP21Component.prototype.onStart = function () {
        var ret = _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        return ret;
    };
    Object.defineProperty(CP21Component.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21Component.prototype, "sfsGame", {
        get: function () {
            return GM_1.GM.instance.network.sfsGame;
        },
        enumerable: true,
        configurable: true
    });
    CP21Component.prototype.isDestroy = function () { return this.m_bDestroy; };
    return CP21Component;
}(CComponent_1.CComponent));
exports.default = CP21Component;
},{"../../../../../gm/GM":221,"../../../../common/component/CComponent":15}],149:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var CP21Net_1 = require("../../net/CP21Net");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
// 控制按钮
var CP21ControlBtnComponent = /** @class */ (function (_super) {
    __extends(CP21ControlBtnComponent, _super);
    function CP21ControlBtnComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.OPERATER = 'operater';
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21ControlBtnComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21ControlBtnComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21ControlBtnComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21ControlBtnComponent.prototype.reset = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.visible = false;
        pView.fenPaiGrayBtn.visible = false;
        pView.confirmBtn.visible = false;
        pView.cancelBtn.visible = false;
        pView.fapaiBtn.visible = false;
        pView.doubleBtn.visible = false;
        pView.stopBtn.visible = false;
        pView.callBtn.visible = false;
        this.playerControlUnlistenEvent();
    };
    CP21ControlBtnComponent.prototype.playerControlListenEvent = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.on(Laya.Event.MOUSE_DOWN, this, this._onFenpai_uiHandler);
        pView.stopBtn.on(Laya.Event.MOUSE_DOWN, this, this._onStop_uiHandler);
        pView.doubleBtn.on(Laya.Event.MOUSE_DOWN, this, this._onDouble_uiHandler);
        pView.callBtn.on(Laya.Event.MOUSE_DOWN, this, this._onCall_uiHandler);
    };
    CP21ControlBtnComponent.prototype.playerControlUnlistenEvent = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.off(Laya.Event.MOUSE_DOWN, this, this._onFenpai_uiHandler);
        pView.stopBtn.off(Laya.Event.MOUSE_DOWN, this, this._onStop_uiHandler);
        pView.doubleBtn.off(Laya.Event.MOUSE_DOWN, this, this._onDouble_uiHandler);
        pView.callBtn.off(Laya.Event.MOUSE_DOWN, this, this._onCall_uiHandler);
    };
    CP21ControlBtnComponent.prototype.showByPlayerController = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.visible = true;
        pView.stopBtn.visible = true;
        pView.doubleBtn.visible = true;
        pView.callBtn.visible = true;
    };
    CP21ControlBtnComponent.prototype.hideByPlayerController = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.visible = false;
        pView.stopBtn.visible = false;
        pView.doubleBtn.visible = false;
        pView.callBtn.visible = false;
    };
    CP21ControlBtnComponent.prototype.disablePlayerControl = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.disabled = true;
        pView.stopBtn.disabled = true;
        pView.doubleBtn.disabled = true;
        pView.callBtn.disabled = true;
    };
    CP21ControlBtnComponent.prototype.updatePlayerControl = function () {
        var pView = this.m_pController.view;
        pView.fenPaiBtn.visible = true;
        pView.stopBtn.visible = true;
        pView.doubleBtn.visible = true;
        pView.callBtn.visible = true;
        var isSelf = GM_1.GM.p21Data.curControlPlayer == GM_1.GM.p21Data.myId;
        if (!isSelf) {
            this.disablePlayerControl();
            return;
        }
        var pLocationInfo = GM_1.GM.p21Data.getLocationInfo(GM_1.GM.p21Data.myId);
        if (pLocationInfo) {
            if (!pLocationInfo.hasBet) {
                this.disablePlayerControl();
                return;
            }
        }
        // 分牌
        var canDouble = false;
        var canGet = false;
        var canSplit = false;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var areaIdx = operateDealPoker.areaIndex;
        var userID = GM_1.GM.p21Data.myId;
        var areaID = operateDealPoker.getAreaIDByPID_Index(userID, areaIdx);
        var isSplited = operateDealPoker.isSplitedByPID(userID);
        var myPokerInfo = operateDealPoker.getPokerByPID_AreaID(userID, areaID);
        if (myPokerInfo) {
            if (!isSplited) {
                canSplit = myPokerInfo.canSplit();
            }
            else { // 已分过牌
                canSplit = false;
            }
            canDouble = canGet = !(myPokerInfo.isFinish());
        }
        pView.stopBtn.disabled = false;
        pView.fenPaiBtn.disabled = !canSplit;
        // 停牌
        // 要牌
        pView.callBtn.disabled = !canGet;
        // 加倍
        pView.doubleBtn.disabled = !canDouble;
    };
    CP21ControlBtnComponent.prototype._isNetBusy = function () {
        return this.m_pController.netState.isNetStateBusy(this.OPERATER);
    };
    CP21ControlBtnComponent.prototype._setNetBusy = function () {
        this.m_pController.netState.setNetStateBusy(this.OPERATER);
    };
    CP21ControlBtnComponent.prototype._setNetIdle = function () {
        this.m_pController.netState.setNetStateIdle(this.OPERATER);
    };
    CP21ControlBtnComponent.prototype._onFenpai_uiHandler = function (e) {
        if (this._isNetBusy()) {
            return;
        }
        var canSplit = false;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var areaIdx = operateDealPoker.areaIndex;
        var userID = GM_1.GM.p21Data.myId;
        var areaID = operateDealPoker.getAreaIDByPID_Index(userID, areaIdx);
        var isSplited = operateDealPoker.isSplitedByPID(userID);
        var myPokerInfo = operateDealPoker.getPokerByPID_AreaID(userID, areaID);
        if (myPokerInfo) {
            canSplit = myPokerInfo.canSplit();
        }
        if (!canSplit) {
            return;
        }
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.SplitPoker);
        GM_1.GM.instance.network.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.SplitPoker, this._onSplitPokerResponse);
        this._setNetBusy();
        CP21Net_1.p21Net.sendSplitPoker(areaID);
    };
    CP21ControlBtnComponent.prototype._onStop_uiHandler = function (e) {
        if (this._isNetBusy()) {
            return;
        }
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var areaIdx = operateDealPoker.areaIndex;
        var userID = GM_1.GM.p21Data.myId;
        var areaID = operateDealPoker.getAreaIDByPID_Index(userID, areaIdx);
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.StopPoker);
        GM_1.GM.instance.network.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.StopPoker, this._onStopPokerResponse);
        this._setNetBusy();
        CP21Net_1.p21Net.sendStopPoker(areaID);
    };
    CP21ControlBtnComponent.prototype._onDouble_uiHandler = function (e) {
        if (this._isNetBusy()) {
            return;
        }
        var canDouble = false;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var areaIdx = operateDealPoker.areaIndex;
        var userID = GM_1.GM.p21Data.myId;
        var areaID = operateDealPoker.getAreaIDByPID_Index(userID, areaIdx);
        var isSplited = operateDealPoker.isSplitedByPID(userID);
        var myPokerInfo = operateDealPoker.getPokerByPID_AreaID(userID, areaID);
        if (myPokerInfo) {
            canDouble = !(myPokerInfo.isFinish());
        }
        if (!canDouble) {
            return;
        }
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.DoubleBet);
        GM_1.GM.instance.network.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.DoubleBet, this._onDoubleBetResponse);
        this._setNetBusy();
        CP21Net_1.p21Net.sendDoubleBet(areaID);
    };
    CP21ControlBtnComponent.prototype._onCall_uiHandler = function (e) {
        if (this._isNetBusy()) {
            return;
        }
        var canGet = false;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var areaIdx = operateDealPoker.areaIndex;
        var userID = GM_1.GM.p21Data.myId;
        var areaID = operateDealPoker.getAreaIDByPID_Index(userID, areaIdx);
        var isSplited = operateDealPoker.isSplitedByPID(userID);
        var myPokerInfo = operateDealPoker.getPokerByPID_AreaID(userID, areaID);
        if (myPokerInfo) {
            canGet = !(myPokerInfo.isFinish());
        }
        if (!canGet) {
            return;
        }
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.GetPoker);
        GM_1.GM.instance.network.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.GetPoker, this._onGetResponse);
        this._setNetBusy();
        CP21Net_1.p21Net.sendGetPoker(areaID);
    };
    // ================================net response ====================================
    CP21ControlBtnComponent.prototype._onSplitPokerResponse = function (data) {
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.SplitPoker);
        this._setNetIdle();
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
    };
    CP21ControlBtnComponent.prototype._onStopPokerResponse = function (data) {
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.StopPoker);
        this._setNetIdle();
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
        var pokerInfo = GM_1.GM.p21Data.operateDealPoker.getPokerByPID_AreaIndex(GM_1.GM.p21Data.myId, GM_1.GM.p21Data.operateDealPoker.areaIndex);
        pokerInfo.stopPoker();
        GM_1.GM.p21Data.operateDealPoker.processOperaterFinish(GM_1.GM.p21Data.myId);
    };
    CP21ControlBtnComponent.prototype._onDoubleBetResponse = function (data) {
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.DoubleBet);
        this._setNetIdle();
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
        // 加倍, 也要停止
        var pokerInfo = GM_1.GM.p21Data.operateDealPoker.getPokerByPID_AreaIndex(GM_1.GM.p21Data.myId, GM_1.GM.p21Data.operateDealPoker.areaIndex);
        pokerInfo.stopPoker();
    };
    CP21ControlBtnComponent.prototype._onGetResponse = function (data) {
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.GetPoker);
        this._setNetIdle();
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
    };
    CP21ControlBtnComponent.prototype.process = function () {
    };
    return CP21ControlBtnComponent;
}(CP21Component_1.default));
exports.default = CP21ControlBtnComponent;
},{"../../../../../gm/GM":221,"../../../../common/CMessageBox":8,"../../../../net/CBaseNet":216,"../../net/CP21Net":131,"./CP21Component":148}],150:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var animation_1 = require("../../../../../hbcore/framework/animation");
var GM_1 = require("../../../../../gm/GM");
var CP21DealPokerAnimation_1 = require("../animation/CP21DealPokerAnimation");
var CP21OpenPokerAnimation_1 = require("../animation/CP21OpenPokerAnimation");
var CP21SplitPokerAnimation_1 = require("../animation/CP21SplitPokerAnimation");
var CP21WaitTimeAnimation_1 = require("../animation/CP21WaitTimeAnimation");
var CP21DealBlueAnimation_1 = require("../animation/CP21DealBlueAnimation");
var log_1 = require("../../../../../hbcore/framework/log");
// 发牌
var CP21DealComponent = /** @class */ (function (_super) {
    __extends(CP21DealComponent, _super);
    function CP21DealComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21DealComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bStop = true;
        if (this.m_aniGroup) {
            this.m_aniGroup.stop();
        }
        this.m_aniGroup = null;
    };
    CP21DealComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21DealComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21DealComponent.prototype.reset = function () {
        this.m_bActionFinished = false;
        this.m_bStop = false;
    };
    CP21DealComponent.prototype.process = function (callback) {
        this.m_bActionFinished = false;
        this.m_bStop = false;
        this.m_callback = callback;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var dealPokerList = operateDealPoker.getDealPokerList(); // 牌列表
        this.m_aniGroup = new animation_1.animation.CAnimationGroup();
        // 处理逻辑
        // 第一次发牌, 庄和玩家都是一人两张牌, 庄的第二张牌不开牌(send没值)
        // 后面发牌, 更新牌的状态, p21Data.dealPokerData保存了所有牌的最新状态, 会更新
        // p21Data.operateDealPoker.pokerState保存了牌当前已操作的状态
        // 遍历所有牌, 根据pokerState和牌的值, 进行操作
        var pokerStateType = operateDealPoker.PokerState;
        for (var i = 0; i < dealPokerList.length; ++i) {
            var dealData = dealPokerList[i];
            var aniList = void 0;
            if (!dealData) {
                console.log('dealData is null');
            }
            // 蓝牌
            var blueAni = null;
            if (!(operateDealPoker.hasDealBlue)) {
                if (operateDealPoker.bludPlace > -1 && dealData.pokerData.id == operateDealPoker.bludPlace) {
                    blueAni = this._buildAnimationByBlue();
                    operateDealPoker.hasDealBlue = true;
                }
            }
            if (dealData.pokerData.isSplit && GM_1.GM.p21Data.hasSplitByUser(dealData.pid)) {
                // 该user存在分牌操作协议
                aniList = this._buildAnimationListBySplitB(dealData, dealPokerList);
                GM_1.GM.p21Data.removeSplitPoker(dealData.pid);
                // _buildAnimationListBySplitB里删除了dealPokerList一个元素
                // i--; 删的是后面的元素。不用减
            }
            else {
                aniList = this._buildAnimationListB(dealData);
            }
            if (blueAni) {
                if (!aniList) {
                    aniList = [];
                }
                aniList.unshift(blueAni);
            }
            this.m_aniGroup.add(aniList);
        }
        this.m_aniGroup.start(this, this._onFinished);
    };
    CP21DealComponent.prototype._buildAnimationByBlue = function () {
        var ani = new CP21DealBlueAnimation_1.CP21DealBlueAnimation(this.m_pController, null, null);
        return ani;
    };
    // 创建分牌动画
    // 会删除dealPokerList里另一张牌的数据, 因为在dealData处理时，另一组的牌也处理了
    CP21DealComponent.prototype._buildAnimationListBySplitB = function (dealData, dealPokerList) {
        // 获得玩家的另一组pokerInfo数据(dealData所在的一组, dealPokerList在另一组, 分完牌共2组) 
        var pokerInfo;
        if (dealData.pokerData.areaIndex == 0) {
            pokerInfo = GM_1.GM.p21Data.operateDealPoker.getPokerByPID_AreaIndex(dealData.pid, 1);
        }
        else {
            pokerInfo = GM_1.GM.p21Data.operateDealPoker.getPokerByPID_AreaIndex(dealData.pid, 0);
        }
        // 第一张牌为分组的第一张牌, 刚开始只显示一张
        var otherPokerData = pokerInfo.pokers[0];
        var otherPokerId = otherPokerData.id;
        var otherDealData;
        // 获得另一张牌数据, 并在list中删除
        for (var dealIndex = 0; dealIndex < dealPokerList.length; ++dealIndex) {
            otherDealData = dealPokerList[dealIndex];
            if (otherDealData.pokerData.id == otherPokerId) {
                dealPokerList.splice(dealIndex, 1);
                break;
            }
        }
        var aniList = this._buildAnimationListB(dealData, otherDealData, true);
        return aniList;
    };
    CP21DealComponent.prototype._buildAnimationListB = function (dealData, otherDealPokerData, isSplit) {
        if (otherDealPokerData === void 0) { otherDealPokerData = null; }
        if (isSplit === void 0) { isSplit = false; }
        log_1.log.log('______________________创建发牌动画 : id ' + dealData.pokerData.id);
        var aniList = [];
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var pokerStateType = operateDealPoker.PokerState;
        var pokerState = operateDealPoker.getState(dealData.pokerData.id);
        var toState = -1;
        var ani = null;
        if (isSplit) {
            // 分牌
            toState = operateDealPoker.PokerState.OPENED;
            ani = this._createAnimationC(toState, CP21SplitPokerAnimation_1.CP21SplitPokerAnimation, dealData);
            aniList.push(ani);
            ani = this._createAnimationC(toState, CP21SplitPokerAnimation_1.CP21SplitPokerAnimation, otherDealPokerData);
            aniList.push(ani);
            ani = new CP21WaitTimeAnimation_1.CP21WaitTimeAnimation(100, null, null);
            aniList.push(ani);
            return aniList;
        }
        // 不分牌
        var hasSeed = dealData.pokerData.seed && dealData.pokerData.seed.length > 0;
        switch (pokerState) {
            case pokerStateType.UNREADY:
                if (hasSeed) {
                    // deal n open
                    toState = operateDealPoker.PokerState.DEALED;
                    ani = this._createAnimationC(toState, CP21DealPokerAnimation_1.CP21DealPokerAnimation, dealData);
                    aniList.push(ani);
                    toState = operateDealPoker.PokerState.OPENED;
                    ani = this._createAnimationC(toState, CP21OpenPokerAnimation_1.CP21OpenPokerAnimation, dealData);
                    aniList.push(ani);
                }
                else {
                    // 庄的第二张牌, 没有seed
                    toState = operateDealPoker.PokerState.DEALED;
                    ani = this._createAnimationC(toState, CP21DealPokerAnimation_1.CP21DealPokerAnimation, dealData);
                    aniList.push(ani);
                }
                break;
            case pokerStateType.DEALED:
                if (hasSeed) {
                    // 这时庄的第一张牌可能还没有种子。即.还不用开牌
                    toState = operateDealPoker.PokerState.OPENED;
                    ani = this._createAnimationC(toState, CP21OpenPokerAnimation_1.CP21OpenPokerAnimation, dealData);
                    aniList.push(ani);
                }
                break;
            case pokerStateType.OPENED:
                // do nothing
                log_1.log.log('______________________创建发牌动画 牌已开 : id ' + dealData.pokerData.id);
                break;
        }
        return aniList;
    };
    CP21DealComponent.prototype._createAnimationC = function (toState, cls, dealData) {
        var pokerId = dealData.pokerData.id;
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var ani = new cls(this.m_pController, dealData, this, function () {
            // 动画完成。改变牌状态
            log_1.log.log('______________________发牌动画完成 : id ' + dealData.pokerData.id, ' toState : ' + toState);
            operateDealPoker.setState(pokerId, toState);
        });
        return ani;
    };
    CP21DealComponent.prototype._onFinished = function () {
        if (this.m_callback) {
            this.m_callback.run();
        }
        this.m_callback = null;
    };
    CP21DealComponent.prototype.stop = function () {
        this.m_bStop = true;
    };
    return CP21DealComponent;
}(CP21Component_1.default));
exports.default = CP21DealComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/framework/log":256,"../animation/CP21DealBlueAnimation":135,"../animation/CP21DealPokerAnimation":136,"../animation/CP21OpenPokerAnimation":137,"../animation/CP21SplitPokerAnimation":142,"../animation/CP21WaitTimeAnimation":143,"./CP21Component":148}],151:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var FuncUtil_1 = require("../../../../../hbcore/util/FuncUtil");
var CP21TopComponent_1 = require("./CP21TopComponent");
// 发牌器
var CP21DealPortComponent = /** @class */ (function (_super) {
    __extends(CP21DealPortComponent, _super);
    function CP21DealPortComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21DealPortComponent.prototype.reset = function () {
        var pBluePoker = this.view.desk_emitter_pokerBlue;
        pBluePoker.visible = false;
        pBluePoker.x = pBluePoker.y = 0;
        this.process();
    };
    CP21DealPortComponent.prototype.onDestroy = function () {
        this.view.desk_emitter_top.off(Laya.Event.MOUSE_DOWN, this, this._onShowLookPoker);
        _super.prototype.onDestroy.call(this);
    };
    CP21DealPortComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21DealPortComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.view.desk_emitter_top.on(Laya.Event.MOUSE_DOWN, this, this._onShowLookPoker);
        return true;
    };
    // CPokerListData 这是百家乐的数据结构。要改
    CP21DealPortComponent.prototype.process = function () {
        var pokerList = GM_1.GM.p21Data.operateDealPoker.backPokers;
        var p1 = pokerList[0];
        var p2 = pokerList[1];
        if (!p1 || !p2) {
            this.view.desk_emitter_info1_num1.text = '';
            this.view.desk_emitter_info2_num2.text = '';
            this.view.desk_emitter_info1_final1.text = '';
            this.view.desk_emitter_info2_final2.text = '';
            return;
        }
        this.view.desk_emitter_info1_num1.text = p1.id.toString();
        this.view.desk_emitter_info2_num2.text = p2.id.toString();
        this.view.desk_emitter_info1_final1.text = FuncUtil_1.FuncUtil.toOmitString(p1.mark.toString(), 5);
        this.view.desk_emitter_info2_final2.text = FuncUtil_1.FuncUtil.toOmitString(p2.mark.toString(), 5);
    };
    CP21DealPortComponent.prototype._onShowLookPoker = function () {
        this.m_pController.getComponent(CP21TopComponent_1.default).triggerLookAll();
    };
    return CP21DealPortComponent;
}(CP21Component_1.default));
exports.default = CP21DealPortComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/FuncUtil":268,"./CP21Component":148,"./CP21TopComponent":166}],152:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21LightMyBetAreaComponent = /** @class */ (function (_super) {
    __extends(CP21LightMyBetAreaComponent, _super);
    function CP21LightMyBetAreaComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21LightMyBetAreaComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_processingList = null;
    };
    CP21LightMyBetAreaComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_processingList = new Laya.WeakObject();
        return true;
    };
    CP21LightMyBetAreaComponent.prototype.process = function (areaIndex) {
        _super.prototype.process.call(this);
        if (areaIndex < 0) {
            return;
        }
        var isExist = this.m_processingList.has(areaIndex);
        if (isExist) {
            return;
        }
        // let view = this.view.getLightAreaByIndex(areaIndex);
        // let aniComp = new CBreathAnimationComponent(this, ()=>{
        //     if (this.m_processingList && this.m_processingList.has(areaIndex)) {
        //         this.m_processingList.del(areaIndex);
        //     }
        //     aniComp.destroy();
        // }, view, 0, 0.01, true, 200);
        // aniComp.awake();
        // aniComp.start();
        // aniComp.process();
        // this.m_processingList.set(areaIndex, true);
    };
    CP21LightMyBetAreaComponent.prototype.reset = function () {
    };
    return CP21LightMyBetAreaComponent;
}(CP21Component_1.default));
exports.default = CP21LightMyBetAreaComponent;
},{"./CP21Component":148}],153:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
// 发牌器
var CP21LightWinAreaComponent = /** @class */ (function (_super) {
    __extends(CP21LightWinAreaComponent, _super);
    function CP21LightWinAreaComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21LightWinAreaComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21LightWinAreaComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21LightWinAreaComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21LightWinAreaComponent.prototype.process = function (data) {
        if (!data || data.length == 0) {
            return;
        }
        // for (let idx of data) {
        //     let img:Laya.Image = this.view.getDeskSelectAreaByIndex(idx-1);
        //     let aniComp = new CBreathAnimationComponent(this, ()=>{
        //         aniComp.destroy();
        //     }, img, 10, 0.01, false);
        //     aniComp.awake();
        //     aniComp.start();
        //     aniComp.process();
        // } 
    };
    return CP21LightWinAreaComponent;
}(CP21Component_1.default));
exports.default = CP21LightWinAreaComponent;
},{"./CP21Component":148}],154:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21NetComponent_1 = require("./CP21NetComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21Data_1 = require("../../data/CP21Data");
var FuncUtil_1 = require("../../../../../hbcore/util/FuncUtil");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CP21ControlBtnComponent_1 = require("./CP21ControlBtnComponent");
var CP21LocationComponent = /** @class */ (function (_super) {
    __extends(CP21LocationComponent, _super);
    function CP21LocationComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CP21LocationComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bDestroy = true;
        this.m_pController.netComponent.off(CP21NetComponent_1.CP21NetComponent.EVENT_USER_UPDATE, this, this.process);
        this.m_pController.netComponent.off(CP21NetComponent_1.CP21NetComponent.EVENT_COUNT_DOWN_UPDATE, this, this.updateCountDown);
    };
    CP21LocationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        this.m_pController.netComponent.on(CP21NetComponent_1.CP21NetComponent.EVENT_USER_UPDATE, this, this.process);
        return true;
    };
    CP21LocationComponent.prototype.reset = function () {
        var pView = this.m_pController.view;
        for (var i = 0; i < 3; ++i) {
            var bao = pView.get_userList_bao(i);
            var cd = pView.get_userList_cd(i);
            var cdTxt = pView.get_userList_cdTxt(i);
            cdTxt.visible = false;
            cd.visible = false;
            bao.visible = false;
            var numBox = this.view.getBetAreaNumBox(i);
            numBox.visible = false;
        }
        this.resetCountDown();
    };
    CP21LocationComponent.prototype.resetCountDown = function () {
        var pView = this.m_pController.view;
        for (var i = 0; i < 3; ++i) {
            // let bao = pView.get_userList_bao(i);
            var cd = pView.get_userList_cd(i);
            var cdTxt = pView.get_userList_cdTxt(i);
            cdTxt.visible = false;
            cd.visible = false;
            // bao.visible = false;
            // let numBox:Laya.Box = this.view.getBetAreaNumBox(i);
            // numBox.visible = false;
        }
    };
    CP21LocationComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var playerId = GM_1.GM.gameData.curStageInfo.playerId;
        var pLocationList = GM_1.GM.p21Data.locationList;
        var newList = [null, null, null];
        var myData = GM_1.GM.p21Data.getLocationInfo(playerId); // this.getDataByUID(playerId);
        newList[1] = myData;
        var setIndex = 0;
        var i = 0;
        for (; i < pLocationList.length; ++i) {
            var infoData = pLocationList[i];
            if (infoData.playerId != playerId) {
                newList[setIndex] = pLocationList[i];
                ++setIndex;
                if (setIndex == 1) {
                    ++setIndex;
                }
            }
        }
        this.m_userDataList = newList;
        for (i = 0; i < newList.length; ++i) {
            var item = this.view.getLocationItem(i);
            item.dataSource = newList[i];
            this._onRenderItem(item, i);
        }
    };
    CP21LocationComponent.prototype._onRenderItem = function (comp, idx) {
        for (var i = 0; i < comp.numChildren; ++i) {
            var child = comp.getChildAt(i);
            if (child.name != 'result' && child.name != 'resultTxt') {
                child.visible = false;
            }
        }
        var locationData = comp.dataSource;
        var myIcon1 = this.view.get_userList_my1(comp);
        var myIcon2 = this.view.get_userList_my2(comp);
        var otherIcon1 = this.view.get_userList_other1(comp);
        var otherIcon2 = this.view.get_userList_other2(comp);
        var myName = this.view.get_userList_myName(comp);
        var myMoney = this.view.get_userList_myMoney(comp);
        var otherName = this.view.get_userList_otherName(comp);
        var otherMoney = this.view.get_userList_otherMoney(comp);
        var empty = this.view.get_userList_empty(comp);
        var bg = this.view.get_userList_bg(comp);
        var icon1;
        var icon2;
        var name;
        var money;
        var myID = GM_1.GM.gameData.curStageInfo.playerId;
        var isSelf = false;
        // 更新下注信息
        if (locationData) {
            var pLocationInfo = GM_1.GM.p21Data.getLocationInfo(locationData.playerId);
            var locationIndex = this.getLocationIndexByUser(locationData.playerId); // 玩家的index, 不能用原本的locationList里面取
            if (pLocationInfo && locationIndex >= 0 && pLocationInfo.totalBet != undefined) {
                var numBox = this.view.getBetAreaNumBox(locationIndex);
                var betedCount = pLocationInfo.totalBet;
                betedCount = ApiUtil_1.ApiUtil.formatNumber(betedCount);
                if (betedCount <= 0) {
                    numBox.visible = false;
                }
                else {
                    numBox.visible = true;
                    this.view.getDesk_bets_numNum(numBox).text = ApiUtil_1.ApiUtil.formatNumber(betedCount).toString();
                    this.view.getDesk_bets_numCoin(numBox).index = GM_1.GM.coinMap.getCoinType().type;
                }
            }
        }
        // 更新位置信息
        if (!locationData) {
            empty.visible = true;
            bg.visible = false;
        }
        else {
            bg.visible = true;
            isSelf = myID == locationData.playerId;
            if (isSelf) {
                myIcon1.visible = myName.visible = myMoney.visible = true;
                icon1 = myIcon1;
                icon2 = myIcon2;
                name = myName;
                money = myMoney;
            }
            else {
                otherIcon1.visible = otherName.visible = otherMoney.visible = true;
                icon1 = otherIcon1;
                icon2 = otherIcon2;
                name = otherName;
                money = otherMoney;
            }
            if (!locationData.nickName || locationData.nickName.length == 0) {
                locationData.nickName = 'none';
            }
            name.text = FuncUtil_1.FuncUtil.toOmitString(locationData.nickName, 10);
            money.text = ApiUtil_1.ApiUtil.formatNumber(locationData.balance).toString();
        }
    };
    CP21LocationComponent.prototype.updateCountDown = function () {
        this.resetCountDown();
        var cdData = GM_1.GM.p21Data.countDownData;
        if (cdData.type == CP21Data_1.p21Data.EGameState.playerControl) {
            var locIdx = this.getLocationIndexByUser(cdData.userId);
            var cd = this.view.get_userList_cd(locIdx);
            var cdTxt = this.view.get_userList_cdTxt(locIdx);
            cd.visible = true;
            cdTxt.visible = true;
            cdTxt.text = cdData.second.toString();
            if (cdData.second <= 0) {
                this.m_pController.getComponent(CP21ControlBtnComponent_1.default).hideByPlayerController();
            }
        }
    };
    CP21LocationComponent.prototype.updateInsurance = function () {
        var pLocationList = GM_1.GM.p21Data.locationList;
        for (var _i = 0, pLocationList_1 = pLocationList; _i < pLocationList_1.length; _i++) {
            var pLocation = pLocationList_1[_i];
            if (pLocation && pLocation.betInstance > 0.00000001) {
                var locationIndex = this.getLocationIndexByUser(pLocation.playerId);
                if (locationIndex >= 0) {
                    this.m_pController.view.get_userList_bao(locationIndex).visible = true;
                }
            }
        }
    };
    CP21LocationComponent.prototype.getLocationIndexByUser = function (playerId) {
        var locationInfoList = this.m_userDataList;
        var i;
        var ret = 0;
        for (i = 0; i < locationInfoList.length; ++i) {
            if (locationInfoList[i] && locationInfoList[i].playerId == playerId) {
                ret = i;
                break;
            }
        }
        return ret;
    };
    CP21LocationComponent.prototype.getLocationUserByIndex = function (locationIndex) {
        if (locationIndex < this.m_userDataList.length) {
            if (this.m_userDataList[locationIndex]) {
                return this.m_userDataList[locationIndex].playerId;
            }
            else {
                return -1;
            }
        }
        return 0;
    };
    return CP21LocationComponent;
}(CP21Component_1.default));
exports.default = CP21LocationComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../../hbcore/util/FuncUtil":268,"../../data/CP21Data":122,"./CP21Component":148,"./CP21ControlBtnComponent":149,"./CP21NetComponent":155}],155:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21Net_1 = require("../../net/CP21Net");
var GM_1 = require("../../../../../gm/GM");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var netData_1 = require("../../../_commonModel/netData");
// 注意
// 从队列中拿出来的协议, 有可能是之前收到的协议, 而数据。可能已经是最新的
// 最好是在入队时, copy一份数据出来, 再从事件派发出去
var CP21NetComponent = /** @class */ (function (_super) {
    __extends(CP21NetComponent, _super);
    function CP21NetComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CP21NetComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        var pEmitter = this.sfsGame.Emitter;
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.ClientReady);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.NewRound);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastBet);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastInsurance);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastDouble);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastGetPoker);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastStop);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastSplit);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastDeal);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastGState);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.BroadcastPState);
        pEmitter.off(this, CP21Net_1.p21Net.NetConf.Result);
        pEmitter.off(this, netData_1.common.netData.NetConf.CountDown);
        pEmitter.off(this, netData_1.common.netData.NetConf.InOutRoom);
        pEmitter.off(this, netData_1.common.netData.NetConf.Shuffle);
        for (var _i = 0, _a = this.m_queue; _i < _a.length; _i++) {
            var pData = _a[_i];
            Laya.Pool.recover('protocolData', pData);
        }
        this.m_queue = null;
        this.m_bDestroy = true;
    };
    CP21NetComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.m_isReady = false;
        this.m_isInitilize = false;
    };
    CP21NetComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        if (!this.m_isInitilize) {
            this.m_bDestroy = false;
            this.m_queue = [];
            var pEmitter = this.sfsGame.Emitter;
            // ready
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.ClientReady, this._onClientReadyResponse);
            // 新局
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.NewRound, this._onNewRoundResponse);
            // 广播
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastBet, this._onBroadcastBetResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastInsurance, this._onBroadcastInsuranceResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastDouble, this._onBroadcastDoubleResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastGetPoker, this._onBroadcastGetPokerResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastStop, this._onBroadcastStopResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastSplit, this._onBroadcastSplitResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastDeal, this._onBroadcastDealResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastGState, this._onBroadcastGStateResponse);
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.BroadcastPState, this._onBroadcastPStateResponse);
            // 结算
            pEmitter.on(this, CP21Net_1.p21Net.NetConf.Result, this._onResultResponse);
            // 业务
            // pEmitter.on(this, p21Net.NetConf.PokerDetail, this._onPokerDetailResponse);
            // 公共
            pEmitter.on(this, netData_1.common.netData.NetConf.CountDown, this._onCountDownResponse);
            pEmitter.on(this, netData_1.common.netData.NetConf.InOutRoom, this._onInOutResponse);
            pEmitter.on(this, netData_1.common.netData.NetConf.Shuffle, this._onShuffleResponse);
            CP21Net_1.p21Net.sendClientReady();
            this.m_isInitilize = true;
        }
        return this.m_isReady;
    };
    CP21NetComponent.prototype.process = function () {
    };
    // ===================================ClientReady=====================================
    CP21NetComponent.prototype._onClientReadyResponse = function (data) {
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(data['errorCode']);
            CP21Net_1.p21Net.sendClientReady();
            return;
        }
        else {
            GM_1.GM.p21Data.updateEnter(data, GM_1.GM.gameData.curStageInfo.playerId);
            this.m_isReady = true;
        }
        GM_1.GM.gameData.resetRound();
        this._inQueue(CP21Net_1.p21Net.NetConf.ClientReady);
    };
    // ===================================Broadcast=====================================
    CP21NetComponent.prototype._onNewRoundResponse = function (data) {
        // 新局
        GM_1.GM.gameData.addRound();
        GM_1.GM.p21Data.updateNewRound(data);
        this._inQueue(CP21Net_1.p21Net.NetConf.NewRound);
    };
    CP21NetComponent.prototype._onBroadcastBetResponse = function (data) {
        var operData = GM_1.GM.p21Data.updateBet(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE); // 下载完, 玩家的数据变了
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastBet, { pid: operData.userId, betCount: operData.betMoney });
    };
    CP21NetComponent.prototype._onBroadcastInsuranceResponse = function (data) {
        GM_1.GM.p21Data.updateInsurance(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE);
        var userid = data['userId'];
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastInsurance, userid);
    };
    CP21NetComponent.prototype._onBroadcastDoubleResponse = function (data) {
        GM_1.GM.p21Data.updateDoubleBet(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE); // 下载完, 玩家的数据变了
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastDouble);
    };
    CP21NetComponent.prototype._onBroadcastGetPokerResponse = function (data) {
        GM_1.GM.p21Data.updateGetPoker(data);
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastGetPoker);
    };
    CP21NetComponent.prototype._onBroadcastStopResponse = function (data) {
        GM_1.GM.p21Data.updateStopPoker(data);
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastStop);
    };
    CP21NetComponent.prototype._onBroadcastSplitResponse = function (data) {
        GM_1.GM.p21Data.updateSplitPoker(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE); // 分完牌, 玩家的数据变了        
        this._inQueue(CP21Net_1.p21Net.NetConf.SplitPoker);
    };
    CP21NetComponent.prototype._onBroadcastDealResponse = function (data) {
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastDeal, data, Laya.Handler.create(this, function () {
            GM_1.GM.p21Data.updateDealPoker(data);
        }));
    };
    CP21NetComponent.prototype._onBroadcastGStateResponse = function (data) {
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastGState, data['gameState'], Laya.Handler.create(this, function () {
            GM_1.GM.p21Data.updateGameState(data);
        }));
    };
    CP21NetComponent.prototype._onBroadcastPStateResponse = function (data) {
        GM_1.GM.p21Data.updatePlayerState(data);
        this._inQueue(CP21Net_1.p21Net.NetConf.BroadcastPState);
    };
    CP21NetComponent.prototype._onResultResponse = function (data) {
        GM_1.GM.p21Data.updateResult(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE);
        this._inQueue(CP21Net_1.p21Net.NetConf.Result);
    };
    // ===================================公共=====================================
    CP21NetComponent.prototype._onCountDownResponse = function (data) {
        GM_1.GM.p21Data.updateCountDown(data);
        this.event(CP21NetComponent.EVENT_COUNT_DOWN_UPDATE);
    };
    // private _onStartBetCountDown(data:CBaseNet) {
    //     this._inQueue(BaccNetConf.StartBetCountDown, data);
    // } 
    CP21NetComponent.prototype._onInOutResponse = function (data) {
        if (!data) {
            return;
        }
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
        GM_1.GM.p21Data.updateLocation(data);
        this.event(CP21NetComponent.EVENT_USER_UPDATE);
    };
    CP21NetComponent.prototype._onShuffleResponse = function (data) {
        this._inQueue(netData_1.common.netData.NetConf.Shuffle, data);
    };
    // -----------------------------queue-----------------------------------------
    // handler : 出队时的回调, 为了某些数据, 在协议处理时才更新
    CP21NetComponent.prototype._inQueue = function (protocol, data, handler) {
        if (data === void 0) { data = null; }
        if (handler === void 0) { handler = null; }
        var pData = Laya.Pool.getItemByClass('protocolData', ProtocolData);
        pData.protocol = protocol;
        pData.data = data;
        pData.processHandler = handler;
        this.m_queue.push(pData);
    };
    CP21NetComponent.prototype.hasProtocol = function () {
        return this.m_queue.length > 0;
    };
    CP21NetComponent.prototype.nextProtocol = function () {
        var pData = this.m_queue.shift();
        if (pData.processHandler) {
            pData.processHandler.run();
        }
        Laya.Pool.recover('protocolData', pData);
        return pData;
    };
    CP21NetComponent.EVENT_BET_RESPONSE = 'betsResponse';
    CP21NetComponent.EVENT_USER_UPDATE = 'userUpdate';
    CP21NetComponent.EVENT_COUNT_DOWN_UPDATE = 'countDownUpdate';
    return CP21NetComponent;
}(CP21Component_1.default));
exports.CP21NetComponent = CP21NetComponent;
var ProtocolData = /** @class */ (function () {
    function ProtocolData() {
    }
    return ProtocolData;
}());
},{"../../../../../gm/GM":221,"../../../../common/CMessageBox":8,"../../../../net/CBaseNet":216,"../../../_commonModel/netData":23,"../../net/CP21Net":131,"./CP21Component":148}],156:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
// 播放开牌动画
var CP21OpenAnimationComponent = /** @class */ (function (_super) {
    __extends(CP21OpenAnimationComponent, _super);
    function CP21OpenAnimationComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21OpenAnimationComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21OpenAnimationComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21OpenAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21OpenAnimationComponent.prototype.process = function (callback) {
    };
    return CP21OpenAnimationComponent;
}(CP21Component_1.default));
exports.default = CP21OpenAnimationComponent;
},{"./CP21Component":148}],157:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
// 发牌
var CP21OpenPokerComponent = /** @class */ (function (_super) {
    __extends(CP21OpenPokerComponent, _super);
    function CP21OpenPokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21OpenPokerComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.m_bStop = true;
    };
    CP21OpenPokerComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21OpenPokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21OpenPokerComponent.prototype.process = function (callback) {
        this.m_finishCallback = callback;
        this.m_bStop = false;
    };
    CP21OpenPokerComponent.prototype._onFinished = function () {
        if (this.m_finishCallback) {
            this.m_finishCallback.run();
        }
        return true;
    };
    CP21OpenPokerComponent.prototype.stop = function () {
        this.m_bStop = true;
    };
    return CP21OpenPokerComponent;
}(CP21Component_1.default));
exports.default = CP21OpenPokerComponent;
},{"./CP21Component":148}],158:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var CPaiCaiView_1 = require("../../../_commonView/paicai/CPaiCaiView");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CP21PaicaiComponent = /** @class */ (function (_super) {
    __extends(CP21PaicaiComponent, _super);
    function CP21PaicaiComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21PaicaiComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21PaicaiComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CP21PaicaiComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21PaicaiComponent.prototype.process = function (paicai) {
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = false;
        openComponent.process(CPaiCaiView_1.default, CPaiCaiView_1.default.SIGN, 0, null, true);
        var view = openComponent.getView(0).view;
        view.model.paicai = paicai;
        openComponent.showView(this.m_pController.view, 0);
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_PAICAI);
    };
    CP21PaicaiComponent.prototype.reset = function () {
    };
    return CP21PaicaiComponent;
}(CP21Component_1.default));
exports.default = CP21PaicaiComponent;
},{"../../../../common/component/COpenSubViewComponent":16,"../../../_commonView/paicai/CPaiCaiView":42,"../../enum/EP21Conf":123,"./CP21Component":148}],159:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var CMD5CheckView_1 = require("../../../_commonView/md5/CMD5CheckView");
var CP21LocationComponent_1 = require("./CP21LocationComponent");
// 所有牌
var CP21PokerComponent = /** @class */ (function (_super) {
    __extends(CP21PokerComponent, _super);
    function CP21PokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21PokerComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this._loopPoker(this._unlistenEvent);
    };
    CP21PokerComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CP21PokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this._loopPoker(this._listenEvent);
        return true;
    };
    CP21PokerComponent.prototype._listenEvent = function (pokerComp) {
        pokerComp.poker.on(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler, [pokerComp]);
    };
    CP21PokerComponent.prototype._unlistenEvent = function (pokerComp) {
        pokerComp.poker.off(Laya.Event.MOUSE_DOWN, this, this._onTipsDown_uiHandler);
    };
    CP21PokerComponent.prototype._onTipsDown_uiHandler = function (pokerComp, e) {
        var openSubViewComponent = this.getComponent(COpenSubViewComponent_1.default);
        openSubViewComponent.autoAddToParent = false;
        openSubViewComponent.process(CMD5CheckView_1.default, CMD5CheckView_1.default.SIGN, 0);
        var md5View = openSubViewComponent.getView(0).view;
        var locationComponent = this.m_pController.getComponent(CP21LocationComponent_1.default);
        if (!locationComponent) {
            return;
        }
        var pid = 0;
        if (pokerComp.locationIdx != -1) {
            pid = locationComponent.getLocationUserByIndex(pokerComp.locationIdx);
        }
        if (-1 == pid) {
            return;
        }
        var pokerData = GM_1.GM.p21Data.operateDealPoker.getPokerDataByPID_AreaIndex_pokerIndex(pid, pokerComp.areaIdx, pokerComp.pokerIdx);
        md5View.model.pokerData = pokerData;
        openSubViewComponent.showView(Laya.stage, 0);
        GM_1.GM.playButtonSound();
    };
    CP21PokerComponent.prototype.reset = function () {
        this._loopPoker(this._resetPokerB);
    };
    CP21PokerComponent.prototype._resetPokerB = function (pokerComp) {
        var poker = pokerComp.poker;
        poker.visible = false;
        poker.alpha = 1;
        var toScale = pokerComp.isBank ? 1.333 : 1;
        poker.scaleX = toScale;
        poker.scaleY = toScale;
        var baoAni = pokerComp.baoAni;
        baoAni.visible = false;
        baoAni.stop();
        var dark = pokerComp.dark;
        if (dark) {
            dark.visible = false;
        }
        var pointBox = pokerComp.pointBox;
        pointBox.visible = false;
    };
    CP21PokerComponent.prototype.process = function () {
    };
    // 分牌情况下, 非当前操作的牌, 需要置暗
    CP21PokerComponent.prototype.updateSplitPokerDark = function () {
        var dealPokerData = GM_1.GM.p21Data.operateDealPoker;
        var isSplited = dealPokerData.isSplitedByPID(GM_1.GM.p21Data.myId);
        if (!isSplited) {
            return;
        }
        var playerIndex = 1;
        var pView = this.m_pController.view;
        var pPoBox1 = pView.getPokerPlayerPoBox(1, 0);
        var pPoBox2 = pView.getPokerPlayerPoBox(1, 1);
        var dark1 = pView.getDark(pPoBox1);
        var dark2 = pView.getDark(pPoBox2);
        var poBox;
        var dark;
        if (dealPokerData.areaIndex == 0) {
            dark1.visible = false;
            dark2.visible = true;
            dark = dark2;
            poBox = pPoBox2;
        }
        else {
            dark2.visible = false;
            dark1.visible = true;
            dark = dark1;
            poBox = pPoBox1;
        }
        var p1 = pView.getPoker(poBox, 0);
        dark.x = p1.x;
        var endX = poBox.width - dark.x; // 因为是居中的
        var width = endX - dark.x;
        dark.width = width;
    };
    CP21PokerComponent.prototype.updatePoint = function (poBox, point, locationIndex) {
        var pView = this.m_pController.view;
        var pointBox = pView.getPointBox(poBox);
        pointBox.visible = true;
        var bg1 = pView.getPointBg1(pointBox);
        var bg2 = pView.getPointBg2(pointBox);
        var txt = pView.getPointTxt(pointBox);
        if (point.len == 2 && point.p2 == 21) {
            txt.text = '21';
        }
        else {
            if (point.p2 == -1) {
                txt.text = point.p1.toString();
            }
            else {
                txt.text = point.p1 + '/' + point.p2;
            }
        }
        if (point.p1 > 21) {
            bg1.visible = false;
            bg2.visible = true;
        }
        else {
            bg1.visible = true;
            bg2.visible = false;
        }
        if (-1 == locationIndex) {
            // 庄家的坐标不知道为啥偏左了
            var p1 = pView.getPoker(poBox, 0);
            var endX = poBox.width - p1.x; // 因为是居中的
            pointBox.x = endX + 30;
        }
        else if (locationIndex == 2) {
            // 最右边的显示 在左边
            var p1 = pView.getPoker(poBox, 0);
            pointBox.x = p1.x - 20 - pointBox.width;
        }
        else {
            var p1 = pView.getPoker(poBox, 0);
            var endX = poBox.width - p1.x; // 因为是居中的
            pointBox.x = endX + 10;
        }
    };
    // callback(PokerComp)
    CP21PokerComponent.prototype._loopPoker = function (callback) {
        var pView = this.m_pController.view;
        var ret = null;
        for (var i = 0; i < 7; ++i) {
            var bPoBox = pView.pokerBankPoBox;
            ret = this._getPokerComp(bPoBox, i, -1, 0);
            callback.call(this, ret);
            for (var pidx = 0; pidx < 3; pidx++) {
                var pPoBox1 = pView.getPokerPlayerPoBox(pidx, 0);
                var pPoBox2 = pView.getPokerPlayerPoBox(pidx, 1);
                ret = this._getPokerComp(pPoBox1, i, pidx, 0);
                callback.call(this, ret);
                ret = this._getPokerComp(pPoBox2, i, pidx, 1);
                callback.call(this, ret);
            }
        }
    };
    CP21PokerComponent.prototype._getPokerComp = function (poBox, pokerIdx, locationIdx, areaIdx) {
        var pView = this.m_pController.view;
        var poker = null;
        var baoAni = null;
        var dark = null;
        var pointBox = null;
        poker = pView.getPoker(poBox, pokerIdx);
        dark = pView.getDark(poBox);
        baoAni = pView.getBaoAnimation(poBox);
        pointBox = pView.getPointBox(poBox);
        var ret = { poker: poker, baoAni: baoAni, dark: dark, pointBox: pointBox, isBank: locationIdx == -1,
            locationIdx: locationIdx, pokerIdx: pokerIdx, areaIdx: areaIdx };
        return ret;
    };
    return CP21PokerComponent;
}(CP21Component_1.default));
exports.default = CP21PokerComponent;
var PokerComp = /** @class */ (function () {
    function PokerComp() {
    }
    return PokerComp;
}());
},{"../../../../../gm/GM":221,"../../../../common/component/COpenSubViewComponent":16,"../../../_commonView/md5/CMD5CheckView":38,"./CP21Component":148,"./CP21LocationComponent":154}],160:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var animation_1 = require("../../../../../hbcore/framework/animation");
var GM_1 = require("../../../../../gm/GM");
var CP21RecoverPokerAnimation_1 = require("../animation/CP21RecoverPokerAnimation");
// 收牌效果
var CP21RecoverPokerComponent = /** @class */ (function (_super) {
    __extends(CP21RecoverPokerComponent, _super);
    function CP21RecoverPokerComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21RecoverPokerComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21RecoverPokerComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21RecoverPokerComponent.prototype.process = function (caller, callback) {
        _super.prototype.process.call(this);
        this.m_pCallback = callback;
        this.m_pCaller = caller;
        this.m_aniGroup = new animation_1.animation.CAnimationGroup();
        var dealPokerData = GM_1.GM.p21Data.operateDealPoker;
        var dealList = dealPokerData.getDealPokerList();
        var ani = new CP21RecoverPokerAnimation_1.CP21RecoverPokerAnimation(this.m_pController, dealList, null, null);
        this.m_aniGroup.add(ani);
        this.m_aniGroup.start(this, this._onFinished);
    };
    CP21RecoverPokerComponent.prototype._onFinished = function () {
        if (this.m_pCallback && this.m_pCaller) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CP21RecoverPokerComponent;
}(CP21Component_1.default));
exports.default = CP21RecoverPokerComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/animation":252,"../animation/CP21RecoverPokerAnimation":138,"./CP21Component":148}],161:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var animation_1 = require("../../../../../hbcore/framework/animation");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CP21ResultLoseAnimation_1 = require("../animation/CP21ResultLoseAnimation");
var CP21ResultResultCountTipAnimation_1 = require("../animation/CP21ResultResultCountTipAnimation");
var CP21ResultWinAnimation_1 = require("../animation/CP21ResultWinAnimation");
var CP21ResultComponent = /** @class */ (function (_super) {
    __extends(CP21ResultComponent, _super);
    function CP21ResultComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21ResultComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        if (this.m_aniFlyCoinGroupMap) {
            for (var key in this.m_aniFlyCoinGroupMap) {
                var aniGroup = this.m_aniFlyCoinGroupMap[key];
                if (aniGroup) {
                    aniGroup.stop();
                }
            }
        }
        this.m_aniFlyCoinGroupMap = null;
        if (this.m_aniResultCountGroupMap) {
            for (var key in this.m_aniResultCountGroupMap) {
                var aniGroup = this.m_aniResultCountGroupMap[key];
                if (aniGroup) {
                    aniGroup.stop();
                }
            }
        }
        this.m_aniResultCountGroupMap = null;
    };
    CP21ResultComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21ResultComponent.prototype.process = function (caller, callback) {
        _super.prototype.process.call(this);
        this.m_pCallback = callback;
        this.m_pCaller = caller;
        this.m_aniFlyCoinGroupMap = new Object();
        this.m_aniResultCountGroupMap = new Object();
        this.m_curProcessUserCount = 0;
        this.m_processUserCount = 0;
        var resultList = GM_1.GM.p21Data.result.resultList;
        for (var i = 0; i < resultList.length; ++i) {
            var result = resultList[i];
            if (!result || result.validBet <= 0) {
                continue;
            }
            this.m_processUserCount++;
            var aniCoinGroup = new animation_1.animation.CAnimationGroup();
            this.m_aniFlyCoinGroupMap[result.userId] = aniCoinGroup;
            var aniResultCountGroup = new animation_1.animation.CAnimationGroup();
            this.m_aniResultCountGroupMap[result.userId] = aniResultCountGroup;
            var money = result.totalWin; // result.startCoin - result.endCoin;
            money = ApiUtil_1.ApiUtil.formatNumber(money);
            var ani = void 0;
            if (money < 0) {
                // 输的，币从注区往庄飞
                ani = new CP21ResultLoseAnimation_1.CP21ResultLoseAnimation(this.m_pController, result, null, null);
                aniCoinGroup.add(ani);
            }
            else {
                // 赢 或 平
                // 赢的, 币从庄飞到注区
                ani = new CP21ResultWinAnimation_1.CP21ResultWinAnimation(this.m_pController, result, null, null);
                aniCoinGroup.add(ani);
            }
            // 头像显示赢了多少
            ani = new CP21ResultResultCountTipAnimation_1.CP21ResultResultCountTipAnimation(this.m_pController, result, null, null);
            aniResultCountGroup.add(ani);
        }
        for (var key in this.m_aniFlyCoinGroupMap) {
            var aniGroup = this.m_aniFlyCoinGroupMap[key];
            aniGroup.start(this, this._onFlyCoinFinish);
        }
    };
    // 飞币结束
    CP21ResultComponent.prototype._onFlyCoinFinish = function () {
        this.m_curProcessUserCount++;
        if (this.m_curProcessUserCount >= this.m_processUserCount) {
            // 显示输赢数值
            this.m_curProcessUserCount = 0;
            for (var key in this.m_aniResultCountGroupMap) {
                var aniGroup = this.m_aniResultCountGroupMap[key];
                aniGroup.start(this, this._onResultCountTipsFinish);
            }
        }
    };
    // 显示输赢数量结束
    CP21ResultComponent.prototype._onResultCountTipsFinish = function () {
        this.m_curProcessUserCount++;
        if (this.m_curProcessUserCount >= this.m_processUserCount) {
            this._onFinish();
        }
    };
    CP21ResultComponent.prototype._onFinish = function () {
        if (this.m_bDestroy) {
            return;
        }
        if (this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CP21ResultComponent;
}(CP21Component_1.default));
exports.default = CP21ResultComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/animation":252,"../../../../../hbcore/util/ApiUtil":266,"../animation/CP21ResultLoseAnimation":139,"../animation/CP21ResultResultCountTipAnimation":140,"../animation/CP21ResultWinAnimation":141,"./CP21Component":148}],162:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CP21Component_1 = require("./CP21Component");
var CP21RoomStateComponent = /** @class */ (function (_super) {
    __extends(CP21RoomStateComponent, _super);
    function CP21RoomStateComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CP21RoomStateComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this._setUnvisible();
    };
    CP21RoomStateComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this._setUnvisible();
        return true;
    };
    CP21RoomStateComponent.prototype.process = function () {
        _super.prototype.process.call(this);
    };
    CP21RoomStateComponent.prototype._setUnvisible = function () {
        var len = this.m_pController.view.roomState.numChildren;
        for (var i = 0; i < len; ++i) {
            var sp = this.m_pController.view.roomState.getChildAt(i);
            if ((sp.name != 'bg')) {
                sp.visible = false;
            }
        }
    };
    CP21RoomStateComponent.prototype.updateCountDown = function () {
        // if (!this.m_countDownStart) {
        //     if (v > 0) {
        //         this.m_countDownStart = true;
        //         this.m_pController.view.roomState_countDown.visible = true;
        //     }
        // }
        // if (!this.m_countDownStart) {
        //     return ;
        // }
        // if (v < 0) { v = 0; }
        // this.m_pController.view.roomState_countDown_lbl.text = v.toFixed(0);
        // // this.m_pController.view.roomState_countDown_circel.rotation+=5;
        // let pos = (24 - (v>>0));
        // if (pos > 24) pos = 24;
        // if (pos < 0) {
        //     pos = 0;
        // }
        // if (v <= 0 ) {
        //     if (this.m_hideCountDownTime == -1) {
        //         this.m_hideCountDownTime = Laya.timer.currTimer+1000;
        //     }
        // }
        // if (this.m_hideCountDownTime != -1 && Laya.timer.currTimer > this.m_hideCountDownTime) { // 这里不能用>= , 
        //     this.setCountDownEndState();
        // }
        // this.m_pController.view.roomState_countDown_circel.gotoAndStop(pos);
        // this.m_pController.view.roomState_countDown.visible = !needHide;
        var v = GM_1.GM.p21Data.countDownData.second;
        if (v < 0) {
            v = 0;
        }
        this.m_pController.view.roomState_countDown_lbl.text = v.toFixed(0);
        var pos = (24 - (v >> 0));
        if (pos > 24)
            pos = 24;
        if (pos < 0) {
            pos = 0;
        }
        this.m_pController.view.roomState_countDown_circel.gotoAndStop(pos);
        this.m_pController.view.roomState_countDown.visible = true;
    };
    CP21RoomStateComponent.prototype.setGamingState = function () {
        console.log('roomstate->gaming');
        this._setUnvisible();
        this.m_pController.view.roomState_gaming.visible = true;
    };
    CP21RoomStateComponent.prototype.setShuffleState = function () {
        console.log('roomstate->shuffle');
        this._setUnvisible();
        this.m_pController.view.roomState_shuffle.visible = true;
    };
    CP21RoomStateComponent.prototype.setResultState = function () {
        console.log('roomstate->result');
        this._setUnvisible();
        this.m_pController.view.roomState_result.visible = true;
    };
    CP21RoomStateComponent.prototype.setCountDownState = function () {
        console.log('roomstate->countdown');
        this._setUnvisible();
        // this.m_hideCountDownTime = -1;
        // this.m_countDownStart = false;
        // this.updateCountDown(time);
        // this.m_pController.view.roomState_countDown.visible = true;
    };
    CP21RoomStateComponent.prototype.setCountDownEndState = function () {
        console.log('roomstate->countdownEnd');
        // this.m_countDownStart = false;        
        GM_1.GM.p21Data.room.countDownTime = -1; // GM.baccData.dealCountDownData.second = -1;
        this.setGamingState();
    };
    return CP21RoomStateComponent;
}(CP21Component_1.default));
exports.default = CP21RoomStateComponent;
},{"../../../../../gm/GM":221,"./CP21Component":148}],163:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CPokerView_1 = require("../../../../common/CPokerView");
var CPokerData_1 = require("../../../_commonModel/CPokerData");
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var EP21Conf_1 = require("../../enum/EP21Conf");
// 洗牌动画
var CP21ShuffleAnimationComponent = /** @class */ (function (_super) {
    __extends(CP21ShuffleAnimationComponent, _super);
    function CP21ShuffleAnimationComponent(pController) {
        var _this = _super.call(this, pController) || this;
        // 牌盒 ：牌的缩放0.45
        // 发出来的牌 : 缩在放0.6
        _this.BLUE_X_DELTA = 10; // (poker.width *0.6 - poker.width*0.45)/2
        _this.PORT_POKER_SCALC = 0.45; // 牌开始缩放
        _this.POKER_SCALC = 0.7; // 当牌的box为1时， 牌的缩放
        _this.DEAL_SCALC = 0.6; // 发出来的牌的缩放
        _this.BLUE_POS_Y = 145; // 蓝牌位置
        _this.POKER_POS_Y = 255; // 发出来的牌的位置
        _this.POKER_COUNT = 20; // 发出来的牌数
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21ShuffleAnimationComponent.prototype.reset = function () {
    };
    CP21ShuffleAnimationComponent.prototype.onDestroy = function () {
        this.m_isDestroy = true;
        _super.prototype.onDestroy.call(this);
        Laya.timer.clearAll(this);
    };
    CP21ShuffleAnimationComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21ShuffleAnimationComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_isDestroy = false;
        this.m_pokerView = new CPokerView_1.default(null);
        this.m_pokerData = new CPokerData_1.CPokerData();
        return true;
    };
    CP21ShuffleAnimationComponent.prototype.process = function (caller, callback) {
        this.m_pokerList = new Array();
        this.m_pCaller = caller;
        this.m_pCallback = callback;
        var seqSystem = GM_1.GM.instance.gameStage.sequentialSystem;
        // 发蓝牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [1]), null); // 开始飞
        this._addDealPokerSeq(seqSystem, 0, true, 0);
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        // 发牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始飞
        for (var i = 0; i < 20; ++i) {
            this._addDealPokerSeq(seqSystem, i, false, 100);
        }
        seqSystem.addSequential(this, ApiUtil_1.ApiUtil.createHandler(this, this._hideEmitterPoker), null); // 隐藏发牌器的牌
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil_1.ApiUtil.createHandler(this, this._isTimeFinish, [200])); // 再等0.2秒
        // 收牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始收      
        seqSystem.addSequential(this, Laya.Handler.create(this, this.__recoverPoker), null); // 收牌
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等收完      
        seqSystem.addSequential(this, Laya.Handler.create(this, this._closePoker), null); // 盖牌      
        // seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil.createHandler(this, this._isTimeFinish, [200])); // 再等0.2秒
        // 飞蓝牌到牌底
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [1]), null); // 开始飞
        seqSystem.addSequential(this, Laya.Handler.create(this, this._flyToPokerBottom), null);
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完
        // 飞牌盒
        seqSystem.addSequential(this, Laya.Handler.create(this, this._startFly, [10]), null); // 开始飞        
        seqSystem.addSequential(this, Laya.Handler.create(this, this._flyToPort), null); // 飞向牌合
        seqSystem.addSequential(this, null, ApiUtil_1.ApiUtil.createHandler(this, this._isFlyFinish)); // 等飞完      
        seqSystem.addSequential(this, ApiUtil_1.ApiUtil.createHandler(this, this._showEmitterPoker), null); // 显示发牌器的牌
        seqSystem.addSequential(this, Laya.Handler.create(this, this._onFinished), null); // finsh                
    };
    // ========================== 飞牌
    CP21ShuffleAnimationComponent.prototype._addDealPokerSeq = function (seqSystem, index, isBlue, waitTime) {
        seqSystem.addSequential(this, Laya.Handler.create(this, this.__dealPoker, [index, isBlue]), null);
        if (waitTime > 0) {
            seqSystem.addSequential(this, Laya.Handler.create(this, this._waitTime), ApiUtil_1.ApiUtil.createHandler(this, this._isTimeFinish, [waitTime])); // 发下一张牌的间隔
        }
    };
    CP21ShuffleAnimationComponent.prototype.__dealPoker = function (index, isBlue) {
        var _this = this;
        if (this.m_isDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var poker = this.__createPoker(index);
        this.m_pokerView.view = poker;
        var fromObj = this.view.desk_emitter_pokerBlue; // 起始点
        var fromPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(fromObj, this.m_pController.view);
        poker.x = fromPos.x;
        poker.y = fromPos.y;
        var toX = 44 + index * 30;
        var toY = this.POKER_POS_Y; // 使用global坐标, scene的坐标
        var fromScale = this.PORT_POKER_SCALC / this.POKER_SCALC;
        poker.scaleX = fromScale;
        poker.scaleY = fromScale;
        if (isBlue) {
            toX = fromPos.x - this.BLUE_X_DELTA;
            toY = this.BLUE_POS_Y;
            this.m_pokerView.updateView(null, false, false, true, false, false, true);
            this.m_blueView = poker;
        }
        else {
            this.m_pokerData = this.__randomPokerData();
            this.m_pokerView.updateView(this.m_pokerData, false, false, true, false, true);
            this.m_pokerList.push(poker);
        }
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
        // box的scale是1， 牌的scalc是0.7
        var toScale = this.DEAL_SCALC / this.POKER_SCALC;
        Laya.Tween.to(poker, { x: toX, y: toY, scaleX: toScale, scaleY: toScale }, 150, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    CP21ShuffleAnimationComponent.prototype.__createPoker = function (index) {
        var poker = Laya.Pool.getItemByClass('PokerSmallViewUI', layaMaxUI_1.ui.common.PokerSmallViewUI);
        this.m_pController.view.addChild(poker);
        return poker;
    };
    CP21ShuffleAnimationComponent.prototype.__randomPokerData = function () {
        this.m_pokerData.id = 0;
        var color = ((Math.random() * 4 + 1) >> 0);
        var point = ((Math.random() * 13 + 1) >> 0);
        var pointStr = point.toString();
        if (pointStr.length == 1) {
            pointStr = '0' + pointStr;
        }
        this.m_pokerData.poker = color.toString() + pointStr;
        return this.m_pokerData;
    };
    // ============================收牌
    CP21ShuffleAnimationComponent.prototype.__recoverPoker = function () {
        var _this = this;
        if (this.m_isDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var times = 0;
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
        Laya.timer.loop(100, this, function () {
            times++;
            if (_this.m_pController && _this.m_pController.soundComponent) {
                _this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
            }
            if (times > 5) {
                Laya.timer.clearAll(_this);
            }
        });
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            var toObj = this.view.desk_emitter_pokerBlue; // 目标点
            var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, this.m_pController.view);
            // let toScale:number = 6/7;
            Laya.Tween.to(poker, { x: toPos.x - this.BLUE_X_DELTA, y: this.POKER_POS_Y }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_flyCount++;
            }));
        }
    };
    // ======================盖牌
    CP21ShuffleAnimationComponent.prototype._closePoker = function () {
        if (this.m_isDestroy) {
            return;
        }
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            this.m_pokerView.view = poker;
            this.m_pokerView.updateView(this.m_pokerData, true, false, false, false, true);
        }
    };
    // 飞到牌底
    CP21ShuffleAnimationComponent.prototype._flyToPokerBottom = function () {
        var _this = this;
        if (this.m_isDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var poker = this.m_blueView;
        var toY = this.POKER_POS_Y;
        // let toScale:number = 4.5/7;
        this.m_pController.soundComponent.playSound(EP21Conf_1.default.SOUND_DEAL_POKER);
        Laya.Tween.to(poker, { y: toY }, 150, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    // 飞向牌盒 
    CP21ShuffleAnimationComponent.prototype._flyToPort = function () {
        var _this = this;
        if (this.m_isDestroy) {
            this.m_flyCount = this.m_targetFlyCount;
            return;
        }
        var toObj = this.view.desk_emitter_pokerBlue; // 目标点
        var toPos = ApiUtil_1.ApiUtil.obj1ToObj2Pos(toObj, this.m_pController.view);
        var toScale = this.PORT_POKER_SCALC / this.POKER_SCALC;
        for (var i = 0; i < 20; ++i) {
            var poker = this.m_pokerList[i];
            if (!poker) {
                continue;
            }
            Laya.Tween.to(poker, { x: toPos.x, y: toPos.y, scaleX: toScale, scaleY: toScale }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                _this.m_flyCount++;
            }));
        }
        Laya.Tween.to(this.m_blueView, { x: toPos.x, y: toPos.y, scaleX: toScale, scaleY: toScale }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
            _this.m_flyCount++;
        }));
    };
    // 飞计数
    CP21ShuffleAnimationComponent.prototype._startFly = function (targetCount) {
        this.m_flyCount = 0;
        this.m_targetFlyCount = targetCount;
    };
    CP21ShuffleAnimationComponent.prototype._isFlyFinish = function () {
        return this.m_flyCount >= this.m_targetFlyCount;
    };
    // 等待时间
    CP21ShuffleAnimationComponent.prototype._waitTime = function () {
        this.m_startTime = Laya.timer.currTimer;
        return true;
    };
    CP21ShuffleAnimationComponent.prototype._isTimeFinish = function (time) {
        return Laya.timer.currTimer - this.m_startTime >= time;
    };
    CP21ShuffleAnimationComponent.prototype._hideEmitterPoker = function () {
        this.m_pController.view.desk_emitter_poker.visible = false;
    };
    CP21ShuffleAnimationComponent.prototype._showEmitterPoker = function () {
        this.m_pController.view.desk_emitter_poker.visible = true;
    };
    // all finish
    CP21ShuffleAnimationComponent.prototype._onFinished = function () {
        if (this.m_isDestroy) {
            return;
        }
        if (this.m_pokerList && this.m_pokerList.length > 0) {
            for (var _i = 0, _a = this.m_pokerList; _i < _a.length; _i++) {
                var poker = _a[_i];
                if (poker) {
                    Laya.Pool.recover('PokerSmallViewUI', poker);
                    poker.removeSelf();
                }
            }
        }
        if (this.m_blueView) {
            Laya.Pool.recover('PokerSmallViewUI', this.m_blueView);
            this.m_blueView.removeSelf();
        }
        if (this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCallback = null;
    };
    return CP21ShuffleAnimationComponent;
}(CP21Component_1.default));
exports.default = CP21ShuffleAnimationComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/util/ApiUtil":266,"../../../../../ui/layaMaxUI":271,"../../../../common/CPokerView":9,"../../../_commonModel/CPokerData":21,"../../enum/EP21Conf":123,"./CP21Component":148}],164:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var CP21ShuffleAnimationComponent_1 = require("./CP21ShuffleAnimationComponent");
// 洗牌
var CP21ShuffleComponent = /** @class */ (function (_super) {
    __extends(CP21ShuffleComponent, _super);
    function CP21ShuffleComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = false;
        return _this;
    }
    CP21ShuffleComponent.prototype.reset = function () {
    };
    CP21ShuffleComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21ShuffleComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new CP21ShuffleAnimationComponent_1.default(this.m_pController));
    };
    CP21ShuffleComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21ShuffleComponent.prototype.process = function (caller, callback) {
        this.m_pCaller = caller;
        this.m_pCallback = callback;
        this.getComponent(CP21ShuffleAnimationComponent_1.default).process(this, this._onFinished);
    };
    CP21ShuffleComponent.prototype._onFinished = function () {
        if (this.m_pCallback) {
            this.m_pCallback.call(this.m_pCaller);
        }
        this.m_pCallback = null;
        this.m_pCaller = null;
    };
    return CP21ShuffleComponent;
}(CP21Component_1.default));
exports.default = CP21ShuffleComponent;
},{"./CP21Component":148,"./CP21ShuffleAnimationComponent":163}],165:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21Component_1 = require("./CP21Component");
var GM_1 = require("../../../../../gm/GM");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var CGlobalConf_1 = require("../../../../const/CGlobalConf");
var CPath_1 = require("../../../../const/CPath");
var log_1 = require("../../../../../hbcore/framework/log");
var EP21Path_1 = require("../../enum/EP21Path");
var CP21SoundComponent = /** @class */ (function (_super) {
    __extends(CP21SoundComponent, _super);
    function CP21SoundComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CP21SoundComponent.prototype.reset = function () {
    };
    CP21SoundComponent.prototype.onDestroy = function () {
        this.m_pSoundSystem.stopAllSound();
        this.m_pSoundSystem = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.m_bgPlayFinishHandler);
        this.m_bgPlayFinishHandler = null;
        _super.prototype.onDestroy.call(this);
    };
    CP21SoundComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CP21SoundComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_pSoundSystem = GM_1.GM.instance.gameStage.soundSystem;
        this.m_bgList = [CGlobalConf_1.default.SOUND_BG1, CGlobalConf_1.default.SOUND_BG2, CGlobalConf_1.default.SOUND_BG3];
        this.m_bgIndex = -1;
        this.m_bgPlayFinishHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onBgPlayFinished);
        return true;
    };
    CP21SoundComponent.prototype.process = function (lastMusicIndex) {
        if (lastMusicIndex === void 0) { lastMusicIndex = 0; }
        // start
        this.m_bgIndex = lastMusicIndex;
        this._playNextBg();
    };
    CP21SoundComponent.prototype._playNextBg = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        if (this.m_bgIndex == -1) {
            this.m_bgIndex = Math.random() * this.m_bgList.length;
            this.m_bgIndex = this.m_bgIndex >> 0;
        }
        else {
            // 随机出不同于上一个index
            var arr = [];
            for (var i = 0; i < this.m_bgList.length; ++i) {
                if (this.m_bgIndex != i) {
                    arr.push(i);
                }
            }
            var ranIdx = Math.random() * arr.length;
            ranIdx = ranIdx >> 0;
            this.m_bgIndex = arr[ranIdx];
        }
        var path = CPath_1.CPath.getSoundPath(this.m_bgList[this.m_bgIndex]);
        var res = Laya.loader.getRes(path);
        if (!res) {
            Laya.loader.load(path, Laya.Handler.create(this, function () {
                if (_this.m_bDestroy) {
                    return;
                }
                log_1.log.log('播放音乐 ');
                _this.soundCannel = _this.m_pSoundSystem.playMusic(path, 1);
                if (_this.soundCannel) {
                    _this.soundCannel.completeHandler = _this.m_bgPlayFinishHandler;
                }
                else {
                    log_1.log.log('音乐 soundcannel null ');
                    _this._onBgPlayFinished();
                }
            }));
        }
        else {
            log_1.log.log('音乐加载, 播放');
            this.soundCannel = this.m_pSoundSystem.playMusic(path, 1);
            if (this.soundCannel) {
                this.soundCannel.completeHandler = this.m_bgPlayFinishHandler;
            }
            else {
                log_1.log.log('音乐 soundcannel null ');
                this._onBgPlayFinished();
            }
        }
    };
    CP21SoundComponent.prototype._onBgPlayFinished = function () {
        var _this = this;
        if (this.m_bDestroy) {
            return;
        }
        Laya.timer.once(3000, this, function () {
            _this._playNextBg();
        });
    };
    CP21SoundComponent.prototype.playSound = function (path, isDontPlayWhenPlaying, isOverrideSame, multPlaySameInterval, finisiHandler) {
        if (isDontPlayWhenPlaying === void 0) { isDontPlayWhenPlaying = false; }
        if (isOverrideSame === void 0) { isOverrideSame = false; }
        if (multPlaySameInterval === void 0) { multPlaySameInterval = 0; }
        if (finisiHandler === void 0) { finisiHandler = null; }
        if (this.m_bDestroy) {
            return;
        }
        path = EP21Path_1.default.getSoundPath(path);
        this.m_pSoundSystem.playSound(path, isDontPlayWhenPlaying, isOverrideSame, multPlaySameInterval, finisiHandler);
    };
    CP21SoundComponent.prototype.openSound = function () {
    };
    CP21SoundComponent.prototype.closeSound = function () {
    };
    return CP21SoundComponent;
}(CP21Component_1.default));
exports.default = CP21SoundComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../../hbcore/util/ApiUtil":266,"../../../../const/CGlobalConf":18,"../../../../const/CPath":19,"../../enum/EP21Path":124,"./CP21Component":148}],166:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GMEvent_1 = require("../../../../../gm/GMEvent");
var CGameTopView_1 = require("../../../../common/CGameTopView");
var GM_1 = require("../../../../../gm/GM");
var CP21Component_1 = require("./CP21Component");
var CP21Net_1 = require("../../net/CP21Net");
var netData_1 = require("../../../_commonModel/netData");
var GameNetResponse_1 = require("../../../../../gm/GameNetResponse");
var SFSClient_1 = require("../../../../../hbcore/net/SFSClient");
var COpenSubViewComponent_1 = require("../../../../common/component/COpenSubViewComponent");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CLookPokersView_1 = require("../../../_commonView/lookPokers/CLookPokersView");
var CBetsHistroyView_1 = require("../../../_commonView/betsHistory/CBetsHistroyView");
var CP21RuleView_1 = require("../rule/CP21RuleView");
var CP21TopComponent = /** @class */ (function (_super) {
    __extends(CP21TopComponent, _super);
    function CP21TopComponent(pController) {
        return _super.call(this, pController) || this;
    }
    CP21TopComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.view.topView.unregister();
        this.view.topView = null;
        this.sfsGame.Emitter.off(this, GameNetResponse_1.GameConf.ExitGame);
        this.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.PokerDetail);
        this.sfsGame.Emitter.off(this, netData_1.common.netData.NetConf.BetHistroy);
        this.sfsGame.Emitter.off(this, SFSClient_1.default.EVENT_SIGNAL);
    };
    CP21TopComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.m_savePageCache = new Object();
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CP21TopComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_exited = false;
        this.sfsGame.Emitter.on(this, GameNetResponse_1.GameConf.ExitGame, this._onExitGameResponse);
        this.sfsGame.Emitter.on(this, CP21Net_1.p21Net.NetConf.PokerDetail, this._onLookPokersResponse);
        this.sfsGame.Emitter.on(this, netData_1.common.netData.NetConf.BetHistroy, this._onHistroyResponse);
        this.sfsGame.Emitter.on(this, SFSClient_1.default.EVENT_SIGNAL, this._onSignalUpdate);
        // 变化部分
        var topBox = this.view.topViewBase;
        this.view.topView = new CGameTopView_1.default(topBox);
        this.view.topView.register(this, this.onReturn_uiHandler, this.onSound_uiHandler, this.onRule_uiHandler, this.onBetsHistroy_uiHandler, this.onLookAll_uiHandler);
        this.view.topView.record_btn.visible = GM_1.GM.p21Data.room.stageId != 0; // 体验房不显示我的下注
        this._updateSound();
        return true;
    };
    CP21TopComponent.prototype._onSignalUpdate = function (signalLevel) {
        if (this.view && this.view.topView) {
            this.view.topView.updateSignal(signalLevel);
        }
    };
    CP21TopComponent.prototype.exitRoom = function () {
        this.onReturn_uiHandler(false);
    };
    CP21TopComponent.prototype.onReturn_uiHandler = function (fromUI) {
        if (fromUI === void 0) { fromUI = true; }
        if (this.m_exited) {
            return;
        }
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.GameConf.ExitGame)) {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get('net_res_busy'));
            return;
        }
        this.m_pController.netState.setNetStateBusy(GameNetResponse_1.GameConf.ExitGame);
        this.sfsGame.send(GameNetResponse_1.GameConf.ExitGame, {}, true);
        fromUI && GM_1.GM.playButtonSound();
    };
    CP21TopComponent.prototype._onExitGameResponse = function (param) {
        this.m_pController.netState.setNetStateIdle(GameNetResponse_1.GameConf.ExitGame);
        var newData = CBaseNet_1.default.Clone(param, GameNetResponse_1.CExitGame);
        if (newData.isError == false) {
            this.m_exited = true;
            GM_1.GM.instance.userInfo.balance = param.balance;
            // 退出成功
            GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_HALL);
        }
        else {
            CMessageBox_1.default.instance.showNetError(newData.errorCode.toString());
        }
    };
    CP21TopComponent.prototype.onSound_uiHandler = function () {
        GM_1.GM.playButtonSound();
        GM_1.GM.instance.gameStage.soundSystem.isMuted = !GM_1.GM.instance.gameStage.soundSystem.isMuted;
        this._updateSound();
        var userSetting = GM_1.GM.instance.userInfo.userSetting;
        userSetting.bSound = !GM_1.GM.instance.gameStage.soundSystem.isMuted;
        GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.UserConfig, { custom: JSON.stringify(userSetting) });
    };
    CP21TopComponent.prototype._updateSound = function () {
        var pView = this.m_pController.view;
        if (!GM_1.GM.instance.gameStage.soundSystem.isMuted) {
            pView.topView.sound_btn.visible = true;
            pView.topView.sound_close_btn.visible = false;
        }
        else {
            pView.topView.sound_btn.visible = false;
            pView.topView.sound_close_btn.visible = true;
        }
    };
    // rule
    CP21TopComponent.prototype.onRule_uiHandler = function () {
        GM_1.GM.playButtonSound();
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = true;
        openComponent.process(CP21RuleView_1.default, CP21RuleView_1.default.SIGN, CP21TopComponent.ViewIndex.Rule);
    };
    // ============================================bets histroy========================================================
    CP21TopComponent.prototype.onBetsHistroy_uiHandler = function () {
        GM_1.GM.playButtonSound();
        if (this.m_pController.netState.isNetStateBusy(netData_1.common.netData.NetConf.BetHistroy)) {
            return;
        }
        this.m_pController.netState.setNetStateBusy(netData_1.common.netData.NetConf.BetHistroy);
        GM_1.GM.instance.network.sfsGame.send(netData_1.common.netData.NetConf.BetHistroy, { gameCode: GM_1.GM.p21Data.room.gameCode }, true);
    };
    CP21TopComponent.prototype._onHistroyResponse = function (data) {
        this.m_pController.netState.setNetStateIdle(netData_1.common.netData.NetConf.BetHistroy);
        if (CBaseNet_1.default.IsError(data)) {
            GM_1.GM.instance.messageBox.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
        GM_1.GM.p21Data.updateBetHistory(data);
        var viewIndex = CP21TopComponent.ViewIndex.Record;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        openComponent.autoAddToParent = false;
        openComponent.process(CBetsHistroyView_1.default, CBetsHistroyView_1.default.SIGN, viewIndex);
        var view = openComponent.getView(viewIndex).view;
        view.model.histroyList = GM_1.GM.p21Data.betHistroy.history;
        openComponent.showView(Laya.stage, viewIndex);
    };
    // ====================================================================================================
    CP21TopComponent.prototype.triggerLookAll = function () {
        this.onLookAll_uiHandler();
    };
    CP21TopComponent.prototype.onLookAll_uiHandler = function () {
        GM_1.GM.playButtonSound();
        for (var key in this.m_savePageCache) {
            delete this.m_savePageCache[key];
        }
        this._queryLookPokers(0, 0);
    };
    CP21TopComponent.prototype._queryLookPokers = function (minPage, maxPage) {
        console.log('query in : minpage ' + minPage + ', maxpage :' + maxPage);
        if (this.m_pController.netState.isNetStateBusy(CP21Net_1.p21Net.NetConf.PokerDetail)) {
            return;
        }
        if (minPage > maxPage) {
            var temp = minPage;
            minPage = maxPage;
            maxPage = temp;
        }
        // 限制请求页数最大值
        var MAX_PAGE = ((EP21Conf_1.default.MAX_POKER_COUNT - 1) / 49 + 1) >> 0;
        var MAX_PAGE_IDX = MAX_PAGE - 1; // index
        if (minPage > MAX_PAGE_IDX) {
            minPage = MAX_PAGE_IDX;
        }
        if (maxPage > MAX_PAGE_IDX) {
            maxPage = MAX_PAGE_IDX;
        }
        // 缓存数据。已请求过的数据不再请求
        var hasMin = this.m_savePageCache.hasOwnProperty(minPage.toString());
        var hasMax = this.m_savePageCache.hasOwnProperty(maxPage.toString());
        if (hasMin && hasMax) {
            return;
        }
        if (hasMin) {
            minPage = maxPage;
        }
        if (hasMax) {
            maxPage = minPage;
        }
        this.m_savePageCache[minPage] = true;
        this.m_savePageCache[maxPage] = true;
        console.log('query page info : minpage ' + minPage + ', maxpage :' + maxPage);
        var begin = 0;
        var end = 0;
        begin = 1 + minPage * 49;
        end = (maxPage + 2) * 49;
        if (begin < 0)
            begin = 0;
        if (end > EP21Conf_1.default.MAX_POKER_COUNT)
            end = EP21Conf_1.default.MAX_POKER_COUNT;
        console.log('query page info : begin ' + begin + ', end :' + end);
        this.m_pController.netState.setNetStateBusy(CP21Net_1.p21Net.NetConf.PokerDetail);
        GM_1.GM.instance.network.sfsGame.send(CP21Net_1.p21Net.NetConf.PokerDetail, { begin: begin, end: end }, true);
    };
    // net response
    CP21TopComponent.prototype._onLookPokersResponse = function (data) {
        var _this = this;
        this.m_pController.netState.setNetStateIdle(CP21Net_1.p21Net.NetConf.PokerDetail);
        if (CBaseNet_1.default.IsError(data)) {
            GM_1.GM.instance.messageBox.showNetError(CBaseNet_1.default.ErrorMessage(data));
            return;
        }
        // GM.baccData.updateLookPokerData(newData);  to fix
        GM_1.GM.p21Data.updatePokerDetail(data);
        var viewIndex = CP21TopComponent.ViewIndex.LookPokers;
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        var viewData = openComponent.getView(viewIndex);
        var view;
        if (viewData) {
            // 界面已打开, 直接更新数据
            view = viewData.view;
            view.model.pokerList = GM_1.GM.p21Data.pokerDetailData.pokers; // GM.baccData.lookPokerData;   
        }
        else {
            // 界面没打开, 先创建 界面
            openComponent.autoAddToParent = false;
            openComponent.process(CLookPokersView_1.default, CLookPokersView_1.default.SIGN, viewIndex);
            view = openComponent.getView(viewIndex).view;
            // 设置界面数据
            view.model.pokerList = GM_1.GM.p21Data.pokerDetailData.pokers; //GM.baccData.lookPokerData;
            // 显示界面
            openComponent.showView(Laya.stage, viewIndex);
            // 列表滚动, 查询数据
            view.queryHandler = new Laya.Handler(this, function (data) {
                // min : minPage, max : maxPage, 当前列表跨越的两个page
                _this._queryLookPokers(data.min, data.max);
            }, null, false);
        }
    };
    CP21TopComponent.ViewIndex = {
        Rule: 0, Record: 1, LookPokers: 2
    };
    return CP21TopComponent;
}(CP21Component_1.default));
exports.default = CP21TopComponent;
},{"../../../../../gm/GM":221,"../../../../../gm/GMEvent":222,"../../../../../gm/GameNetResponse":223,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/net/SFSClient":264,"../../../../common/CGameTopView":5,"../../../../common/CMessageBox":8,"../../../../common/component/COpenSubViewComponent":16,"../../../../net/CBaseNet":216,"../../../_commonModel/netData":23,"../../../_commonView/betsHistory/CBetsHistroyView":26,"../../../_commonView/lookPokers/CLookPokersView":34,"../../enum/EP21Conf":123,"../../net/CP21Net":131,"../rule/CP21RuleView":186,"./CP21Component":148}],167:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var CP21Component_1 = require("../component/CP21Component");
var CP21BgComponent = /** @class */ (function (_super) {
    __extends(CP21BgComponent, _super);
    function CP21BgComponent(pController) {
        var _this = _super.call(this, pController) || this;
        _this.m_bProcessByParent = true;
        return _this;
    }
    CP21BgComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CP21BgComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CP21BgComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var isTest = GM_1.GM.p21Data.room.stageId == 0;
        this.view.bgImg.visible = !isTest;
        this.view.bgTestImg.visible = isTest;
    };
    CP21BgComponent.prototype.reset = function () {
    };
    return CP21BgComponent;
}(CP21Component_1.default));
exports.default = CP21BgComponent;
},{"../../../../../gm/GM":221,"../component/CP21Component":148}],168:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var CP21ProcedureResult_1 = require("./CP21ProcedureResult");
/**
 * ...
 * @author auto
 */
var CP21ProcedureBankOpenPoker = /** @class */ (function (_super) {
    __extends(CP21ProcedureBankOpenPoker, _super);
    function CP21ProcedureBankOpenPoker() {
        return _super.call(this) || this;
    }
    CP21ProcedureBankOpenPoker.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureBankOpenPoker.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 庄开牌');
        this.changeProcedure(fsm, CP21ProcedureResult_1.default);
    };
    CP21ProcedureBankOpenPoker.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CP21ProcedureBankOpenPoker.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureBankOpenPoker.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureBankOpenPoker;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureBankOpenPoker;
},{"../../../../../hbcore/framework/log":256,"./CP21ProcedureBase":169,"./CP21ProcedureResult":181}],169:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var procedure_1 = require("../../../../../hbcore/framework/procedure");
/**
 * ...
 * @author auto
 */
var CP21ProcedureBase = /** @class */ (function (_super) {
    __extends(CP21ProcedureBase, _super);
    function CP21ProcedureBase() {
        return _super.call(this) || this;
    }
    CP21ProcedureBase.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        this.m_fsm = fsm;
        this.controller = fsm.owner;
    };
    return CP21ProcedureBase;
}(procedure_1.procedure.CProcedureBase));
exports.default = CP21ProcedureBase;
},{"../../../../../hbcore/framework/procedure":258}],170:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CP21BottomComponent_1 = require("../component/CP21BottomComponent");
var EP21Conf_1 = require("../../enum/EP21Conf");
var CP21BetsComponent_1 = require("../component/CP21BetsComponent");
var CP21Net_1 = require("../../net/CP21Net");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21Data_1 = require("../../data/CP21Data");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
var CP21DealPortComponent_1 = require("../component/CP21DealPortComponent");
var CP21NetComponent_1 = require("../component/CP21NetComponent");
var CP21RoomStateComponent_1 = require("../component/CP21RoomStateComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureBetPokers = /** @class */ (function (_super) {
    __extends(CP21ProcedureBetPokers, _super);
    function CP21ProcedureBetPokers() {
        return _super.call(this) || this;
    }
    CP21ProcedureBetPokers.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureBetPokers.prototype.onEnter = function (fsm) {
        var _this = this;
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21 : 下注');
        this.m_bFinished = false;
        this.m_bDestroy = false;
        CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('please_bets'), -1, 0, '#00aa00', true, this.controller.view);
        var locationInfo = GM_1.GM.p21Data.getLocationInfo(GM_1.GM.p21Data.myId);
        if (locationInfo) {
            var isCanBet = !(locationInfo.isAllBeted());
            if (isCanBet) {
                var betComponent = this.controller.getComponent(CP21BetsComponent_1.CP21BetsComponent);
                betComponent.openBets();
            }
        }
        // this.m_lastCDTime = 25;
        this.controller.roomStateComponent.setCountDownState();
        this.controller.getComponent(CP21BottomComponent_1.default).process();
        this.controller.soundComponent.playSound(EP21Conf_1.default.SOUND_BET_START_ALERT, false, false, 0, Laya.Handler.create(this, function () {
            if (!_this.m_bDestroy) {
                _this.controller.soundComponent.playSound(EP21Conf_1.default.SOUND_BET_START);
            }
        }));
        this.controller.netComponent.on(CP21NetComponent_1.CP21NetComponent.EVENT_COUNT_DOWN_UPDATE, this, this.updateCountDown);
    };
    CP21ProcedureBetPokers.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        // let dealCountDownData = GM.baccData.dealCountDownData;
        // if (dealCountDownData && dealCountDownData.second >= 0) {
        // 	let coundDownNow:number = GM.baccData.dealCountDownData.second;
        // 	if (coundDownNow < this.m_lastCDTime) {
        // 		this.controller.soundComponent.playSound(EP21Conf.SOUND_COUNT_DOWN);
        // 		this.m_lastCDTime = coundDownNow;
        // 	}
        // 	this.controller.roomStateComponent.updateCountDown(coundDownNow);
        // }
        if (this.controller.netComponent.hasProtocol()) {
            var nextPro = this.controller.netComponent.nextProtocol();
            switch (nextPro.protocol) {
                case CP21Net_1.p21Net.NetConf.BroadcastBet:
                    var betComponent = this.controller.getComponent(CP21BetsComponent_1.CP21BetsComponent);
                    betComponent.addBetsCoinByBroadcast(nextPro.data);
                    break;
                // case BaccNetConf.StartBetCountDown :
                // 	this.m_lastCDTime = 25;
                // 	this.controller.roomStateComponent.setCountDownState(25);
                // 	break;
                case CP21Net_1.p21Net.NetConf.BroadcastDeal: // 首次发牌，和其他状态下的发牌。服务器用的是同一个
                    // 发牌
                    this.controller.getComponent(CP21DealPortComponent_1.default).process();
                    fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, CP21Data_1.p21Data.EGameState.deal);
                    this.changeProcedure(this.m_fsm, CP21ProcedureChangeGStatus_1.default);
                    break;
            }
        }
    };
    CP21ProcedureBetPokers.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        // this.controller.roomStateComponent.setCountDownEndState(); // updateCount里面1秒后才会重置和隐藏倒计时, 有可能已经切换到openPoker状态了, 不会重置
        var betComponent = this.controller.getComponent(CP21BetsComponent_1.CP21BetsComponent);
        betComponent.closeBets();
        this.controller.netComponent.off(CP21NetComponent_1.CP21NetComponent.EVENT_COUNT_DOWN_UPDATE, this, this.updateCountDown);
        var comp = this.controller.getComponent(CP21RoomStateComponent_1.default);
        if (comp) {
            comp.setGamingState();
        }
    };
    CP21ProcedureBetPokers.prototype.updateCountDown = function () {
        var comp = this.controller.getComponent(CP21RoomStateComponent_1.default);
        if (comp) {
            comp.updateCountDown();
        }
    };
    CP21ProcedureBetPokers.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
        this.m_bDestroy = true;
    };
    return CP21ProcedureBetPokers;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureBetPokers;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../data/CP21Data":122,"../../enum/EP21Conf":123,"../../net/CP21Net":131,"../component/CP21BetsComponent":146,"../component/CP21BottomComponent":147,"../component/CP21DealPortComponent":151,"../component/CP21NetComponent":155,"../component/CP21RoomStateComponent":162,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./EP21ProcedureKey":184}],171:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21Data_1 = require("../../data/CP21Data");
var CP21ProcedureBetPokers_1 = require("./CP21ProcedureBetPokers");
var CP21ProcedureDealPokers_1 = require("./CP21ProcedureDealPokers");
var CP21ProcedurePlayerControll_1 = require("./CP21ProcedurePlayerControll");
var CP21ProcedureInsurance_1 = require("./CP21ProcedureInsurance");
var CP21ProcedureShuffle_1 = require("./CP21ProcedureShuffle");
var CP21ProcedureWaitNewRound_1 = require("./CP21ProcedureWaitNewRound");
var CP21ProcedureResult_1 = require("./CP21ProcedureResult");
/**
 * ...
 * @author auto
 */
var CP21ProcedureChangeGStatus = /** @class */ (function (_super) {
    __extends(CP21ProcedureChangeGStatus, _super);
    function CP21ProcedureChangeGStatus() {
        return _super.call(this) || this;
    }
    CP21ProcedureChangeGStatus.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureChangeGStatus.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 切换GameStatus');
    };
    CP21ProcedureChangeGStatus.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        var nextStatus = fsm.getData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS);
        switch (nextStatus) {
            case CP21Data_1.p21Data.EGameState.unready:
                this.changeProcedure(fsm, CP21ProcedureWaitNewRound_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.bet:
                this.changeProcedure(fsm, CP21ProcedureBetPokers_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.deal:
                this.changeProcedure(fsm, CP21ProcedureDealPokers_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.insurance:
                this.changeProcedure(fsm, CP21ProcedureInsurance_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.playerControl:
                this.changeProcedure(fsm, CP21ProcedurePlayerControll_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.result:
                this.changeProcedure(fsm, CP21ProcedureResult_1.default);
                break;
            case CP21Data_1.p21Data.EGameState.shuffle:
                this.changeProcedure(fsm, CP21ProcedureShuffle_1.default);
                break;
            default:
                log_1.log.log('error sever state : ', nextStatus);
                break;
        }
    };
    CP21ProcedureChangeGStatus.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureChangeGStatus.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureChangeGStatus;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureChangeGStatus;
},{"../../../../../hbcore/framework/log":256,"../../data/CP21Data":122,"./CP21ProcedureBase":169,"./CP21ProcedureBetPokers":170,"./CP21ProcedureDealPokers":173,"./CP21ProcedureInsurance":175,"./CP21ProcedurePlayerControll":177,"./CP21ProcedureResult":181,"./CP21ProcedureShuffle":182,"./CP21ProcedureWaitNewRound":183,"./EP21ProcedureKey":184}],172:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../../gm/GM");
var Fsm_1 = require("../../../../../hbcore/framework/Fsm");
var CFsmSystem = Fsm_1.fsm.CFsmSystem;
var CComponent_1 = require("../../../../common/component/CComponent");
var CP21ProcedureEntry_1 = require("./CP21ProcedureEntry");
var CP21ProcedureWaitNewRound_1 = require("./CP21ProcedureWaitNewRound");
var CP21ProcedureNewRound_1 = require("./CP21ProcedureNewRound");
var CP21ProcedureBetPokers_1 = require("./CP21ProcedureBetPokers");
var CP21ProcedureDealPokers_1 = require("./CP21ProcedureDealPokers");
var CP21ProcedurePlayerControll_1 = require("./CP21ProcedurePlayerControll");
var CP21ProcedureInsurance_1 = require("./CP21ProcedureInsurance");
var CP21ProcedureBankOpenPoker_1 = require("./CP21ProcedureBankOpenPoker");
var CP21ProcedureResult_1 = require("./CP21ProcedureResult");
var CP21ProcedureRecoverPoker_1 = require("./CP21ProcedureRecoverPoker");
var CP21ProcedureReset_1 = require("./CP21ProcedureReset");
var CP21ProcedureShuffle_1 = require("./CP21ProcedureShuffle");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
var CP21ProcedureResetByEnd_1 = require("./CP21ProcedureResetByEnd");
var CP21ProcedureComponent = /** @class */ (function (_super) {
    __extends(CP21ProcedureComponent, _super);
    function CP21ProcedureComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_bProcessByParent = false;
        _this.m_pController = pController;
        return _this;
    }
    CP21ProcedureComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        this.stopProcedure();
        this.m_pController = null;
        this.m_fsmSystem = null;
    };
    CP21ProcedureComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_fsmSystem = GM_1.GM.instance.gameStage.getSystem(CFsmSystem);
        this.m_procedureList = [
            new CP21ProcedureEntry_1.default(),
            new CP21ProcedureChangeGStatus_1.default(),
            new CP21ProcedureWaitNewRound_1.default(),
            new CP21ProcedureNewRound_1.default(),
            new CP21ProcedureBetPokers_1.default(),
            new CP21ProcedureDealPokers_1.default(),
            new CP21ProcedureInsurance_1.default(),
            new CP21ProcedurePlayerControll_1.default(),
            new CP21ProcedureBankOpenPoker_1.default(),
            new CP21ProcedureResult_1.default(),
            new CP21ProcedureRecoverPoker_1.default(),
            new CP21ProcedureReset_1.default(),
            new CP21ProcedureResetByEnd_1.default(),
            new CP21ProcedureShuffle_1.default() // 洗牌
        ];
        return true;
    };
    CP21ProcedureComponent.prototype.process = function () {
        this.startProcedure(CP21ProcedureEntry_1.default);
    };
    CP21ProcedureComponent.prototype.startProcedure = function (cls) {
        this.m_procedureManager = this.m_fsmSystem.createFsm('P21Procedure', this.m_pController, this.m_procedureList);
        this.m_procedureManager.start(cls);
    };
    CP21ProcedureComponent.prototype.stopProcedure = function () {
        if (this.m_procedureManager) {
            this.m_fsmSystem.destroyFsm(this.m_procedureManager.Name);
            this.m_procedureManager = null;
        }
    };
    return CP21ProcedureComponent;
}(CComponent_1.CComponent));
exports.default = CP21ProcedureComponent;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Fsm":249,"../../../../common/component/CComponent":15,"./CP21ProcedureBankOpenPoker":168,"./CP21ProcedureBetPokers":170,"./CP21ProcedureChangeGStatus":171,"./CP21ProcedureDealPokers":173,"./CP21ProcedureEntry":174,"./CP21ProcedureInsurance":175,"./CP21ProcedureNewRound":176,"./CP21ProcedurePlayerControll":177,"./CP21ProcedureRecoverPoker":178,"./CP21ProcedureReset":179,"./CP21ProcedureResetByEnd":180,"./CP21ProcedureResult":181,"./CP21ProcedureShuffle":182,"./CP21ProcedureWaitNewRound":183}],173:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CP21DealPortComponent_1 = require("../component/CP21DealPortComponent");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CP21DealComponent_1 = require("../component/CP21DealComponent");
var CP21Net_1 = require("../../net/CP21Net");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21Data_1 = require("../../data/CP21Data");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
/**
 * ...
 * @author auto
 */
var CP21ProcedureDealPokers = /** @class */ (function (_super) {
    __extends(CP21ProcedureDealPokers, _super);
    function CP21ProcedureDealPokers() {
        return _super.call(this) || this;
    }
    CP21ProcedureDealPokers.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureDealPokers.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21 : 首次发牌');
        this.m_bFinished = false;
        this.m_bDestroy = false;
        this.m_isDealFinish = false;
        if (GM_1.GM.gameData.isCurRound) {
            this.controller.getComponent(CP21DealComponent_1.default).process(Laya.Handler.create(this, this._onDealFinish));
            this.controller.getComponent(CP21DealPortComponent_1.default).process();
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('please_bets'), -1, 0, '#00aa00', true, this.controller.view);
        }
        else {
            // 
            this._onDealFinish();
        }
    };
    CP21ProcedureDealPokers.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (!this.m_isDealFinish) {
            return;
        }
        if (this.controller.netComponent.hasProtocol()) {
            var nextPro = this.controller.netComponent.nextProtocol();
            switch (nextPro.protocol) {
                case CP21Net_1.p21Net.NetConf.BroadcastGState:
                    var gStatus = nextPro.data;
                    // 正常情况下, 这里应该是EGameState.insurance, 或 EGameState.playerControl
                    // Insurance : 
                    // PlayerControll :
                    if (gStatus == CP21Data_1.p21Data.EGameState.insurance || gStatus == CP21Data_1.p21Data.EGameState.playerControl) {
                        this.m_fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, gStatus);
                        this.changeProcedure(fsm, CP21ProcedureChangeGStatus_1.default);
                    }
                    break;
            }
        }
    };
    CP21ProcedureDealPokers.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureDealPokers.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
        this.m_bDestroy = true;
    };
    CP21ProcedureDealPokers.prototype._onDealFinish = function () {
        this.m_isDealFinish = true;
    };
    return CP21ProcedureDealPokers;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureDealPokers;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../data/CP21Data":122,"../../net/CP21Net":131,"../component/CP21DealComponent":150,"../component/CP21DealPortComponent":151,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./EP21ProcedureKey":184}],174:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var CP21ProcedureReset_1 = require("./CP21ProcedureReset");
var CP21BottomComponent_1 = require("../component/CP21BottomComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21ProcedureWaitNewRound_1 = require("./CP21ProcedureWaitNewRound");
var CP21Data_1 = require("../../data/CP21Data");
var CP21BankerHistroyComponent_1 = require("../component/CP21BankerHistroyComponent");
var CP21ProcedureBetPokers_1 = require("./CP21ProcedureBetPokers");
var CP21ProcedurePlayerControll_1 = require("./CP21ProcedurePlayerControll");
var CP21ProcedureShuffle_1 = require("./CP21ProcedureShuffle");
var CP21ProcedureInsurance_1 = require("./CP21ProcedureInsurance");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var CPokerView_1 = require("../../../../common/CPokerView");
var CP21PokerComponent_1 = require("../component/CP21PokerComponent");
var CP21ProcedureResetByEnd_1 = require("./CP21ProcedureResetByEnd");
var CP21BetsComponent_1 = require("../component/CP21BetsComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureEntry = /** @class */ (function (_super) {
    __extends(CP21ProcedureEntry, _super);
    function CP21ProcedureEntry() {
        return _super.call(this) || this;
    }
    CP21ProcedureEntry.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureEntry.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 开始游戏');
        // state router
        CP21ProcedureReset_1.default.Reset(this.controller);
        this.controller.getComponent(CP21BottomComponent_1.default).process();
        this.controller.getComponent(CP21BankerHistroyComponent_1.default).process();
        var serverState = GM_1.GM.p21Data.room.state;
        switch (serverState) {
            case CP21Data_1.p21Data.EGameState.unready:
                this._routerUnready(fsm);
                break;
            case CP21Data_1.p21Data.EGameState.bet:
                this._routerBet(fsm);
                break;
            case CP21Data_1.p21Data.EGameState.insurance:
                this._routerInsurance(fsm);
                break;
            case CP21Data_1.p21Data.EGameState.playerControl:
                this._routerPlayerControl(fsm);
                break;
            case CP21Data_1.p21Data.EGameState.result:
                this._routerResult(fsm);
                break;
            case CP21Data_1.p21Data.EGameState.shuffle:
                this._routerShuffle(fsm);
                break;
        }
        // if (serverState != p21Data.EGameState.unready) {
        // 	// 非unready状态, 不走newRound, 需要自增curRound
        // 	GM.gameData.addCurRound();
        // }
        // this.m_fsm.setData(EP21ProcedureKey.NEXT_GAME_STATUS, serverState);
        // this.changeProcedure(fsm, CP21ProcedureChangeGStatus);
    };
    // ======================================router===============================================
    CP21ProcedureEntry.prototype._routerUnready = function (fsm) {
        this.changeProcedure(fsm, CP21ProcedureWaitNewRound_1.default);
    };
    CP21ProcedureEntry.prototype._routerBet = function (fsm) {
        // 同步其他人下注
        this._updatePlayerBetCoin();
        this.changeProcedure(fsm, CP21ProcedureBetPokers_1.default);
    };
    CP21ProcedureEntry.prototype._routerInsurance = function (fsm) {
        // 同步其他人下注
        this._updatePlayerBetCoin();
        // 显示已发的牌
        this._updatePlayerPoker();
        // 同步参保状态
        this._updatePlayerInsurance();
        this.changeProcedure(fsm, CP21ProcedureInsurance_1.default);
    };
    CP21ProcedureEntry.prototype._routerPlayerControl = function (fsm) {
        // 同步其他人下注
        this._updatePlayerBetCoin();
        // 同步参保状态
        this._updatePlayerInsurance();
        // 显示已发的牌
        this._updatePlayerPoker();
        this.changeProcedure(fsm, CP21ProcedurePlayerControll_1.default);
    };
    CP21ProcedureEntry.prototype._routerResult = function (fsm) {
        // // 同步其他人下注
        // this._updatePlayerBetCoin();
        // // 同步参保状态
        // this._updatePlayerInsurance();
        // // 显示已发的牌
        // this._updatePlayerPoker();
        // this.changeProcedure(fsm, CP21ProcedureResult); 
        // 结算不显示牌了，。动画也不播
        this.changeProcedure(fsm, CP21ProcedureResetByEnd_1.default);
    };
    CP21ProcedureEntry.prototype._routerShuffle = function (fsm) {
        this.changeProcedure(fsm, CP21ProcedureShuffle_1.default);
    };
    // ======================================action===============================================
    CP21ProcedureEntry.prototype._updatePlayerBetCoin = function () {
        var betComponent = this.controller.getComponent(CP21BetsComponent_1.CP21BetsComponent);
        if (!betComponent) {
            return;
        }
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        if (!locationComponent) {
            return;
        }
        var pLocationList = GM_1.GM.p21Data.locationList;
        for (var _i = 0, pLocationList_1 = pLocationList; _i < pLocationList_1.length; _i++) {
            var pLocation = pLocationList_1[_i];
            if (pLocation && pLocation.totalBet > 0.00000001) {
                betComponent.betCoinByValue(pLocation.playerId, pLocation.totalBet);
            }
        }
    };
    CP21ProcedureEntry.prototype._updatePlayerInsurance = function () {
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        if (!locationComponent) {
            return;
        }
        locationComponent.updateInsurance();
    };
    CP21ProcedureEntry.prototype._updatePlayerPoker = function () {
        ////////////////////////////////////////////////////////////////
        var pokerComponent = this.controller.getComponent(CP21PokerComponent_1.default);
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        var operateDealPoker = GM_1.GM.p21Data.operateDealPoker;
        var dealPokerList = operateDealPoker.getDealPokerList();
        var pView = this.controller.view;
        var pokerWidth = 0;
        if (!this.m_pokerView) {
            this.m_pokerView = new CPokerView_1.default(null);
        }
        // 显示牌 
        for (var i = 0; i < dealPokerList.length; ++i) {
            var dealData = dealPokerList[i];
            if (!dealData) {
                continue;
            }
            var poBox = null;
            if (dealData.pid == 0) {
                poBox = this.controller.view.pokerBankPoBox;
            }
            else {
                var locationIdx = locationComponent.getLocationIndexByUser(dealData.pid);
                poBox = pView.getPokerPlayerPoBox(locationIdx, dealData.pokerData.areaIndex);
            }
            // 显示牌
            var poker = pView.getPoker(poBox, dealData.subIndex); // 当前发的牌
            poker.visible = true;
            this.m_pokerView.view = poker;
            this.m_pokerView.updateView(dealData.pokerData, false, false, true, false, true, false, true);
            if (pokerWidth == 0) {
                pokerWidth = poker.displayWidth;
            }
            // 牌box坐标
            var NOT_SPLIT_Y = this.controller.view.PO_BOX_SPLIT_Y; // 不分牌时, box的y
            if (dealData.pokerData.isSplit) {
                poBox.y = dealData.pokerData.areaIndex == 0 ? this.controller.view.PO_BOX_UNSPLIT_Y : 0;
            }
            else {
                poBox.y = NOT_SPLIT_Y;
            }
        }
        // 点数, 爆牌, 状态
        var pokerListMap = operateDealPoker.pokerListMap;
        for (var pid in pokerListMap) {
            var pokerInfoList = pokerListMap[pid];
            if (!pokerInfoList) {
                continue;
            }
            var userid = parseFloat(pid);
            var locationIdx = locationComponent.getLocationIndexByUser(userid);
            for (var i = 0; i < pokerInfoList.length; ++i) {
                var pokerInfo = pokerInfoList[i];
                if (!pokerInfo) {
                    continue;
                }
                var SPACE = pokerInfo.userId == 0 ? 40 : 30; // 牌间距
                // 点数
                var poBox = null;
                if (pid == '0') {
                    poBox = this.controller.view.pokerBankPoBox;
                }
                else {
                    var locationIdx_1 = locationComponent.getLocationIndexByUser(userid);
                    poBox = pView.getPokerPlayerPoBox(locationIdx_1, pokerInfo.areaIndex);
                }
                // 设置牌状态 (表现状态, 已发，已开)
                for (var _i = 0, _a = pokerInfo.pokers; _i < _a.length; _i++) {
                    var pokerData = _a[_i];
                    if (pokerData) {
                        if (pokerData.seed && pokerData.seed.length > 0) {
                            operateDealPoker.setState(pokerData.id, operateDealPoker.PokerState.OPENED);
                        }
                        else {
                            operateDealPoker.setState(pokerData.id, operateDealPoker.PokerState.DEALED);
                        }
                    }
                }
                // 爆牌
                if (pokerInfo.isBound()) {
                    // 爆牌
                    var ani = pView.getBaoAnimation(poBox);
                    ani.visible = true;
                    ani.play(0, false);
                }
                // 牌坐标
                var pokerCount = pokerInfo.getPokerCount();
                var allPokerWidth = pokerWidth + (pokerCount - 1) * SPACE;
                var startX = (poBox.width - allPokerWidth) * 0.5;
                for (var i_1 = 0; i_1 < pokerInfo.pokers.length; ++i_1) {
                    var pokerData = pokerInfo.pokers[i_1];
                    if (!pokerData) {
                        continue;
                    }
                    var poker = pView.getPoker(poBox, i_1); // 当前发的牌
                    var toX = startX + i_1 * SPACE;
                    poker.x = toX;
                }
                // 牌点数
                var point = pokerInfo.getPointByCount(pokerInfo.getPokerCount());
                pokerComponent.updatePoint(poBox, point, locationIdx);
            }
        }
    };
    CP21ProcedureEntry.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CP21ProcedureEntry.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureEntry.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureEntry;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureEntry;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../common/CPokerView":9,"../../data/CP21Data":122,"../component/CP21BankerHistroyComponent":144,"../component/CP21BetsComponent":146,"../component/CP21BottomComponent":147,"../component/CP21LocationComponent":154,"../component/CP21PokerComponent":159,"./CP21ProcedureBase":169,"./CP21ProcedureBetPokers":170,"./CP21ProcedureInsurance":175,"./CP21ProcedurePlayerControll":177,"./CP21ProcedureReset":179,"./CP21ProcedureResetByEnd":180,"./CP21ProcedureShuffle":182,"./CP21ProcedureWaitNewRound":183}],175:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var CP21Net_1 = require("../../net/CP21Net");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var GM_1 = require("../../../../../gm/GM");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CWarnView_1 = require("../../../../common/CWarnView");
var CBaseNet_1 = require("../../../../net/CBaseNet");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureInsurance = /** @class */ (function (_super) {
    __extends(CP21ProcedureInsurance, _super);
    function CP21ProcedureInsurance() {
        return _super.call(this) || this;
    }
    CP21ProcedureInsurance.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureInsurance.prototype.onEnter = function (fsm) {
        var _this = this;
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 保险');
        // CMessageBox.instance.showMsg(Lang.Get('insurance'), -1, 0, '#00aa00', true, this.controller.view);
        this.m_hasBuyInsurance = false;
        var valid = false;
        var pLocationInfo = GM_1.GM.p21Data.getLocationInfo(GM_1.GM.p21Data.myId);
        if (pLocationInfo) {
            var hasBuySurance = false;
            var insuranceBuyCount = pLocationInfo.betInstance;
            if (insuranceBuyCount > 0) {
                // 已买保险
                hasBuySurance = true;
            }
            valid = pLocationInfo.hasBet && !hasBuySurance;
        }
        if (valid) {
            // 有下注才会弹买保险
            var msgView = CWarnView_1.default.instance().showMsg(Lang_1.default.Get('ask_buy_insurance'), true);
            msgView.closeHandler = Laya.Handler.create(this, function (isOk) {
                GM_1.GM.instance.network.sfsGame.Emitter.on(_this, CP21Net_1.p21Net.NetConf.Insurance, _this._onInsuranceResponse);
                if (isOk) {
                    _this.m_hasBuyInsurance = true;
                    CP21Net_1.p21Net.sendInsurance(0);
                }
                else {
                    CP21Net_1.p21Net.sendInsurance(1);
                }
            });
        }
        else {
            // 不能买 保险的，提示买保险阶段
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('insurance'), -1, 0, '#00aa00', true, this.controller.view);
        }
    };
    CP21ProcedureInsurance.prototype._onInsuranceResponse = function (data) {
        if (CBaseNet_1.default.IsError(data)) {
            CMessageBox_1.default.instance.showNetError(CBaseNet_1.default.ErrorCode(data));
            return;
        }
        if (this.m_hasBuyInsurance) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('buy_insurance_sucess'), -1, 0, '#00aa00', true, this.controller.view);
        }
    };
    CP21ProcedureInsurance.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.controller.netComponent.hasProtocol()) {
            var nextPro = this.controller.netComponent.nextProtocol();
            switch (nextPro.protocol) {
                case CP21Net_1.p21Net.NetConf.BroadcastInsurance:
                    // 买保险广播
                    var userId = nextPro.data;
                    var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
                    if (locationComponent) {
                        var locationIndex = locationComponent.getLocationIndexByUser(userId);
                        if (locationIndex >= 0) {
                            this.controller.view.get_userList_bao(locationIndex).visible = true;
                        }
                    }
                    break;
                case CP21Net_1.p21Net.NetConf.BroadcastGState:
                    // 如果在这之前一直没点是否购买, 需要关闭界面
                    CWarnView_1.default.instance().closeHandler = null;
                    CWarnView_1.default.instance().close();
                    var gStatus = nextPro.data;
                    this.m_fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, gStatus);
                    this.changeProcedure(fsm, CP21ProcedureChangeGStatus_1.default);
                    break;
            }
        }
    };
    CP21ProcedureInsurance.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.network.sfsGame.Emitter.off(this, CP21Net_1.p21Net.NetConf.Insurance);
    };
    CP21ProcedureInsurance.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureInsurance;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureInsurance;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../../../common/CWarnView":12,"../../../../net/CBaseNet":216,"../../net/CP21Net":131,"../component/CP21LocationComponent":154,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./EP21ProcedureKey":184}],176:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var p21Module_1 = require("../../p21Module");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
var CP21Data_1 = require("../../data/CP21Data");
var CWarnView_1 = require("../../../../common/CWarnView");
var CP21TopComponent_1 = require("../component/CP21TopComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureNewRound = /** @class */ (function (_super) {
    __extends(CP21ProcedureNewRound, _super);
    function CP21ProcedureNewRound() {
        return _super.call(this) || this;
    }
    CP21ProcedureNewRound.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureNewRound.prototype.onEnter = function (fsm) {
        var _this = this;
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 新局开始');
        GM_1.GM.gameData.addCurRound();
        var stageInfo = GM_1.GM.gameData.getStageInfoByID(GM_1.GM.p21Data.room.stageId);
        if (stageInfo) {
            var hasEnoughMoney = GM_1.GM.p21Data.hasEnoughMoney(-stageInfo.minJoinCoin);
            if (!hasEnoughMoney) {
                CWarnView_1.default.instance().showNotEnoughMoney(this, function () {
                    GM_1.GM.gameData.setRedirect(1);
                    _this.controller.getComponent(CP21TopComponent_1.default).exitRoom();
                }, function () {
                    _this.controller.getComponent(CP21TopComponent_1.default).exitRoom();
                });
            }
        }
    };
    CP21ProcedureNewRound.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.controller.netComponent.hasProtocol()) {
            var protocolData = this.controller.netComponent.nextProtocol();
            var nextProtocol = protocolData.protocol;
            if (nextProtocol == p21Module_1.p21.net.NetConf.BroadcastGState) {
                this.m_bFinished = true;
            }
        }
        if (this.m_bFinished) {
            this.m_fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, CP21Data_1.p21Data.EGameState.bet);
            this.changeProcedure(this.m_fsm, CP21ProcedureChangeGStatus_1.default);
        }
    };
    CP21ProcedureNewRound.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureNewRound.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureNewRound;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureNewRound;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../../../../common/CWarnView":12,"../../data/CP21Data":122,"../../p21Module":132,"../component/CP21TopComponent":166,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./EP21ProcedureKey":184}],177:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var CP21Net_1 = require("../../net/CP21Net");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21Data_1 = require("../../data/CP21Data");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
var CP21DealComponent_1 = require("../component/CP21DealComponent");
var CP21ControlBtnComponent_1 = require("../component/CP21ControlBtnComponent");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var GM_1 = require("../../../../../gm/GM");
var CP21PokerComponent_1 = require("../component/CP21PokerComponent");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var CP21DealPortComponent_1 = require("../component/CP21DealPortComponent");
var CP21NetComponent_1 = require("../component/CP21NetComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedurePlayerControll = /** @class */ (function (_super) {
    __extends(CP21ProcedurePlayerControll, _super);
    function CP21ProcedurePlayerControll() {
        return _super.call(this) || this;
    }
    CP21ProcedurePlayerControll.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedurePlayerControll.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 玩家控制');
        CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('player_controll'), -1, 0, '#00aa00', true, this.controller.view);
        this.m_operatorDoing = false;
        this.m_controlBtnComponent = this.controller.getComponent(CP21ControlBtnComponent_1.default);
        this.m_controlBtnComponent.showByPlayerController();
        this.m_controlBtnComponent.playerControlListenEvent();
        this.m_controlBtnComponent.updatePlayerControl();
        this.m_pokerComponent = this.controller.getComponent(CP21PokerComponent_1.default);
        this.controller.netComponent.on(CP21NetComponent_1.CP21NetComponent.EVENT_COUNT_DOWN_UPDATE, this, this.updateCountDown);
    };
    CP21ProcedurePlayerControll.prototype.onUpdate = function (fsm, deltaTime) {
        var _this = this;
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (!this.m_operatorDoing) {
            if (this.controller.netComponent.hasProtocol()) {
                var nextPro = this.controller.netComponent.nextProtocol();
                switch (nextPro.protocol) {
                    case CP21Net_1.p21Net.NetConf.Result:
                        // Result :
                        // 需要在所有牌都发完开完，才能处理
                        fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, CP21Data_1.p21Data.EGameState.result);
                        this.changeProcedure(fsm, CP21ProcedureChangeGStatus_1.default);
                        return;
                    case CP21Net_1.p21Net.NetConf.BroadcastDouble:
                        this.m_controlBtnComponent.updatePlayerControl();
                        break;
                    case CP21Net_1.p21Net.NetConf.BroadcastGetPoker:
                        this.m_controlBtnComponent.updatePlayerControl();
                        break;
                    case CP21Net_1.p21Net.NetConf.BroadcastStop:
                        this.m_controlBtnComponent.updatePlayerControl();
                        this.m_pokerComponent.updateSplitPokerDark();
                        break;
                    case CP21Net_1.p21Net.NetConf.BroadcastSplit:
                        this.m_controlBtnComponent.updatePlayerControl();
                        break;
                    case CP21Net_1.p21Net.NetConf.BroadcastDeal:
                        // 广播发牌
                        // 最后庄开牌也是在这处理. 
                        this.controller.getComponent(CP21DealPortComponent_1.default).process();
                        this.m_operatorDoing = true;
                        this.controller.getComponent(CP21DealComponent_1.default).process(Laya.Handler.create(this, function () {
                            _this.m_operatorDoing = false;
                            // 判断是否第一组牌是否完成
                            GM_1.GM.p21Data.operateDealPoker.processOperaterFinish(GM_1.GM.p21Data.myId);
                            _this.m_controlBtnComponent.updatePlayerControl();
                            _this.m_pokerComponent.updateSplitPokerDark();
                        }));
                        this.m_controlBtnComponent.updatePlayerControl();
                        break;
                }
            }
        }
        this.m_controlBtnComponent.updatePlayerControl();
    };
    CP21ProcedurePlayerControll.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        this.controller.netComponent.off(CP21NetComponent_1.CP21NetComponent.EVENT_COUNT_DOWN_UPDATE, this, this.updateCountDown);
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        if (locationComponent) {
            locationComponent.resetCountDown();
        }
        this.m_controlBtnComponent.hideByPlayerController();
        this.m_controlBtnComponent.playerControlUnlistenEvent();
        this.m_controlBtnComponent = null;
        this.m_pokerComponent = null;
    };
    CP21ProcedurePlayerControll.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CP21ProcedurePlayerControll.prototype.updateCountDown = function () {
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        if (locationComponent) {
            locationComponent.updateCountDown();
        }
    };
    return CP21ProcedurePlayerControll;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedurePlayerControll;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../../data/CP21Data":122,"../../net/CP21Net":131,"../component/CP21ControlBtnComponent":149,"../component/CP21DealComponent":150,"../component/CP21DealPortComponent":151,"../component/CP21LocationComponent":154,"../component/CP21NetComponent":155,"../component/CP21PokerComponent":159,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./EP21ProcedureKey":184}],178:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CP21RecoverPokerComponent_1 = require("../component/CP21RecoverPokerComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21ProcedureResetByEnd_1 = require("./CP21ProcedureResetByEnd");
/**
 * ...
 * @author auto
 * 收牌
 */
var CP21ProcedureRecoverPoker = /** @class */ (function (_super) {
    __extends(CP21ProcedureRecoverPoker, _super);
    function CP21ProcedureRecoverPoker() {
        return _super.call(this) || this;
    }
    CP21ProcedureRecoverPoker.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureRecoverPoker.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21 : 收牌');
        this.m_bFinished = false;
        var isCurRound = GM_1.GM.gameData.isCurRound;
        var pRecoverComponent = this.controller.getComponent(CP21RecoverPokerComponent_1.default);
        if (isCurRound && pRecoverComponent) {
            pRecoverComponent.process(this, this._onFinished);
        }
        else {
            this.m_bFinished = true;
        }
    };
    CP21ProcedureRecoverPoker.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            this.changeProcedure(this.m_fsm, CP21ProcedureResetByEnd_1.default);
        }
    };
    CP21ProcedureRecoverPoker.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureRecoverPoker.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CP21ProcedureRecoverPoker.prototype._onFinished = function () {
        this.m_bFinished = true;
    };
    return CP21ProcedureRecoverPoker;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureRecoverPoker;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CP21RecoverPokerComponent":160,"./CP21ProcedureBase":169,"./CP21ProcedureResetByEnd":180}],179:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureWaitNewRound_1 = require("./CP21ProcedureWaitNewRound");
var GM_1 = require("../../../../../gm/GM");
var CP21ControlBtnComponent_1 = require("../component/CP21ControlBtnComponent");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var CP21PokerComponent_1 = require("../component/CP21PokerComponent");
var CP21BetsComponent_1 = require("../component/CP21BetsComponent");
var CP21DealPortComponent_1 = require("../component/CP21DealPortComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureReset = /** @class */ (function (_super) {
    __extends(CP21ProcedureReset, _super);
    function CP21ProcedureReset() {
        return _super.call(this) || this;
    }
    CP21ProcedureReset.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureReset.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 重置');
        CP21ProcedureReset.Reset(this.controller);
    };
    CP21ProcedureReset.Reset = function (pController) {
        pController.getComponent(CP21PokerComponent_1.default).reset();
        pController.getComponent(CP21LocationComponent_1.default).reset();
        pController.getComponent(CP21ControlBtnComponent_1.default).reset();
        pController.getComponent(CP21BetsComponent_1.CP21BetsComponent).reset();
        pController.getComponent(CP21DealPortComponent_1.default).reset();
        GM_1.GM.p21Data.reset();
    };
    CP21ProcedureReset.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        this.changeProcedure(fsm, CP21ProcedureWaitNewRound_1.default);
    };
    CP21ProcedureReset.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureReset.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureReset;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureReset;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CP21BetsComponent":146,"../component/CP21ControlBtnComponent":149,"../component/CP21DealPortComponent":151,"../component/CP21LocationComponent":154,"../component/CP21PokerComponent":159,"./CP21ProcedureBase":169,"./CP21ProcedureWaitNewRound":183}],180:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var CP21LocationComponent_1 = require("../component/CP21LocationComponent");
var CP21ProcedureReset_1 = require("./CP21ProcedureReset");
/**
 * ...
 * @author auto
 */
var CP21ProcedureResetByEnd = /** @class */ (function (_super) {
    __extends(CP21ProcedureResetByEnd, _super);
    function CP21ProcedureResetByEnd() {
        return _super.call(this) || this;
    }
    CP21ProcedureResetByEnd.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureResetByEnd.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 结束重置');
        GM_1.GM.p21Data.resetByEnd();
        var locationComponent = this.controller.getComponent(CP21LocationComponent_1.default);
        if (locationComponent) {
            locationComponent.process();
        }
    };
    CP21ProcedureResetByEnd.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        this.changeProcedure(fsm, CP21ProcedureReset_1.default);
    };
    CP21ProcedureResetByEnd.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureResetByEnd.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureResetByEnd;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureResetByEnd;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CP21LocationComponent":154,"./CP21ProcedureBase":169,"./CP21ProcedureReset":179}],181:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ResultComponent_1 = require("../component/CP21ResultComponent");
var GM_1 = require("../../../../../gm/GM");
var CP21ProcedureRecoverPoker_1 = require("./CP21ProcedureRecoverPoker");
var CP21NetComponent_1 = require("../component/CP21NetComponent");
var CP21PaicaiComponent_1 = require("../component/CP21PaicaiComponent");
var CP21BankerHistroyComponent_1 = require("../component/CP21BankerHistroyComponent");
/**
 * ...
 * @author auto
 */
var CP21ProcedureResult = /** @class */ (function (_super) {
    __extends(CP21ProcedureResult, _super);
    function CP21ProcedureResult() {
        return _super.call(this) || this;
    }
    CP21ProcedureResult.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureResult.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21 : 结算');
        this.m_bFinished = false;
        this.m_bDestroy = false;
        this.controller.roomStateComponent.setResultState();
        this.controller.getComponent(CP21BankerHistroyComponent_1.default).process();
        if (GM_1.GM.gameData.isCurRound) {
            this.controller.getComponent(CP21ResultComponent_1.default).process(this, this._onFinish);
        }
        else {
            this._onFinish();
        }
    };
    CP21ProcedureResult.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            // 更新人物数据
            this.changeProcedure(this.m_fsm, CP21ProcedureRecoverPoker_1.default);
        }
    };
    CP21ProcedureResult.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureResult.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
        this.m_bDestroy = true;
    };
    CP21ProcedureResult.prototype._onFinish = function () {
        if (this.m_bDestroy) {
            return;
        }
        if (!this.controller) {
            return;
        }
        // 派彩
        var resultInfo = GM_1.GM.p21Data.result.getByPID(GM_1.GM.p21Data.myId);
        if (resultInfo) {
            if (resultInfo.totalWin > 0) {
                var paicai = resultInfo.totalWin + resultInfo.validBet;
                this.controller.getComponent(CP21PaicaiComponent_1.default).process(paicai);
                this.controller.netComponent.event(CP21NetComponent_1.CP21NetComponent.EVENT_USER_UPDATE);
            }
        }
        this.m_bFinished = true;
    };
    return CP21ProcedureResult;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureResult;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/log":256,"../component/CP21BankerHistroyComponent":144,"../component/CP21NetComponent":155,"../component/CP21PaicaiComponent":158,"../component/CP21ResultComponent":161,"./CP21ProcedureBase":169,"./CP21ProcedureRecoverPoker":178}],182:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var CP21ShuffleComponent_1 = require("../component/CP21ShuffleComponent");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var CP21ProcedureWaitNewRound_1 = require("./CP21ProcedureWaitNewRound");
/**
 * ...
 * @author auto
 */
var CP21ProcedureShuffle = /** @class */ (function (_super) {
    __extends(CP21ProcedureShuffle, _super);
    function CP21ProcedureShuffle() {
        return _super.call(this) || this;
    }
    CP21ProcedureShuffle.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureShuffle.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21 : 洗牌');
        this.m_bFinished = false;
        this.controller.roomStateComponent.setShuffleState();
        GM_1.GM.p21Data.clearPokerDetail();
        if (GM_1.GM.gameData.isCurRound) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('shuffling'), -1, 0, '#00aa00', true, this.controller.view);
            this.controller.getComponent(CP21ShuffleComponent_1.default).process(this, this._onFinish);
        }
        else {
            this._onFinish();
        }
    };
    CP21ProcedureShuffle.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            this.changeProcedure(fsm, CP21ProcedureWaitNewRound_1.default);
        }
    };
    CP21ProcedureShuffle.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureShuffle.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CP21ProcedureShuffle.prototype._onFinish = function () {
        this.m_bFinished = true;
    };
    return CP21ProcedureShuffle;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureShuffle;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/framework/log":256,"../../../../common/CMessageBox":8,"../component/CP21ShuffleComponent":164,"./CP21ProcedureBase":169,"./CP21ProcedureWaitNewRound":183}],183:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21ProcedureBase_1 = require("./CP21ProcedureBase");
var log_1 = require("../../../../../hbcore/framework/log");
var CP21ProcedureNewRound_1 = require("./CP21ProcedureNewRound");
var netData_1 = require("../../../_commonModel/netData");
var p21Module_1 = require("../../p21Module");
var EP21ProcedureKey_1 = require("./EP21ProcedureKey");
var CP21Data_1 = require("../../data/CP21Data");
var CP21ProcedureChangeGStatus_1 = require("./CP21ProcedureChangeGStatus");
/**
 * ...
 * @author auto
 */
var CP21ProcedureWaitNewRound = /** @class */ (function (_super) {
    __extends(CP21ProcedureWaitNewRound, _super);
    function CP21ProcedureWaitNewRound() {
        return _super.call(this) || this;
    }
    CP21ProcedureWaitNewRound.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CP21ProcedureWaitNewRound.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log('21点 : 等待新局');
    };
    CP21ProcedureWaitNewRound.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        // 重置之后, 进入等待新局, 如果中间收到洗牌的协议。就切到洗牌流程，洗完牌，再切回等待
        if (this.controller.netComponent.hasProtocol()) {
            var nextProtocol = this.controller.netComponent.nextProtocol().protocol;
            if (nextProtocol == p21Module_1.p21.net.NetConf.NewRound) {
                this.changeProcedure(this.m_fsm, CP21ProcedureNewRound_1.default);
            }
            else if (nextProtocol == netData_1.common.netData.NetConf.Shuffle) {
                fsm.setData(EP21ProcedureKey_1.EP21ProcedureKey.NEXT_GAME_STATUS, CP21Data_1.p21Data.EGameState.shuffle);
                this.changeProcedure(this.m_fsm, CP21ProcedureChangeGStatus_1.default);
            }
        }
    };
    CP21ProcedureWaitNewRound.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CP21ProcedureWaitNewRound.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CP21ProcedureWaitNewRound;
}(CP21ProcedureBase_1.default));
exports.default = CP21ProcedureWaitNewRound;
},{"../../../../../hbcore/framework/log":256,"../../../_commonModel/netData":23,"../../data/CP21Data":122,"../../p21Module":132,"./CP21ProcedureBase":169,"./CP21ProcedureChangeGStatus":171,"./CP21ProcedureNewRound":176,"./EP21ProcedureKey":184}],184:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EP21ProcedureKey = {
    NEXT_GAME_STATUS: 'nextGameStatus'
};
},{}],185:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CP21RuleController = /** @class */ (function (_super) {
    __extends(CP21RuleController, _super);
    function CP21RuleController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CP21RuleController.prototype.onEnable = function () {
        this.m_view = this.owner;
        // StopAllMouseEvent.register(this.m_view);
        this.m_view.closeBtn.on(Laya.Event.MOUSE_DOWN, this, this._onClose);
        this.m_view.panel.vScrollBar.skin = "";
        this.m_view.panel.vScrollBar.hide = true;
        this.m_view.panel.scrollTo(0, 0);
        this.updateView();
    };
    CP21RuleController.prototype.onDisable = function () {
        // StopAllMouseEvent.unregister(this.m_view);
        this.m_view.closeBtn.off(Laya.Event.MOUSE_DOWN, this, this._onClose);
    };
    CP21RuleController.prototype.updateView = function () {
        this._updateView();
    };
    CP21RuleController.prototype._updateView = function () {
    };
    CP21RuleController.prototype._onClose = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    return CP21RuleController;
}(Laya.Script));
exports.default = CP21RuleController;
},{}],186:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../../ui/layaMaxUI");
var CP21RuleView = /** @class */ (function (_super) {
    __extends(CP21RuleView, _super);
    function CP21RuleView() {
        return _super.call(this) || this;
    }
    CP21RuleView.prototype.onDestroy = function () {
    };
    CP21RuleView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CP21RuleView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CP21RuleView.prototype._updateView = function () {
    };
    CP21RuleView.prototype._onEvent = function () {
    };
    CP21RuleView.prototype._offEvent = function () {
    };
    Object.defineProperty(CP21RuleView.prototype, "panel", {
        get: function () {
            return this.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CP21RuleView.prototype, "closeBtn", {
        get: function () {
            return this.getChildByName('close_btn');
        },
        enumerable: true,
        configurable: true
    });
    CP21RuleView.SIGN = 'CP21RuleView';
    return CP21RuleView;
}(layaMaxUI_1.ui.gamelist.p21.subView.P21RuleViewUI));
exports.default = CP21RuleView;
},{"../../../../../ui/layaMaxUI":271}],187:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StopAllMouseEvent_1 = require("../common/StopAllMouseEvent");
var CHallGameListComponent_1 = require("./component/CHallGameListComponent");
var CHallTopViewComponent_1 = require("./component/CHallTopViewComponent");
var CComponent_1 = require("../common/component/CComponent");
var CHallGameBanner_1 = require("./component/CHallGameBanner");
var NetState_1 = require("../../hbcore/net/NetState");
var CHallReconnectComponent_1 = require("./component/CHallReconnectComponent");
var CHallDailyBetWinComponent_1 = require("./component/CHallDailyBetWinComponent");
var CHallController = /** @class */ (function (_super) {
    __extends(CHallController, _super);
    function CHallController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CHallController.prototype.onEnable = function () {
        this.netState = new NetState_1.default();
        this.m_view = this.owner;
        this.view.mouseEnabled = true;
        StopAllMouseEvent_1.default.register(this.m_view);
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(new CHallGameListComponent_1.default(this));
        this.m_compManager.addComponent(new CHallTopViewComponent_1.default(this));
        this.m_compManager.addComponent(new CHallGameBanner_1.default(this));
        this.m_compManager.addComponent(new CHallReconnectComponent_1.default(this));
        this.m_compManager.addComponent(new CHallDailyBetWinComponent_1.default(this));
        this.m_compManager.start();
        this.view.version.text = '0.3.4';
        this.updateView();
    };
    CHallController.prototype.onDisable = function () {
        StopAllMouseEvent_1.default.unregister(this.m_view);
        this.m_compManager.destroy();
        this.netState = null;
    };
    CHallController.prototype.updateView = function () {
        this.m_compManager.process();
    };
    Object.defineProperty(CHallController.prototype, "view", {
        get: function () { return this.m_view; },
        enumerable: true,
        configurable: true
    });
    return CHallController;
}(Laya.Script));
exports.default = CHallController;
},{"../../hbcore/net/NetState":263,"../common/StopAllMouseEvent":13,"../common/component/CComponent":15,"./component/CHallDailyBetWinComponent":190,"./component/CHallGameBanner":191,"./component/CHallGameListComponent":192,"./component/CHallReconnectComponent":193,"./component/CHallTopViewComponent":194}],188:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaseNet_1 = require("../net/CBaseNet");
var GM_1 = require("../../gm/GM");
var GameNetResponse_1 = require("../../gm/GameNetResponse");
var CHallModel = /** @class */ (function () {
    function CHallModel() {
    }
    CHallModel.BannerImgs = ["hall/img_banner1.png", "hall/img_banner2.png", "hall/img_banner3.png"];
    return CHallModel;
}());
exports.CHallModel = CHallModel;
var CStageInfosData = /** @class */ (function () {
    function CStageInfosData() {
    }
    return CStageInfosData;
}());
exports.CStageInfosData = CStageInfosData;
var CStageInfos = /** @class */ (function (_super) {
    __extends(CStageInfos, _super);
    function CStageInfos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CStageInfos;
}(CBaseNet_1.default));
exports.CStageInfos = CStageInfos;
var CChooseCoinRes = /** @class */ (function (_super) {
    __extends(CChooseCoinRes, _super);
    function CChooseCoinRes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CChooseCoinRes;
}(CBaseNet_1.default));
exports.CChooseCoinRes = CChooseCoinRes;
// type:number; // 转账类型（0：充值  1：提现）"
function sendTransferAccount(type, money) {
    GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.TransferAccounts, { money: money, type: type });
}
exports.sendTransferAccount = sendTransferAccount;
// 充值转帐
var CTransferAccount = /** @class */ (function () {
    function CTransferAccount() {
    }
    CTransferAccount.prototype.updateByData = function (data) {
        this.url = data['url'];
    };
    return CTransferAccount;
}());
exports.CTransferAccount = CTransferAccount;
},{"../../gm/GM":221,"../../gm/GameNetResponse":223,"../net/CBaseNet":216}],189:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var Lang_1 = require("../../hbcore/framework/Lang");
var CHallView = /** @class */ (function (_super) {
    __extends(CHallView, _super);
    function CHallView() {
        return _super.call(this) || this;
    }
    CHallView.prototype.onDestroy = function () {
    };
    CHallView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this.todayBetsTitle.text = Lang_1.default.Get('today_bets_title');
        this.todayReturnAwardTitle.text = Lang_1.default.Get('today_award_title');
        this._updateView();
        this._onEvent();
    };
    CHallView.prototype.onDisable = function () {
        this._offEvent();
    };
    CHallView.prototype._updateView = function () {
    };
    CHallView.prototype._onEvent = function () {
    };
    CHallView.prototype._offEvent = function () {
    };
    Object.defineProperty(CHallView.prototype, "topView", {
        get: function () {
            return this.m_topView;
        },
        set: function (v) {
            this.m_topView = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "version", {
        get: function () {
            return this.getChildByName('version');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "topBox", {
        // top
        get: function () {
            return this.getChildByName('top_view');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "BannerBox", {
        get: function () {
            return this.getChildByName('baner_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "todayBox", {
        // todayBox
        get: function () {
            return this.getChildByName('today_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "todayBetsTitle", {
        get: function () {
            return this.todayBox.getChildByName('title_today_tz_lbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "todayBets", {
        get: function () {
            return this.todayBox.getChildByName('today_tz_lbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "todayReturnAwardTitle", {
        get: function () {
            return this.todayBox.getChildByName('title_today_fj_lbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "todayReturnAward", {
        get: function () {
            return this.todayBox.getChildByName('today_fj_lbl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CHallView.prototype, "gameList", {
        // game list
        get: function () {
            return this.getChildByName('game_list');
        },
        enumerable: true,
        configurable: true
    });
    CHallView.prototype.getGameListIcon = function (item) {
        return item.getChildByName('img');
    };
    CHallView.prototype.getGameListIconCommingSoon = function (item) {
        return item.getChildByName('img_comingsoon');
    };
    return CHallView;
}(layaMaxUI_1.ui.hall.HallSceneUI));
exports.default = CHallView;
},{"../../hbcore/framework/Lang":250,"../../ui/layaMaxUI":271}],190:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../common/component/CComponent");
var GM_1 = require("../../../gm/GM");
var GameNetResponse_1 = require("../../../gm/GameNetResponse");
var CBaseNet_1 = require("../../net/CBaseNet");
var CHallDailyBetWinComponent = /** @class */ (function (_super) {
    __extends(CHallDailyBetWinComponent, _super);
    function CHallDailyBetWinComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CHallDailyBetWinComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        GM_1.GM.instance.network.sfsHall.Emitter.off(this, GameNetResponse_1.HallConf.DailyBetWin);
        Laya.timer.clearAll(this);
    };
    CHallDailyBetWinComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CHallDailyBetWinComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_lastQueryTime = 0;
        GM_1.GM.instance.network.sfsHall.Emitter.on(this, GameNetResponse_1.HallConf.DailyBetWin, this._onDailyBetWinResponse);
        this._onSendGetBetWin();
        Laya.timer.loop(2000, this, this._onSendGetBetWin);
        return true;
    };
    CHallDailyBetWinComponent.prototype._onDailyBetWinResponse = function (data) {
        if (!CBaseNet_1.default.IsError(data)) {
            var loginData = GM_1.GM.instance.userInfo.hallData.loginData; // .todayWin;
            var todayBet = data['todayBet'];
            var todayWin = data['todayWin'];
            loginData.todayBet = todayBet;
            loginData.todayWin = todayWin;
            this.view.todayBets.text = todayBet.toString();
            this.view.todayReturnAward.text = todayWin.toString();
        }
    };
    CHallDailyBetWinComponent.prototype._onSendGetBetWin = function () {
        if (Laya.timer.currTimer - this.m_lastQueryTime >= 2000) {
            this.m_lastQueryTime = Laya.timer.currTimer;
            GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.DailyBetWin, {}, false);
        }
    };
    Object.defineProperty(CHallDailyBetWinComponent.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CHallDailyBetWinComponent;
}(CComponent_1.CComponent));
exports.default = CHallDailyBetWinComponent;
},{"../../../gm/GM":221,"../../../gm/GameNetResponse":223,"../../common/component/CComponent":15,"../../net/CBaseNet":216}],191:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../common/component/CComponent");
var CHallModel_1 = require("../CHallModel");
var CHallGameBanner = /** @class */ (function (_super) {
    __extends(CHallGameBanner, _super);
    function CHallGameBanner(pController) {
        var _this = _super.call(this) || this;
        _this.m_currentNum = 0;
        _this.CHANGE_TIM = 3000;
        _this.m_pController = pController;
        return _this;
    }
    CHallGameBanner.prototype.onDestroy = function () {
        Laya.timer.clearAll(this);
        Laya.Tween.clearTween(this.m_scrollImg);
        this.m_scrollImg.parent && this.m_scrollImg.removeSelf();
        Laya.Pool.recover("Laya.Image", this.m_scrollImg);
        this.m_scrollImg = null;
        this.m_bannerBox = null;
        _super.prototype.onDestroy.call(this);
    };
    CHallGameBanner.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.m_bannerBox = this.view.BannerBox;
        this.m_scrollImg = new Laya.Image();
    };
    CHallGameBanner.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        Laya.timer.loop(this.CHANGE_TIM, this, this._onChangeBanner);
        return true;
    };
    CHallGameBanner.prototype._onChangeBanner = function () {
        this.m_currentNum++;
        if (this.m_currentNum > 2) {
            this.m_currentNum = 0;
        }
        this.m_scrollImg.skin = CHallModel_1.CHallModel.BannerImgs[this.m_currentNum];
        this.m_bannerBox.addChild(this.m_scrollImg);
        this.m_scrollImg.x = 720;
        Laya.Tween.to(this.m_scrollImg, { x: 0 }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, this._onScrollComplete));
    };
    CHallGameBanner.prototype._onScrollComplete = function () {
        var img = this.m_bannerBox.getChildByName("baner_img");
        img.skin = this.m_scrollImg.skin;
        this.m_scrollImg.removeSelf();
    };
    Object.defineProperty(CHallGameBanner.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CHallGameBanner;
}(CComponent_1.CComponent));
exports.default = CHallGameBanner;
},{"../../common/component/CComponent":15,"../CHallModel":188}],192:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../common/component/CComponent");
var GM_1 = require("../../../gm/GM");
var CGlobalConf_1 = require("../../const/CGlobalConf");
var GMEvent_1 = require("../../../gm/GMEvent");
var CMessageBox_1 = require("../../common/CMessageBox");
var Lang_1 = require("../../../hbcore/framework/Lang");
var SFSClient_1 = require("../../../hbcore/net/SFSClient");
var CHallGameListComponent = /** @class */ (function (_super) {
    __extends(CHallGameListComponent, _super);
    function CHallGameListComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CHallGameListComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_view.gameList.renderHandler = Laya.Handler.create(this, this._onItemRender, null, false);
        this.m_view.gameList.mouseHandler = Laya.Handler.create(this, this._onDeskSelectHandler, null, false);
        this.m_bEntered = false;
        return true;
    };
    CHallGameListComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        if (this.m_view.gameList.renderHandler) {
            this.m_view.gameList.renderHandler.recover();
            this.m_view.gameList.renderHandler = null;
        }
        if (this.m_view.gameList.mouseHandler) {
            this.m_view.gameList.mouseHandler.recover();
            this.m_view.gameList.mouseHandler = null;
        }
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
    };
    CHallGameListComponent.prototype.process = function () {
        _super.prototype.process.call(this);
        var gameListData = GM_1.GM.instance.userInfo.hallData.games;
        this.m_view.gameList.array = gameListData;
    };
    CHallGameListComponent.prototype._onItemRender = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var gameData = item.dataSource;
        var skin = CGlobalConf_1.default.getImageIconByGameCode(gameData.gameCode);
        this.m_view.getGameListIcon(item).skin = skin;
        this.m_view.getGameListIconCommingSoon(item).visible = !CGlobalConf_1.default.getGameOpenStatus(gameData.gameCode);
    };
    CHallGameListComponent.prototype._onDeskSelectHandler = function (e, idx) {
        if (this.m_bEntered) {
            return;
        }
        if (e.type == Laya.Event.MOUSE_DOWN) {
            if (this.m_pController.netState.isNetStateBusy(SFSClient_1.NetEvent.CONNECTION)) {
                return;
            }
            var cell = this.m_view.gameList.getCell(idx);
            if (cell && cell.dataSource) {
                GM_1.GM.playButtonSound();
                var gameData = cell.dataSource;
                if (CGlobalConf_1.default.getGameOpenStatus(gameData.gameCode)) {
                    GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS, this._onLoginSuccess);
                    GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR, this._onLoginError);
                    this.m_pController.netState.setNetStateBusy(SFSClient_1.NetEvent.CONNECTION);
                    GM_1.GM.instance.network.gameConnect(gameData.gameCode);
                }
                else {
                    CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('game_commingsoon'));
                }
            }
        }
    };
    CHallGameListComponent.prototype._onLoginSuccess = function () {
        this.m_bEntered = true;
        if (this.m_pController.netState) { // 流程没问题, 但是这个在登陆成功->进入大厅->断线->登陆成功->再进入大厅后->有时会是空, 估计是laya切场景有问题, 后面看下切场景对象是否清空之类的问题
            this.m_pController.netState.setNetStateIdle(SFSClient_1.NetEvent.CONNECTION);
        }
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_HALL);
    };
    CHallGameListComponent.prototype._onLoginError = function () {
        if (this.m_pController.netState) {
            this.m_pController.netState.setNetStateIdle(SFSClient_1.NetEvent.CONNECTION);
        }
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
    };
    Object.defineProperty(CHallGameListComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CHallGameListComponent;
}(CComponent_1.CComponent));
exports.default = CHallGameListComponent;
},{"../../../gm/GM":221,"../../../gm/GMEvent":222,"../../../hbcore/framework/Lang":250,"../../../hbcore/net/SFSClient":264,"../../common/CMessageBox":8,"../../common/component/CComponent":15,"../../const/CGlobalConf":18}],193:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../common/component/CComponent");
var GM_1 = require("../../../gm/GM");
var CMessageBox_1 = require("../../common/CMessageBox");
var GMEvent_1 = require("../../../gm/GMEvent");
var Lang_1 = require("../../../hbcore/framework/Lang");
var log_1 = require("../../../hbcore/framework/log");
var CHallReconnectComponent = /** @class */ (function (_super) {
    __extends(CHallReconnectComponent, _super);
    function CHallReconnectComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CHallReconnectComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
    };
    CHallReconnectComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CHallReconnectComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        return true;
    };
    CHallReconnectComponent.prototype.process = function () {
        var loginDate = GM_1.GM.instance.userInfo.hallData.loginData;
        if (loginDate.hasInGame > 0) {
            loginDate.hasInGame = 0;
            // 需要重连
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('reconnecting'));
            log_1.log.log('开始重连');
            // 登陆游戏服
            this.m_pController.view.mouseEnabled = false;
            GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS, this._onLoginSuccess);
            GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR, this._onLoginError);
            GM_1.GM.instance.network.gameConnect(loginDate.gameCode);
        }
    };
    CHallReconnectComponent.prototype._onLoginSuccess = function () {
        log_1.log.log('重连成功');
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_GAME_HALL);
    };
    CHallReconnectComponent.prototype._onLoginError = function () {
        log_1.log.log('重连失败');
        this.m_pController.view.mouseEnabled = true;
        CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('reconnect_fail'));
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_GAME_LOGIN_ERROR);
    };
    return CHallReconnectComponent;
}(CComponent_1.CComponent));
exports.default = CHallReconnectComponent;
},{"../../../gm/GM":221,"../../../gm/GMEvent":222,"../../../hbcore/framework/Lang":250,"../../../hbcore/framework/log":256,"../../common/CMessageBox":8,"../../common/component/CComponent":15}],194:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../common/component/CComponent");
var GMEvent_1 = require("../../../gm/GMEvent");
var CTopView_1 = require("../../common/CTopView");
var GM_1 = require("../../../gm/GM");
var CUserView_1 = require("../user/CUserView");
var COpenSubViewComponent_1 = require("../../common/component/COpenSubViewComponent");
var CRuleView_1 = require("../rule/CRuleView");
var CHallTopViewComponent = /** @class */ (function (_super) {
    __extends(CHallTopViewComponent, _super);
    function CHallTopViewComponent(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CHallTopViewComponent.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_BALANCE_UPDATE);
        this.m_view.topView.unregister();
        this.m_view.topView = null;
    };
    CHallTopViewComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addComponent(new COpenSubViewComponent_1.default());
    };
    CHallTopViewComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        // 变化部分
        var topBox = this.m_view.topBox;
        var infoBoxVisible = false;
        this.m_view.topView = new CTopView_1.CTopView(topBox);
        this.m_view.topView.infoBox.visible = infoBoxVisible;
        this.m_view.topView.register(this, this.onReturn_uiHandler, this.onUser_uiHandler, this.onRule_uiHandler, this.onAddMoney_uiHandle);
        this._updateView();
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_BALANCE_UPDATE, this._onBalanceUpdate);
        return true;
    };
    CHallTopViewComponent.prototype._updateView = function () {
        var money = GM_1.GM.instance.userInfo.balance;
        var nickName = GM_1.GM.instance.userInfo.nickName;
        var topDisplayData = new CTopView_1.CTopViewDisplayData(money, nickName);
        this.m_view.topView.updateView(topDisplayData, GM_1.GM.coinMap.getCoinType(), true);
    };
    CHallTopViewComponent.prototype._onBalanceUpdate = function () {
        this._updateView();
    };
    // return 
    CHallTopViewComponent.prototype.onReturn_uiHandler = function () {
        GM_1.GM.playButtonSound();
        var returnEvent = GMEvent_1.default.EVENT_TO_LOGIN;
        GM_1.GM.instance.eventDispater.event(returnEvent);
    };
    // user
    CHallTopViewComponent.prototype.onUser_uiHandler = function () {
        GM_1.GM.playButtonSound();
        this.getComponent(COpenSubViewComponent_1.default).process(CUserView_1.default, CUserView_1.default.SIGN, CHallTopViewComponent.ViewIndex.User);
    };
    // rule
    CHallTopViewComponent.prototype.onRule_uiHandler = function () {
        GM_1.GM.playButtonSound();
        this.getComponent(COpenSubViewComponent_1.default).process(CRuleView_1.default, CRuleView_1.default.SIGN, CHallTopViewComponent.ViewIndex.Rule);
    };
    // addMoney
    CHallTopViewComponent.prototype.onAddMoney_uiHandle = function () {
        var _this = this;
        GM_1.GM.playButtonSound();
        var openComponent = this.getComponent(COpenSubViewComponent_1.default);
        var viewOpenFunction = function () {
            var view = openComponent.getView(CHallTopViewComponent.ViewIndex.User).view;
            view.off('onOpened', this, viewOpenFunction);
            view.redirectToPay();
        };
        openComponent.process(CUserView_1.default, CUserView_1.default.SIGN, CHallTopViewComponent.ViewIndex.User, null, false, Laya.Handler.create(this, function () {
            var view = openComponent.getView(CHallTopViewComponent.ViewIndex.User).view;
            if (!view.opened) {
                view.on('onOpened', _this, viewOpenFunction);
            }
            else {
                view.redirectToPay();
            }
        }));
    };
    Object.defineProperty(CHallTopViewComponent.prototype, "m_view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    CHallTopViewComponent.ViewIndex = {
        User: 0, Rule: 1
    };
    return CHallTopViewComponent;
}(CComponent_1.CComponent));
exports.default = CHallTopViewComponent;
},{"../../../gm/GM":221,"../../../gm/GMEvent":222,"../../common/CTopView":11,"../../common/component/CComponent":15,"../../common/component/COpenSubViewComponent":16,"../rule/CRuleView":196,"../user/CUserView":199}],195:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRuleController = /** @class */ (function (_super) {
    __extends(CRuleController, _super);
    function CRuleController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_view = null;
        return _this;
    }
    CRuleController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_view.guidPanel.scrollTo(0, 0);
        this.m_view.return_btn.on(Laya.Event.MOUSE_DOWN, this, this._onReturn_uiHandler);
        this.updateView();
    };
    CRuleController.prototype.onDisable = function () {
        this.m_view.return_btn.off(Laya.Event.MOUSE_DOWN, this, this._onReturn_uiHandler);
    };
    CRuleController.prototype.updateView = function () {
        this._updateView();
    };
    CRuleController.prototype._updateView = function () {
    };
    CRuleController.prototype._onReturn_uiHandler = function () {
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    return CRuleController;
}(Laya.Script));
exports.default = CRuleController;
},{}],196:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../ui/layaMaxUI");
var CRuleView = /** @class */ (function (_super) {
    __extends(CRuleView, _super);
    function CRuleView() {
        return _super.call(this) || this;
    }
    CRuleView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CRuleView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CRuleView.prototype._updateView = function () {
        this.guidPanel.hScrollBar && (this.guidPanel.hScrollBar.visible = false);
        this.guidPanel.vScrollBar && (this.guidPanel.vScrollBar.visible = false);
    };
    CRuleView.prototype._onEvent = function () {
    };
    CRuleView.prototype._offEvent = function () {
    };
    Object.defineProperty(CRuleView.prototype, "guidPanel", {
        get: function () {
            return this.getChildByName('guidPanel');
        },
        enumerable: true,
        configurable: true
    });
    CRuleView.SIGN = 'CRuleView';
    return CRuleView;
}(layaMaxUI_1.ui.hall.subView.RuleViewUI));
exports.default = CRuleView;
},{"../../../ui/layaMaxUI":271}],197:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../gm/GM");
var GMEvent_1 = require("../../../gm/GMEvent");
var CComponent_1 = require("../../common/component/CComponent");
var CUserSelectedHeadComp_1 = require("./component/CUserSelectedHeadComp");
var CUserModel_1 = require("./CUserModel");
var Lang_1 = require("../../../hbcore/framework/Lang");
var GameNetResponse_1 = require("../../../gm/GameNetResponse");
var AccRecoredView_1 = require("./accrecord/AccRecoredView");
var Event = Laya.Event;
var CMessageBox_1 = require("../../common/CMessageBox");
var CTransferComponet_1 = require("./transfer/CTransferComponet");
var CBaseNet_1 = require("../../net/CBaseNet");
var ApiUtil_1 = require("../../../hbcore/util/ApiUtil");
var CUserController = /** @class */ (function (_super) {
    __extends(CUserController, _super);
    function CUserController() {
        var _this = _super.call(this) || this;
        _this.m_view = null;
        _this.m_sfsHall = null;
        return _this;
    }
    CUserController.prototype.onEnable = function () {
        this.m_sfsHall = GM_1.GM.instance.network.sfsHall;
        this.m_view = this.owner;
        //view
        var v = this.m_view;
        v.return_btn.on(Event.MOUSE_DOWN, this, this._onReturn_uiHandler);
        v.img_head.on(Event.CLICK, this, this._onSelectHeadImg);
        v.btn_editNam.on(Event.CLICK, this, this._onClickEditNam);
        v.btn_recourd.on(Event.CLICK, this, this._onClickRecored);
        v.lb_nam.on(Event.BLUR, this, this._onEditPlayerNam);
        v.btn_Recharge.on(Event.CLICK, this, this._onClickTransfer, [1]); //充值
        v.btn_Withdraw.on(Event.CLICK, this, this._onClickTransfer, [2]); //提现
        //component
        this.m_compManager = new CComponent_1.CComponent();
        this.m_compManager.addComponent(new CUserSelectedHeadComp_1.default(this));
        this.m_compManager.start();
        this.m_transfer = new CTransferComponet_1.default(v.box_transfer);
        //network
        var emitter = this.m_sfsHall.Emitter;
        emitter.on(this, GameNetResponse_1.HallConf.EditName, this._ansEditPlayerName);
        this.updateView();
        console.log('______________________________controller.onEnable');
        this.view.on('redirectToPay', this, this._onRedirectToPay);
        this.view.opened = true;
        this.view.event('onOpened');
        this.m_transfer.closeHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onTransferClose);
        emitter.on(this, GameNetResponse_1.HallConf.GetPlayerBalance, this._ansUpdateBalance);
        GameNetResponse_1.sendGetPlayerBalance();
    };
    CUserController.prototype._onTransferClose = function () {
        GameNetResponse_1.sendGetPlayerBalance();
        if (this.view.openByPay) {
            this.view.openByPay = false;
            this._onReturn_uiHandler(null);
        }
    };
    CUserController.prototype._ansUpdateBalance = function (data) {
        if (CBaseNet_1.default.IsError(data)) {
            return;
        }
        var balance = data['balance'];
        var user = GM_1.GM.instance.userInfo;
        user.balance = balance;
        this.updateView();
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_BALANCE_UPDATE);
        console.log('更新玩家余额');
    };
    CUserController.prototype._onRedirectToPay = function () {
        this._onClickTransfer(1, null);
    };
    CUserController.prototype.onDisable = function () {
        ApiUtil_1.ApiUtil.recoverHandler(this.m_transfer.closeHandler);
        this.m_transfer.closeHandler = null;
        this.m_view.mouseEnabled = true;
        this.view.off('redirectToPay', this, this._onRedirectToPay);
        this.view.opened = false;
        //view
        var v = this.m_view;
        v.return_btn.off(Event.MOUSE_DOWN, this, this._onReturn_uiHandler);
        v.img_head.off(Event.CLICK, this, this._onSelectHeadImg);
        v.btn_editNam.off(Event.CLICK, this, this._onClickEditNam);
        v.btn_recourd.off(Event.CLICK, this, this._onClickRecored);
        v.lb_nam.off(Event.BLUR, this, this._onEditPlayerNam);
        v.btn_Recharge.off(Event.CLICK, this, this._onClickTransfer);
        v.btn_Withdraw.off(Event.CLICK, this, this._onClickTransfer);
        //component
        this.m_compManager.destroy();
        this.m_compManager = null;
        this.m_transfer.destroy();
        this.m_transfer = null;
        //network
        var emitter = this.m_sfsHall.Emitter;
        emitter.off(this, GameNetResponse_1.HallConf.EditName);
        emitter.off(this, GameNetResponse_1.HallConf.GetPlayerBalance);
        this.m_view = null;
    };
    CUserController.prototype.updateView = function () {
        this._updateView();
    };
    CUserController.prototype._updateView = function () {
        var user = GM_1.GM.instance.userInfo;
        this.view.lb_id.text = user.hallData.loginData.playerId.toString();
        this.view.lb_nam.text = user.nickName;
        this.view.lb_Balance.text = user.balance.toFixed(2);
    };
    CUserController.prototype._onReturn_uiHandler = function (e) {
        e && e.stopPropagation();
        if (this.m_view.closeHandler) {
            this.m_view.closeHandler.run();
        }
    };
    CUserController.prototype._onClickEditNam = function (e) {
        e && e.stopPropagation();
        this.m_view.lb_nam.focus = true;
    };
    CUserController.prototype._onEditPlayerNam = function () {
        var user = GM_1.GM.instance.userInfo;
        var currentNam = this.m_view.lb_nam.text.trim();
        if (user.nickName != currentNam) {
            var param = new CUserModel_1.Req_EditName();
            param.playerName = currentNam;
            this.m_sfsHall.send(GameNetResponse_1.HallConf.EditName, param);
        }
    };
    CUserController.prototype._onSelectHeadImg = function (e) {
        e && e.stopPropagation();
        this.m_view.box_selectHead.visible = true;
    };
    CUserController.prototype._onClickRecored = function (e) {
        e && e.stopPropagation();
        var AccRecored = Laya.Pool.getItemByClass(CUserModel_1.CUserModel.ACC_RECORED_VIEW_SIGN, AccRecoredView_1.default);
        this.m_view.addChild(AccRecored);
    };
    CUserController.prototype._onClickTransfer = function (type, e) {
        e && e.stopPropagation();
        this.m_transfer.show(type);
    };
    CUserController.prototype._ansEditPlayerName = function (info) {
        if (!Boolean(info))
            return;
        if (info.errorCode == 0) {
            var user = GM_1.GM.instance.userInfo;
            var currentNam = this.m_view.lb_nam.text.trim();
            user.nickName = currentNam;
            user.hallData.loginData.nickName = currentNam;
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get("edit_nam") + Lang_1.default.Get("success"), CMessageBox_1.default.TYPE_FLY, -390, "#00ff00");
        }
        else {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get("edit_nam") + Lang_1.default.Get("faild"), CMessageBox_1.default.TYPE_FLY, -390, "#ff0000");
        }
    };
    Object.defineProperty(CUserController.prototype, "view", {
        get: function () {
            return this.m_view;
        },
        enumerable: true,
        configurable: true
    });
    return CUserController;
}(Laya.Script));
exports.default = CUserController;
},{"../../../gm/GM":221,"../../../gm/GMEvent":222,"../../../gm/GameNetResponse":223,"../../../hbcore/framework/Lang":250,"../../../hbcore/util/ApiUtil":266,"../../common/CMessageBox":8,"../../common/component/CComponent":15,"../../net/CBaseNet":216,"./CUserModel":198,"./accrecord/AccRecoredView":202,"./component/CUserSelectedHeadComp":207,"./transfer/CTransferComponet":208}],198:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CUserModel = /** @class */ (function () {
    function CUserModel() {
    }
    CUserModel.ACC_RECORED_VIEW_SIGN = "usr.AccRecoredView";
    return CUserModel;
}());
exports.CUserModel = CUserModel;
var Req_EditName = /** @class */ (function () {
    function Req_EditName() {
    }
    return Req_EditName;
}());
exports.Req_EditName = Req_EditName;
var Ans_EditName = /** @class */ (function () {
    function Ans_EditName() {
    }
    return Ans_EditName;
}());
exports.Ans_EditName = Ans_EditName;
var Ans_UserConfig = /** @class */ (function () {
    function Ans_UserConfig() {
    }
    return Ans_UserConfig;
}());
exports.Ans_UserConfig = Ans_UserConfig;
/**
 * 用户自定义的信息
 */
var UserConfigInfo = /** @class */ (function () {
    function UserConfigInfo() {
        /**播放音效 */
        this.bSound = true;
        /**播放音乐 */
        this.bMusic = true;
        /**头像数字编号1-10 */
        this.headNum = 1;
        /**是否骰宝新手 */
        this.isNewSaibao = true;
        /**是否21点新手 */
        this.isNewBlackJack = true;
        /**是否龙虎斗新手 */
        this.isNewLongHu = true;
        /**是否百家乐新手 */
        this.isNewBacc = true;
    }
    return UserConfigInfo;
}());
exports.UserConfigInfo = UserConfigInfo;
},{}],199:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../ui/layaMaxUI");
var CUserView = /** @class */ (function (_super) {
    __extends(CUserView, _super);
    function CUserView() {
        var _this = _super.call(this) || this;
        _this.opened = false;
        return _this;
    }
    CUserView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        console.log('______________________________view.onEnable');
        this._updateView();
        this._onEvent();
    };
    CUserView.prototype.onDisable = function () {
        this._offEvent();
        this.closeHandler = null;
    };
    CUserView.prototype._updateView = function () {
    };
    CUserView.prototype._onEvent = function () {
    };
    CUserView.prototype._offEvent = function () {
    };
    CUserView.prototype.redirectToPay = function () {
        this.openByPay = true;
        this.event('redirectToPay');
    };
    CUserView.SIGN = 'CUserView';
    return CUserView;
}(layaMaxUI_1.ui.hall.subView.UserViewUI));
exports.default = CUserView;
},{"../../../ui/layaMaxUI":271}],200:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccModel = /** @class */ (function () {
    function AccModel() {
        this.curPage = 1;
        this.totalPage = 1;
    }
    Object.defineProperty(AccModel.prototype, "curHistoryList", {
        get: function () {
            if (!this.m_curHistoryList) {
                this.m_curHistoryList = [];
                this.totalPage = 1;
            }
            return this.m_curHistoryList;
        },
        set: function (v) {
            this.m_curHistoryList = v;
        },
        enumerable: true,
        configurable: true
    });
    return AccModel;
}());
exports.default = AccModel;
var REQ_HistoryData = /** @class */ (function () {
    function REQ_HistoryData() {
        /**当前页数（默认为第一页） */
        this.currentCount = 0;
    }
    return REQ_HistoryData;
}());
exports.REQ_HistoryData = REQ_HistoryData;
var HistoryResponse = /** @class */ (function () {
    function HistoryResponse() {
    }
    return HistoryResponse;
}());
exports.HistoryResponse = HistoryResponse;
var HistoryData = /** @class */ (function () {
    function HistoryData() {
    }
    return HistoryData;
}());
exports.HistoryData = HistoryData;
exports.RECORED_TYPE = {
    0: "RECORED_TYPE_chongzhi",
    1: "RECORED_TYPE_tixian",
    2: "RECORED_TYPE_youxijiesuan",
    3: "RECORED_TYPE_all"
};
},{}],201:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccModel_1 = require("./AccModel");
var NetState_1 = require("../../../../hbcore/net/NetState");
var HistoryDataListProxy_1 = require("./proxy/HistoryDataListProxy");
var HistoryCalendarProxy_1 = require("./proxy/HistoryCalendarProxy");
var HistoryComboxProxy_1 = require("./proxy/HistoryComboxProxy");
var GM_1 = require("../../../../gm/GM");
var AccRecoredController = /** @class */ (function (_super) {
    __extends(AccRecoredController, _super);
    function AccRecoredController() {
        return _super.call(this) || this;
    }
    AccRecoredController.prototype.onEnable = function () {
        this.m_view = this.owner;
        this.m_model = new AccModel_1.default();
        this.m_netState = new NetState_1.default();
        //view 
        var v = this.m_view;
        v.calendarBox.visible = false;
        v.img_turnback.on(Laya.Event.CLICK, this, this._onTurnBack);
        v.on(Laya.Event.MOUSE_DOWN, this, this._onStageDown_uiEvent);
        //proxy
        this.m_proxyCalendar = new HistoryCalendarProxy_1.default(this);
        this.m_proxyCalendar.start();
        this.m_combox = new HistoryComboxProxy_1.default(this);
        this.m_combox.onEnable();
        this.m_proxyDataList = new HistoryDataListProxy_1.default(this);
        this.m_proxyDataList.start();
    };
    AccRecoredController.prototype.onDisable = function () {
        Laya.timer.clearAll(this);
        this.m_proxyDataList.dispose();
        this.m_proxyDataList = null;
        this.m_proxyCalendar.dispose();
        this.m_proxyCalendar = null;
        this.m_combox.onDisable();
        this.m_combox.dispose();
        this.m_combox = null;
        //view
        var v = this.m_view;
        v.img_turnback.off(Laya.Event.CLICK, this, this._onTurnBack);
        v.off(Laya.Event.MOUSE_DOWN, this, this._onStageDown_uiEvent);
        this.m_view = null;
        this.m_model = null;
        this.m_netState = null;
    };
    AccRecoredController.prototype._onTurnBack = function (e) {
        e && e.stopPropagation();
        GM_1.GM.playButtonSound();
        this.m_view.removeSelf();
    };
    AccRecoredController.prototype._onStageDown_uiEvent = function () {
        this.m_view.calendarBox.visible = false;
    };
    Object.defineProperty(AccRecoredController.prototype, "view", {
        get: function () {
            return this.m_view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredController.prototype, "model", {
        get: function () {
            return this.m_model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredController.prototype, "netState", {
        get: function () {
            return this.m_netState;
        },
        enumerable: true,
        configurable: true
    });
    return AccRecoredController;
}(Laya.Script));
exports.default = AccRecoredController;
},{"../../../../gm/GM":221,"../../../../hbcore/net/NetState":263,"./AccModel":200,"./proxy/HistoryCalendarProxy":203,"./proxy/HistoryComboxProxy":204,"./proxy/HistoryDataListProxy":205}],202:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../../../ui/layaMaxUI");
var AccRecoredView = /** @class */ (function (_super) {
    __extends(AccRecoredView, _super);
    function AccRecoredView() {
        return _super.call(this) || this;
    }
    AccRecoredView.prototype.onEnable = function () {
    };
    AccRecoredView.prototype._onEnable = function () {
    };
    AccRecoredView.prototype.onDisable = function () {
    };
    AccRecoredView.prototype._onDisable = function () {
    };
    Object.defineProperty(AccRecoredView.prototype, "calendarBox", {
        // ====== calendar box
        get: function () {
            return this.getChildByName('calendar_box');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarLeftBtn", {
        get: function () {
            return this.calendarBox.getChildByName("left_btn");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarRightBtn", {
        get: function () {
            return this.calendarBox.getChildByName("right_btn");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarPreMonth", {
        get: function () {
            return this.calendarBox.getChildByName("pre_month_lbl");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarNextMonth", {
        get: function () {
            return this.calendarBox.getChildByName("next_month_lbl");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarTitle", {
        get: function () {
            return this.calendarBox.getChildByName("title_lbl");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarToday", {
        get: function () {
            return this.calendarBox.getChildByName("today_lbl");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarTodayClick", {
        get: function () {
            return this.calendarBox.getChildByName("today_click_lbl");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarTitleList", {
        get: function () {
            return this.calendarBox.getChildByName("titleList");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "calendarList", {
        get: function () {
            return this.calendarBox.getChildByName("list");
        },
        enumerable: true,
        configurable: true
    });
    AccRecoredView.prototype.getCalendarListItemNumber = function (item) {
        return item.getChildByName("num_lbl");
    };
    Object.defineProperty(AccRecoredView.prototype, "boxSearchRecoreds", {
        // comb
        get: function () { return this.getChildByName('boxSearchRecoreds'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "combBox", {
        get: function () { return this.boxSearchRecoreds.getChildByName('comb'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "combBtn", {
        get: function () { return this.combBox.getChildByName('title_btn'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "combSelectedLable", {
        get: function () { return this.combBox.getChildByName('select_lbl'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccRecoredView.prototype, "combList", {
        get: function () { return this.combBox.getChildByName('list'); },
        enumerable: true,
        configurable: true
    });
    AccRecoredView.prototype.getCombLbl1 = function (item) { return item.getChildByName('lbl1'); };
    AccRecoredView.prototype.getCombLbl2 = function (item) { return item.getChildByName('lbl2'); };
    return AccRecoredView;
}(layaMaxUI_1.ui.hall.subView.AccountRecordUI));
exports.default = AccRecoredView;
},{"../../../../ui/layaMaxUI":271}],203:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HistoryProxyBase_1 = require("./HistoryProxyBase");
var Handler = Laya.Handler;
var Event = Laya.Event;
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var TimeUtil_1 = require("../../../../../hbcore/util/TimeUtil");
var CalendarUtil_1 = require("../../../../../hbcore/util/CalendarUtil");
var HistoryCalendarProxy = /** @class */ (function (_super) {
    __extends(HistoryCalendarProxy, _super);
    function HistoryCalendarProxy(pController) {
        return _super.call(this, pController) || this;
    }
    HistoryCalendarProxy.prototype.dispose = function () {
        this.m_pView.choiceFromDataTxt.off(Event.MOUSE_DOWN, this, this._onSelectSearchData_uiEvent);
        this.m_pView.choiceToDataTxt.off(Event.MOUSE_DOWN, this, this._onSelectSearchData_uiEvent);
        this.m_pView.calendarTitleList.renderHandler = null;
        this.m_pView.calendarList.renderHandler = null;
        this.m_pView.calendarList.mouseHandler = null;
        this.m_pView.calendarBox.off(Event.MOUSE_DOWN, this, this._onCalendarMouseDown);
        this.m_pView.calendarLeftBtn.clickHandler = null;
        this.m_pView.calendarRightBtn.clickHandler = null;
        this.m_pView.calendarTodayClick.off(Event.MOUSE_DOWN, this, this._onTodayClick_uiEvent);
        _super.prototype.dispose.call(this);
    };
    HistoryCalendarProxy.prototype.start = function () {
        this.m_bSelectFromData = true;
        this._setFromTime(Laya.timer.currTimer);
        this._setToTime(Laya.timer.currTimer);
        this.m_pView.choiceFromDataTxt.on(Event.MOUSE_DOWN, this, this._onSelectSearchData_uiEvent, [this.m_pView.choiceFromDataTxt]);
        this.m_pView.choiceToDataTxt.on(Event.MOUSE_DOWN, this, this._onSelectSearchData_uiEvent, [this.m_pView.choiceToDataTxt]);
        this.m_pView.calendarTitleList.renderHandler = Handler.create(this, this._onCalendarTitleItemRender_uiEvent, null, false);
        this.m_pView.calendarList.renderHandler = Handler.create(this, this._onCalendarItemRender_uiEvent, null, false);
        this.m_pView.calendarList.mouseHandler = Handler.create(this, this._onCalendarSelect_uiEvent, null, false);
        this.m_pView.calendarBox.on(Event.MOUSE_DOWN, this, this._onCalendarMouseDown);
        this.m_pView.calendarLeftBtn.clickHandler = Handler.create(this, this._onCalendarLeftClick_uiEvent, null, false);
        this.m_pView.calendarRightBtn.clickHandler = Handler.create(this, this._onCalendarRightClick_uiEvent, null, false);
        this.m_pView.calendarTodayClick.on(Event.MOUSE_DOWN, this, this._onTodayClick_uiEvent);
        this.m_pView.calendarTitleList.array = [Lang_1.default.Get('day_7'), Lang_1.default.Get('day_1'), Lang_1.default.Get('day_2'),
            Lang_1.default.Get('day_3'), Lang_1.default.Get('day_4'), Lang_1.default.Get('day_5'), Lang_1.default.Get('day_6')];
    };
    HistoryCalendarProxy.prototype._onSelectSearchData_uiEvent = function (target, e) {
        e.stopPropagation();
        if (target == this.m_pView.choiceFromDataTxt) {
            this.m_model.selectPageTime = this.m_model.selectFromTime;
            this.m_bSelectFromData = true;
        }
        else {
            this.m_model.selectPageTime = this.m_model.selectToTime;
            this.m_bSelectFromData = false;
        }
        this._showCalendarView();
    };
    // calendar
    HistoryCalendarProxy.prototype._showCalendarView = function () {
        this.m_pView.calendarBox.visible = true;
        this.m_pView.calendarBox.mouseEnabled = true;
        this._updateCalendarView();
    };
    HistoryCalendarProxy.prototype._updateCalendarView = function () {
        TimeUtil_1.TimeUtil.date.setTime(this.m_model.selectPageTime);
        var date = TimeUtil_1.TimeUtil.date;
        var calendarList = this._buildCalendarList(this.m_model.selectPageTime);
        this.m_pView.calendarList.array = calendarList;
        var curYear = date.getFullYear();
        var curMonth = date.getMonth();
        var curDate = date.getDate();
        for (var i = 0; i < calendarList.length; i++) {
            var itemData = calendarList[i];
            if (!itemData) {
                continue;
            }
            if (itemData.year == curYear && curMonth == itemData.month && itemData.date == curDate) {
                this.m_pView.calendarList.selectedIndex = i;
                break;
            }
        }
        var preData = CalendarUtil_1.CalendarUtil.getUpYearMonth(date.getFullYear(), date.getMonth());
        var nextData = CalendarUtil_1.CalendarUtil.getNextYearMonth(date.getFullYear(), date.getMonth());
        date = TimeUtil_1.TimeUtil.getDate(preData.year, preData.month, 1);
        this.m_pView.calendarPreMonth.text = CalendarUtil_1.CalendarUtil.getMonthName(date.getMonth());
        date = TimeUtil_1.TimeUtil.getDate(nextData.year, nextData.month, 1);
        this.m_pView.calendarNextMonth.text = CalendarUtil_1.CalendarUtil.getMonthName(date.getMonth());
        this.m_pView.calendarToday.text = TimeUtil_1.TimeUtil.getY_M_D(this.m_model.selectPageTime);
        this.m_pView.calendarTodayClick.text = Lang_1.default.Get('today');
    };
    HistoryCalendarProxy.prototype._buildCalendarList = function (time) {
        TimeUtil_1.TimeUtil.date.setTime(time);
        var calendarData = CalendarUtil_1.CalendarUtil.getTimeDataFun(TimeUtil_1.TimeUtil.date.getFullYear(), TimeUtil_1.TimeUtil.date.getMonth());
        var maxDate = calendarData.date;
        var fristDay = calendarData.day;
        var curYear = calendarData.year;
        var curMonth = calendarData.month;
        // 7 * 6
        var tempList = new Array(42);
        // 日 1,2,3,4,5,6表现方式
        var preDays; //  = 7 - fristDay;
        if (fristDay == 7) {
            preDays = 0;
        }
        else {
            preDays = fristDay;
        }
        var preData = CalendarUtil_1.CalendarUtil.getUpYearMonth(calendarData.year, calendarData.month);
        var nextData = CalendarUtil_1.CalendarUtil.getNextYearMonth(calendarData.year, calendarData.month);
        var preCalendarData = CalendarUtil_1.CalendarUtil.getTimeDataFun(preData.year, preData.month);
        var nextCalendarData = CalendarUtil_1.CalendarUtil.getTimeDataFun(nextData.year, nextData.month);
        // 生成日历
        var i = 0;
        var listIndex = 0;
        for (i = 0; i < preDays; ++i) {
            tempList[listIndex] = new CalendarUtil_1.CalendarData(preCalendarData.year, preCalendarData.month, preCalendarData.date - (preDays - i - 1), 0, false);
            listIndex++;
        }
        for (i = 0; i < maxDate; ++i) {
            tempList[listIndex] = new CalendarUtil_1.CalendarData(curYear, curMonth, (i + 1), 0, true); // (i+1);
            listIndex++;
        }
        var startIndex = listIndex;
        for (; listIndex < tempList.length; ++listIndex) {
            tempList[listIndex] = new CalendarUtil_1.CalendarData(nextCalendarData.year, nextCalendarData.month, listIndex - startIndex + 1, 0, false);
        }
        return tempList;
    };
    HistoryCalendarProxy.prototype._hideCalendarView = function () {
        this.m_pView.calendarBox.visible = false;
        this.m_pView.calendarBox.mouseEnabled = false;
    };
    HistoryCalendarProxy.prototype._onCalendarTitleItemRender_uiEvent = function (box, idx) {
        if (!box.dataSource) {
            box.visible = false;
            return;
        }
        this.m_pView.getCalendarListItemNumber(box).text = box.dataSource;
    };
    HistoryCalendarProxy.prototype._onCalendarItemRender_uiEvent = function (box, idx) {
        var item = this.m_pView.calendarList.getCell(idx);
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var date = item.dataSource;
        var lbl = this.m_pView.getCalendarListItemNumber(item);
        this.m_pView.getCalendarListItemNumber(item).text = date.date.toString();
        if (date.isOk) {
            lbl.alpha = 1;
        }
        else {
            lbl.alpha = 0.5;
        }
    };
    HistoryCalendarProxy.prototype._onCalendarSelect_uiEvent = function (e, idx) {
        if (e.type != Event.MOUSE_DOWN) {
            return;
        }
        var cell = this.m_pView.calendarList.getCell(idx);
        if (!cell) {
            return;
        }
        if (!cell.dataSource) {
            return;
        }
        e.stopPropagation();
        var calendarData = cell.dataSource;
        TimeUtil_1.TimeUtil.date.setFullYear(calendarData.year);
        TimeUtil_1.TimeUtil.date.setMonth(calendarData.month);
        TimeUtil_1.TimeUtil.date.setDate(calendarData.date);
        if (this.m_bSelectFromData) {
            this._setFromTime(TimeUtil_1.TimeUtil.date.getTime());
        }
        else {
            this._setToTime(TimeUtil_1.TimeUtil.date.getTime());
        }
        this.m_pView.calendarToday.text = TimeUtil_1.TimeUtil.getY_M_D(TimeUtil_1.TimeUtil.date.getTime());
        // this.m_pController.invalidate();
    };
    HistoryCalendarProxy.prototype._onCalendarMouseDown = function (e) {
        e.stopPropagation();
    };
    HistoryCalendarProxy.prototype._onCalendarLeftClick_uiEvent = function () {
        var date = TimeUtil_1.TimeUtil.date;
        date.setTime(this.m_model.selectPageTime);
        var preData = CalendarUtil_1.CalendarUtil.getUpYearMonth(date.getFullYear(), date.getMonth());
        date = TimeUtil_1.TimeUtil.getDate(preData.year, preData.month, 1);
        this.m_model.selectPageTime = date.getTime();
        this._updateCalendarView();
    };
    HistoryCalendarProxy.prototype._onCalendarRightClick_uiEvent = function () {
        var date = TimeUtil_1.TimeUtil.date;
        date.setTime(this.m_model.selectPageTime);
        var nextData = CalendarUtil_1.CalendarUtil.getNextYearMonth(date.getFullYear(), date.getMonth());
        date = TimeUtil_1.TimeUtil.getDate(nextData.year, nextData.month, 1);
        this.m_model.selectPageTime = date.getTime();
        this._updateCalendarView();
    };
    HistoryCalendarProxy.prototype._onTodayClick_uiEvent = function (e) {
        var date = TimeUtil_1.TimeUtil.getCurDate();
        this.m_model.selectPageTime = date.getTime();
        this._updateCalendarView();
    };
    HistoryCalendarProxy.prototype._setFromTime = function (time) {
        this.m_pView.choiceFromDataTxt.text = TimeUtil_1.TimeUtil.getY_M_D(time);
        this.m_model.selectFromTime = time;
    };
    HistoryCalendarProxy.prototype._setToTime = function (time) {
        this.m_pView.choiceToDataTxt.text = TimeUtil_1.TimeUtil.getY_M_D(time);
        this.m_model.selectToTime = time;
    };
    return HistoryCalendarProxy;
}(HistoryProxyBase_1.default));
exports.default = HistoryCalendarProxy;
},{"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/util/CalendarUtil":267,"../../../../../hbcore/util/TimeUtil":269,"./HistoryProxyBase":206}],204:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HistoryProxyBase_1 = require("./HistoryProxyBase");
var GM_1 = require("../../../../../gm/GM");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var ApiUtil_1 = require("../../../../../hbcore/util/ApiUtil");
var HistoryComboxProxy = /** @class */ (function (_super) {
    __extends(HistoryComboxProxy, _super);
    function HistoryComboxProxy(pController) {
        return _super.call(this, pController) || this;
    }
    HistoryComboxProxy.prototype.onEnable = function () {
        // 充值,提现,游戏结算,全部
        // this.m_combox = this.m_pView.typeCombox;
        // this.m_combox.selectHandler = Laya.Handler.create(this, this.__selectType, null, false);
        // this.m_model.type = this.m_combox.selectedIndex;
        this.m_pView.combList.visible = false;
        this.m_pView.on(Laya.Event.MOUSE_UP, this, this._onHideList);
        this.m_pView.combBtn.on(Laya.Event.MOUSE_UP, this, this._onShowList);
        var tabs = Lang_1.default.Get('accRecoredTabs');
        var tabList = tabs.split(',');
        this.m_pView.combList.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._renderitem);
        this.m_pView.combList.selectHandler = ApiUtil_1.ApiUtil.createHandler(this, this._selectItem);
        this.m_pView.combList.repeatY = tabList.length;
        this.m_pView.combList.dataSource = tabList;
        this.m_pView.combSelectedLable.text = tabList[3];
        this.m_model.type = 3;
        // this.m_pView.combList.selectedIndex = 3;
        // this._selectItem(3);
    };
    HistoryComboxProxy.prototype.onDisable = function () {
        // this.m_combox.selectHandler.recover();
        // this.m_combox.selectHandler = null;
        // this.m_combox = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.m_pView.combList.renderHandler);
        this.m_pView.combList.renderHandler = null;
        ApiUtil_1.ApiUtil.recoverHandler(this.m_pView.combList.selectHandler);
        this.m_pView.combList.selectHandler = null;
        this.m_pView.off(Laya.Event.MOUSE_UP, this, this._onHideList);
        this.m_pView.combBtn.off(Laya.Event.MOUSE_UP, this, this._onShowList);
    };
    HistoryComboxProxy.prototype._renderitem = function (comp, idx) {
        if (!comp.dataSource) {
            comp.visible = false;
            return;
        }
        comp.visible = true;
        var isSelected = this.m_pView.combList.selectedIndex == idx;
        var lbl1 = this.m_pView.getCombLbl1(comp);
        var lbl2 = this.m_pView.getCombLbl2(comp);
        lbl1.visible = !isSelected;
        lbl2.visible = isSelected;
        lbl1.text = (comp.dataSource);
        lbl2.text = (comp.dataSource);
    };
    HistoryComboxProxy.prototype._selectItem = function (idx) {
        var item = this.m_pView.combList.getCell(idx);
        if (item) {
            var str = item.dataSource;
            this.m_pView.combSelectedLable.text = str;
            this.m_model.type = idx;
        }
    };
    HistoryComboxProxy.prototype._onShowList = function (e) {
        e.stopPropagation();
        this.m_pView.combList.visible = !this.m_pView.combList.visible;
    };
    HistoryComboxProxy.prototype._onHideList = function (e) {
        e.stopPropagation();
        this.m_pView.combList.visible = false;
    };
    HistoryComboxProxy.prototype.__selectType = function (index) {
        this.m_model.type = index;
        GM_1.GM.playButtonSound();
    };
    HistoryComboxProxy.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    return HistoryComboxProxy;
}(HistoryProxyBase_1.default));
exports.default = HistoryComboxProxy;
},{"../../../../../gm/GM":221,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/util/ApiUtil":266,"./HistoryProxyBase":206}],205:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HistoryProxyBase_1 = require("./HistoryProxyBase");
var GM_1 = require("../../../../../gm/GM");
var GameNetResponse_1 = require("../../../../../gm/GameNetResponse");
var AccModel_1 = require("../AccModel");
var CMessageBox_1 = require("../../../../common/CMessageBox");
var Lang_1 = require("../../../../../hbcore/framework/Lang");
var TimeUtil_1 = require("../../../../../hbcore/util/TimeUtil");
var Handler = Laya.Handler;
var HistoryDataListProxy = /** @class */ (function (_super) {
    __extends(HistoryDataListProxy, _super);
    function HistoryDataListProxy(pController) {
        return _super.call(this, pController) || this;
    }
    HistoryDataListProxy.prototype.dispose = function () {
        this.m_pView.dataList.renderHandler = null;
        this.m_pView.pre_page_btn.clickHandler = null;
        this.m_pView.next_page_btn.clickHandler = null;
        this.m_pView.choiceSearchBtn.clickHandler = null;
        this.m_pView.head_page_btn.clickHandler.recover();
        this.m_pView.head_page_btn.clickHandler = null;
        this.m_pView.last_page_btn.clickHandler.recover();
        this.m_pView.last_page_btn.clickHandler = null;
        GM_1.GM.instance.network.sfsHall.Emitter.off(this, GameNetResponse_1.HallConf.UserAccountRecords);
        _super.prototype.dispose.call(this);
    };
    HistoryDataListProxy.prototype.start = function () {
        this.m_pView.choiceSearchBtn.clickHandler = Handler.create(this, this._onSearch_uiEvent, null, false);
        this.m_pView.dataList.renderHandler = Handler.create(this, this._onDataListItemRender_uiEvent, null, false);
        this.m_pView.pre_page_btn.clickHandler = Handler.create(this, this._onLeft_uiEvent, null, false);
        this.m_pView.next_page_btn.clickHandler = Handler.create(this, this._onRight_uiEvent, null, false);
        this.m_pView.head_page_btn.clickHandler = Handler.create(this, this._onHead_page_uiEvent, null, false);
        this.m_pView.last_page_btn.clickHandler = Handler.create(this, this._onLast_page_uiEvent, null, false);
        GM_1.GM.instance.network.sfsHall.Emitter.on(this, GameNetResponse_1.HallConf.UserAccountRecords, this._onHistoryResponse);
        this._onSearch_uiEvent();
        this._updatePage();
    };
    // net event
    HistoryDataListProxy.prototype._onHistoryResponse = function (res) {
        this.m_netState.setNetStateIdle(GameNetResponse_1.HallConf.UserAccountRecords);
        if (res.errorCode == 0) {
            this.m_model.curHistoryList = res.playerAccounts;
            this.m_model.curPage = res.currentCount;
            if (this.m_model.curPage < 1) {
                this.m_model.curPage = 1;
            }
            this.m_model.totalPage = res.totalCount > 0 ? res.totalCount : 1;
            this.m_pView.dataList.array = this.m_model.curHistoryList;
            this._updatePage();
            if (this.m_model.curHistoryList == null || this.m_model.curHistoryList.length == 0) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('none_record'), CMessageBox_1.default.TYPE_FLY, 54);
            }
        }
        else {
            CMessageBox_1.default.instance.showNetError(res.errorCode);
        }
    };
    // -- uiEvent
    HistoryDataListProxy.prototype._onSearch_uiEvent = function () {
        if (this.m_netState.isNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords)) {
            return;
        }
        GM_1.GM.playButtonSound();
        var isTimeOk = TimeUtil_1.TimeUtil.date1BigEqualDate2ByYmd(this.m_model.selectToTime, this.m_model.selectFromTime);
        if (!isTimeOk) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('error_time_range'));
            return;
        }
        this.m_netState.setNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords);
        var sendParam = new AccModel_1.REQ_HistoryData();
        sendParam.type = this.m_model.type;
        sendParam.currentCount = this.m_model.curPage;
        sendParam.startTime = TimeUtil_1.TimeUtil.getY_M_D(this.m_model.selectFromTime) + " 00:00:00";
        sendParam.endTime = TimeUtil_1.TimeUtil.getY_M_D(this.m_model.selectToTime) + " 23:59:59";
        GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.UserAccountRecords, sendParam, false);
    };
    HistoryDataListProxy.prototype._onDataListItemRender_uiEvent = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var historyData = item.dataSource;
        var lb;
        lb = item.getChildByName("lb" + 0);
        lb.text = historyData.orderNum;
        lb = item.getChildByName("lb" + 1);
        lb.text = "余额账户";
        lb = item.getChildByName("lb" + 2);
        lb.text = historyData.type; // Lang.Get(RECORED_TYPE[historyData.type]);
        lb = item.getChildByName("lb" + 3);
        lb.text = historyData.startCoin.toString();
        lb = item.getChildByName("lb" + 4);
        lb.text = historyData.handelCoin.toString();
        lb = item.getChildByName("lb" + 5);
        lb.text = historyData.endCoin.toString();
        lb = item.getChildByName("lb" + 6);
        lb.text = historyData.createTime.toString();
        lb = item.getChildByName("lb" + 7);
        lb.text = historyData.remark;
    };
    HistoryDataListProxy.prototype._onLeft_uiEvent = function () {
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords)) {
            return;
        }
        GM_1.GM.playButtonSound();
        this.m_model.curPage--;
        this._updatePage();
        this._onSearch_uiEvent();
    };
    HistoryDataListProxy.prototype._onRight_uiEvent = function () {
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords)) {
            return;
        }
        GM_1.GM.playButtonSound();
        this.m_model.curPage++;
        this._updatePage();
        this._onSearch_uiEvent();
    };
    HistoryDataListProxy.prototype._onHead_page_uiEvent = function () {
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords)) {
            return;
        }
        GM_1.GM.playButtonSound();
        this.m_model.curPage = 1;
        this._updatePage();
        this._onSearch_uiEvent();
    };
    HistoryDataListProxy.prototype._onLast_page_uiEvent = function () {
        if (this.m_pController.netState.isNetStateBusy(GameNetResponse_1.HallConf.UserAccountRecords)) {
            return;
        }
        GM_1.GM.playButtonSound();
        this.m_model.curPage = this.m_model.totalPage;
        this._updatePage();
        this._onSearch_uiEvent();
    };
    HistoryDataListProxy.prototype._updatePage = function () {
        var model = this.m_model;
        var view = this.m_pView;
        if (model.curPage >= model.totalPage) {
            model.curPage = model.totalPage;
        }
        if (model.curPage < 1) {
            model.curPage = 1;
        }
        view.lb_page_num.text = model.curPage + "/" + model.totalPage;
        view.head_page_btn.disabled = view.pre_page_btn.disabled = (model.curPage <= 1);
        view.last_page_btn.disabled = view.next_page_btn.disabled = (model.curPage >= model.totalPage);
    };
    return HistoryDataListProxy;
}(HistoryProxyBase_1.default));
exports.default = HistoryDataListProxy;
},{"../../../../../gm/GM":221,"../../../../../gm/GameNetResponse":223,"../../../../../hbcore/framework/Lang":250,"../../../../../hbcore/util/TimeUtil":269,"../../../../common/CMessageBox":8,"../AccModel":200,"./HistoryProxyBase":206}],206:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HistoryProxyBase = /** @class */ (function () {
    function HistoryProxyBase(pController) {
        this.m_pController = pController;
    }
    HistoryProxyBase.prototype.dispose = function () {
        this.m_pController = null;
    };
    Object.defineProperty(HistoryProxyBase.prototype, "m_pView", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HistoryProxyBase.prototype, "m_model", {
        get: function () {
            return this.m_pController.model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HistoryProxyBase.prototype, "m_netState", {
        get: function () {
            return this.m_pController.netState;
        },
        enumerable: true,
        configurable: true
    });
    return HistoryProxyBase;
}());
exports.default = HistoryProxyBase;
},{}],207:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../../../common/component/CComponent");
var GM_1 = require("../../../../gm/GM");
var CUserModel_1 = require("../CUserModel");
var GameNetResponse_1 = require("../../../../gm/GameNetResponse");
var Lang_1 = require("../../../../hbcore/framework/Lang");
var FuncUtil_1 = require("../../../../hbcore/util/FuncUtil");
var Event = Laya.Event;
var CMessageBox_1 = require("../../../common/CMessageBox");
var CUserSelectedHeadComp = /** @class */ (function (_super) {
    __extends(CUserSelectedHeadComp, _super);
    function CUserSelectedHeadComp(pController) {
        var _this = _super.call(this) || this;
        _this.m_pController = pController;
        return _this;
    }
    CUserSelectedHeadComp.prototype.onDestroy = function () {
        GM_1.GM.instance.network.sfsHall.Emitter.off(this, GameNetResponse_1.HallConf.UserConfig);
        this.view.btn_no.off(Event.CLICK, this, this._onClickNoBtn);
        this.view.btn_okay.off(Event.CLICK, this, this._onClickOkayBtn);
        var n = 6;
        while (--n > -1) {
            var headImg = this.view["img_h_select" + n];
            headImg.off(Event.CLICK, this, this._onClickHeadImg);
        }
        this.m_userConf = null;
        this.m_pController = null;
    };
    CUserSelectedHeadComp.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        //添加子组件需要在awake函数内
    };
    CUserSelectedHeadComp.prototype.start = function () {
        _super.prototype.start.call(this);
        this.m_userConf = FuncUtil_1.FuncUtil.shallowCopy(GM_1.GM.instance.userInfo.userSetting, CUserModel_1.UserConfigInfo);
        this.view.btn_no.on(Event.CLICK, this, this._onClickNoBtn);
        this.view.btn_okay.on(Event.CLICK, this, this._onClickOkayBtn);
        var n = 6;
        while (--n > -1) {
            var headImg = this.view["img_h_select" + n];
            headImg.on(Event.CLICK, this, this._onClickHeadImg, [n]);
        }
        this.setNormalHeadImg();
        GM_1.GM.instance.network.sfsHall.Emitter.on(this, GameNetResponse_1.HallConf.UserConfig, this._ansUserConfig);
        return true;
    };
    CUserSelectedHeadComp.prototype.setNormalHeadImg = function () {
        this.view.img_head.skin = "hall/selfzone/img_head_" + GM_1.GM.instance.userInfo.userSetting.headNum + ".png";
        var headImg = this.view["img_h_select" + (GM_1.GM.instance.userInfo.userSetting.headNum - 1)];
        this.view.img_selected_sign.x = headImg.x;
        this.view.img_selected_sign.y = headImg.y;
    };
    CUserSelectedHeadComp.prototype._onClickNoBtn = function (e) {
        e && e.stopPropagation();
        this._onHideSelectBox();
    };
    CUserSelectedHeadComp.prototype._onClickOkayBtn = function (e) {
        e && e.stopPropagation();
        GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.UserConfig, { custom: JSON.stringify(this.m_userConf) });
    };
    CUserSelectedHeadComp.prototype._onClickHeadImg = function (index, e) {
        e && e.stopPropagation();
        var headImg = this.view["img_h_select" + index];
        this.view.img_selected_sign.x = headImg.x;
        this.view.img_selected_sign.y = headImg.y;
        this.m_userConf.headNum = (index + 1);
    };
    CUserSelectedHeadComp.prototype._onHideSelectBox = function () {
        this.view.box_selectHead.visible = false;
        this.setNormalHeadImg();
    };
    CUserSelectedHeadComp.prototype._ansUserConfig = function (param) {
        if (!Boolean(param))
            return;
        if (param.errorCode == 0) {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get("cache_config") + Lang_1.default.Get("success"), CMessageBox_1.default.TYPE_FLY, 24, "#00ff00");
            GM_1.GM.instance.userInfo.userSetting.headNum = this.m_userConf.headNum;
        }
        else {
            GM_1.GM.instance.messageBox.showMsg(Lang_1.default.Get("cache_config") + Lang_1.default.Get("faild"), CMessageBox_1.default.TYPE_FLY, 24, "#ff0000");
        }
        this._onHideSelectBox();
    };
    Object.defineProperty(CUserSelectedHeadComp.prototype, "view", {
        get: function () {
            return this.m_pController.view;
        },
        enumerable: true,
        configurable: true
    });
    return CUserSelectedHeadComp;
}(CComponent_1.CComponent));
exports.default = CUserSelectedHeadComp;
},{"../../../../gm/GM":221,"../../../../gm/GameNetResponse":223,"../../../../hbcore/framework/Lang":250,"../../../../hbcore/util/FuncUtil":268,"../../../common/CMessageBox":8,"../../../common/component/CComponent":15,"../CUserModel":198}],208:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../../gm/GM");
var Lang_1 = require("../../../../hbcore/framework/Lang");
var coin_1 = require("../../../coin/coin");
var CHallModel_1 = require("../../CHallModel");
var GameNetResponse_1 = require("../../../../gm/GameNetResponse");
var CBaseNet_1 = require("../../../net/CBaseNet");
var CMessageBox_1 = require("../../../common/CMessageBox");
var GMEvent_1 = require("../../../../gm/GMEvent");
var ApiUtil_1 = require("../../../../hbcore/util/ApiUtil");
var CTransferComponet = /** @class */ (function (_super) {
    __extends(CTransferComponet, _super);
    /**
     * 转账功能管理
     * @param _view 传递转账view
     */
    function CTransferComponet(_view) {
        var _this = _super.call(this) || this;
        _this.m_view = _view;
        _this.userInfo = GM_1.GM.instance.userInfo;
        return _this;
    }
    /**
     *
     * @param type 1:充值  2：提款
     */
    CTransferComponet.prototype.show = function (type) {
        this.m_view.visible = true;
        this.operatType = type;
        this.m_hasSend = false;
        this.m_lastSendTime = 0;
        if (this.operatType == 1) {
            this.title_nam.text = Lang_1.default.Get('RECORED_TYPE_chongzhi');
        }
        else {
            this.title_nam.text = Lang_1.default.Get('RECORED_TYPE_tixian');
        }
        switch (this.userInfo.coinData.coinType) {
            case coin_1.coin.ECoinType.BCB.key:
                this.coinClip.index = 0;
                break;
            case coin_1.coin.ECoinType.DC.key:
                this.coinClip.index = 1;
                break;
            default:
                break;
        }
        this.input_handle.text = "";
        this.lb_zijinyue.text = this.userInfo.balance.toString();
        //注册事件
        this.btn_confirm.on(Laya.Event.MOUSE_UP, this, this._onClickConfirm);
        this.img_back.on(Laya.Event.MOUSE_UP, this, this._onClickBack);
        GM_1.GM.instance.network.sfsHall.Emitter.on(this, GameNetResponse_1.HallConf.TransferAccounts, this._onTransferResponse);
    };
    CTransferComponet.prototype.hide = function () {
        this.m_view.visible = false;
        //注册事件
        this.btn_confirm.off(Laya.Event.MOUSE_UP, this, this._onClickConfirm);
        this.img_back.off(Laya.Event.MOUSE_UP, this, this._onClickBack);
        GM_1.GM.instance.network.sfsHall.Emitter.off(this, GameNetResponse_1.HallConf.TransferAccounts);
        if (this.closeHandler) {
            this.closeHandler.run();
        }
    };
    CTransferComponet.prototype.destroy = function () {
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_WALLET_TRANSFER_INFORM);
        _super.prototype.destroy.call(this);
        this.m_view.visible && this.hide();
        this.m_view = null;
        this.userInfo = null;
    };
    CTransferComponet.prototype._onClickConfirm = function (e) {
        e && e.stopPropagation();
        var strInput = this.input_handle.text.trim();
        if (!strInput || strInput.length == 0) {
            return;
        }
        var operateNum = parseFloat(this.input_handle.text.trim());
        operateNum = ApiUtil_1.ApiUtil.formatNumber(operateNum);
        var coinType = GM_1.GM.coinMap.getCoinType();
        var min;
        var max;
        var lessLang;
        var moreLang;
        if (1 == this.operatType) {
            min = GM_1.GM.instance.userInfo.rechargeMin;
            max = GM_1.GM.instance.userInfo.rechargeMax;
            lessLang = 'recharge_money_less_than';
            moreLang = 'recharge_money_more_than';
        }
        else {
            // 提现
            min = GM_1.GM.instance.userInfo.withdrawMin;
            max = GM_1.GM.instance.userInfo.withdrawMax;
            lessLang = 'withdraw_money_less_than';
            moreLang = 'withdraw_money_more_than';
        }
        min = ApiUtil_1.ApiUtil.formatNumber(min);
        max = ApiUtil_1.ApiUtil.formatNumber(max);
        if (-1 != min) {
            if (operateNum < min) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(lessLang, { v1: min }));
                return;
            }
        }
        if (-1 != max) {
            if (operateNum > max) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get(moreLang, { v1: max }));
                return;
            }
        }
        if (operateNum <= 0) {
            return;
        }
        var myBalance = GM_1.GM.instance.userInfo.balance;
        if (this.operatType == 2) {
            if (operateNum > myBalance) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('no_enough_money'));
                return;
            }
        }
        if (this.m_lastSendTime > 0 && Laya.timer.currTimer - this.m_lastSendTime > 3000) {
            this.m_hasSend = false;
        }
        if (this.m_hasSend) {
            CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('transfer_busy'));
            return;
        }
        this.m_hasSend = true;
        this.m_lastSendTime = Laya.timer.currTimer;
        // //TODO:  调用服务器生成短链接，成功返回以后，调用window.HB_JS.bcbwalletBridge
        // //注意重写window.HB_JS.inform回调通知函数
        // send to server
        switch (this.operatType) {
            case 1:
                CHallModel_1.sendTransferAccount(0, operateNum);
                break;
            case 2:
                CHallModel_1.sendTransferAccount(1, operateNum);
                break;
            default:
                console.log('type error ' + this.operatType);
                break;
        }
    };
    CTransferComponet.prototype._onTransferResponse = function (data) {
        // if (CBaseNet.IsError(data)) {
        //     CMessageBox.instance.showNetError(CBaseNet.ErrorCode(data));
        //     return ;
        // }
        // server 回来, 调window.HB_JS.bcbwalletBridge
        // 重写inform
        if (this.operatType == 1) {
            GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_WALLET_TRANSFER_INFORM, this._onTransferInform);
            var transferData = new CHallModel_1.CTransferAccount();
            transferData.updateByData(data);
            console.log('transferData.url ' + transferData.url);
            Laya.Browser.window.HB_JS.bcbwalletBridge(transferData.url);
        }
        else {
            // 提现不需要再传url给应用那边, 直接 显示传回来的message
            var msg = data['message'];
            if (CBaseNet_1.default.IsError(data)) {
                CMessageBox_1.default.instance.showMsg(msg, CMessageBox_1.default.TYPE_BOX);
                this.m_hasSend = false;
            }
            else {
                // 成功
                CMessageBox_1.default.instance.showMsg(msg, CMessageBox_1.default.TYPE_BOX);
                this._onClickBack(null);
            }
        }
    };
    CTransferComponet.prototype._onTransferInform = function (param) {
        this._onClickBack(null);
    };
    CTransferComponet.prototype._onClickBack = function (e) {
        e && e.stopPropagation();
        this.hide();
    };
    Object.defineProperty(CTransferComponet.prototype, "boxView", {
        get: function () {
            return this.m_view.getChildByName('box_ransfer');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "img_back", {
        get: function () {
            return this.m_view.getChildByName('img_back');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "title_nam", {
        get: function () {
            return this.m_view.getChildByName('title_nam');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "lb_zijinyue", {
        get: function () {
            return this.m_view.getChildByName('lb_zijinyue');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "input_handle", {
        get: function () {
            return this.m_view.getChildByName('input_handle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "tips_txt", {
        get: function () {
            return this.m_view.getChildByName('tips_txt');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "btn_confirm", {
        get: function () {
            return this.m_view.getChildByName('btn_confirm');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTransferComponet.prototype, "coinClip", {
        get: function () {
            return this.m_view.getChildByName('coin');
        },
        enumerable: true,
        configurable: true
    });
    return CTransferComponet;
}(Laya.Script));
exports.default = CTransferComponet;
},{"../../../../gm/GM":221,"../../../../gm/GMEvent":222,"../../../../gm/GameNetResponse":223,"../../../../hbcore/framework/Lang":250,"../../../../hbcore/util/ApiUtil":266,"../../../coin/coin":4,"../../../common/CMessageBox":8,"../../../net/CBaseNet":216,"../../CHallModel":188}],209:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var StopAllMouseEvent_1 = require("../common/StopAllMouseEvent");
var CLoading = /** @class */ (function (_super) {
    __extends(CLoading, _super);
    function CLoading() {
        return _super.call(this) || this;
    }
    Object.defineProperty(CLoading, "instance", {
        get: function () {
            if (null == this.s_instance) {
                this.s_instance = new CLoading();
            }
            return this.s_instance;
        },
        enumerable: true,
        configurable: true
    });
    CLoading.prototype.show = function (tips) {
        if (tips === void 0) { tips = null; }
        this.m_tips = tips;
        Laya.stage.addChild(this);
        console.log('loading show');
    };
    CLoading.prototype.hide = function () {
        this.removeSelf();
    };
    CLoading.prototype.onDisable = function () {
        if (this.loadingAni) {
            this.loadingAni.stop();
        }
        StopAllMouseEvent_1.default.unregister(this);
        console.log('loading hide');
    };
    CLoading.prototype.onEnable = function () {
        this.loadingAni && this.loadingAni.play();
        StopAllMouseEvent_1.default.register(this);
        this.loadingAni.play();
        this.loadingAni.interval = 28;
        if (this.m_tips && this.m_tips.length) {
            this.tips.visible = true;
            this.tips.text = this.m_tips;
        }
        else {
            this.tips.visible = false;
        }
    };
    return CLoading;
}(layaMaxUI_1.ui.loading.LoadingUI));
exports.default = CLoading;
},{"../../ui/layaMaxUI":271,"../common/StopAllMouseEvent":13}],210:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../gm/GM");
var GMEvent_1 = require("../../gm/GMEvent");
var coin_1 = require("../coin/coin");
var CChoiceWalletComponet_1 = require("./component/CChoiceWalletComponet");
var Event = Laya.Event;
var ApiUtil_1 = require("../../hbcore/util/ApiUtil");
var HBJS_1 = require("../../gm/HBJS");
var CChoiceCoinController = /** @class */ (function (_super) {
    __extends(CChoiceCoinController, _super);
    function CChoiceCoinController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CChoiceCoinController.prototype.onEnable = function () {
        this.m_pView = this.owner;
        this.m_walletCom = new CChoiceWalletComponet_1.default(this.m_pView);
        var v = this.m_pView;
        v.panel.vScrollBar.skin = "";
        v.panel.vScrollBar.hide = true;
        v.panel.scrollTo(0, 0);
        v.panel.visible = false;
        v.list.selectHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onSelectedItem_uiHandler);
        v.list.renderHandler = ApiUtil_1.ApiUtil.createHandler(this, this._onRenderItem_uiHandler);
        v.return_btn.on(Event.CLICK, this, this._onClickTurnBack);
        v.btn_wallet.on(Event.CLICK, this, this._onClickWalletBtn);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS, this._onLoginSuccess);
    };
    CChoiceCoinController.prototype.onDisable = function () {
        this.m_walletCom.destroy();
        var v = this.m_pView;
        ApiUtil_1.ApiUtil.recoverHandler(v.list.selectHandler);
        v.list.selectHandler = null;
        ApiUtil_1.ApiUtil.recoverHandler(v.list.renderHandler);
        v.list.renderHandler = null;
        v.return_btn.off(Event.CLICK, this, this._onClickTurnBack);
        v.btn_wallet.off(Event.CLICK, this, this._onClickWalletBtn);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS);
    };
    CChoiceCoinController.prototype._onSelectedItem_uiHandler = function (idx) {
        var cell = this.m_pView.list.getCell(idx);
        if (!cell || !cell.dataSource) {
            return;
        }
        var data = cell.dataSource;
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_SELECTED_COIN, data.coinType);
    };
    CChoiceCoinController.prototype._onRenderItem_uiHandler = function (comp, idx) {
        if (!comp.dataSource) {
            comp.visible = false;
            return;
        }
        comp.visible = true;
        var data = comp.dataSource;
        this.m_pView.getCoinByItem(comp).index = data.coinType.type;
        this.m_pView.getCoinNameByItem(comp).index = data.coinType.type;
        this.m_pView.getBalanceByItem(comp).text = data.balance.toString();
    };
    CChoiceCoinController.prototype._onLoginSuccess = function (data) {
        // 登陆成功
        // 更新数据
        // 此时可以操作了
        if (!data) {
            return;
        }
        this.m_pView.panel.visible = true;
        // 更新默认列表的数据
        var defaultCoinList = coin_1.coin.getDefaultCoinList();
        if (data.currencies) {
            for (var _i = 0, _a = data.currencies; _i < _a.length; _i++) {
                var currency = _a[_i];
                if (currency && currency.currency) {
                    var hasData = false;
                    for (var _b = 0, defaultCoinList_1 = defaultCoinList; _b < defaultCoinList_1.length; _b++) {
                        var coinData = defaultCoinList_1[_b];
                        if (coinData.currencyCode == currency.currency) {
                            coinData.balance = currency.balance;
                            hasData = true;
                            break;
                        }
                    }
                    // 存在服务器有的币种, 但客户端没有, 新建
                    if (!hasData) {
                        var coinData = { currencyCode: currency.currency, balance: currency.balance };
                        defaultCoinList.push(coinData);
                    }
                }
            }
        }
        var listData = new Array();
        for (var i = 0; i < defaultCoinList.length; ++i) {
            var selectData = new SelectCoinData();
            selectData.balance = defaultCoinList[i].balance;
            var currencyCode = defaultCoinList[i].currencyCode;
            selectData.coinType = coin_1.coin.getCoinTypeByKey(currencyCode);
            listData.push(selectData);
        }
        this.m_pView.list.repeatY = listData.length;
        this.m_pView.list.array = listData;
    };
    CChoiceCoinController.prototype._onClickWalletBtn = function (e) {
        e && e.stopPropagation();
        this.m_walletCom.show();
    };
    CChoiceCoinController.prototype._onClickTurnBack = function (e) {
        e && e.stopPropagation();
        // Laya.Browser.window.HB_JS.exitGame();
        if (HBJS_1.HBJS.exitGame) {
            HBJS_1.HBJS.exitGame();
        }
    };
    return CChoiceCoinController;
}(Laya.Script));
exports.default = CChoiceCoinController;
var SelectCoinData = /** @class */ (function () {
    function SelectCoinData() {
    }
    return SelectCoinData;
}());
},{"../../gm/GM":221,"../../gm/GMEvent":222,"../../gm/HBJS":225,"../../hbcore/util/ApiUtil":266,"../coin/coin":4,"./component/CChoiceWalletComponet":215}],211:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var CChoiceCoinView = /** @class */ (function (_super) {
    __extends(CChoiceCoinView, _super);
    function CChoiceCoinView() {
        return _super.call(this) || this;
    }
    CChoiceCoinView.prototype.onDestroy = function () {
    };
    CChoiceCoinView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CChoiceCoinView.prototype.onDisable = function () {
        this._offEvent();
    };
    CChoiceCoinView.prototype._updateView = function () {
    };
    CChoiceCoinView.prototype._onEvent = function () {
    };
    CChoiceCoinView.prototype._offEvent = function () {
    };
    Object.defineProperty(CChoiceCoinView.prototype, "viewBox", {
        get: function () {
            return this.getChildByName('viewBox');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CChoiceCoinView.prototype, "panel", {
        get: function () {
            return this.viewBox.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CChoiceCoinView.prototype, "list", {
        get: function () {
            return this.panel.getChildByName('list');
        },
        enumerable: true,
        configurable: true
    });
    CChoiceCoinView.prototype.getCoinByItem = function (item) {
        return item.getChildByName('coin');
    };
    CChoiceCoinView.prototype.getCoinNameByItem = function (item) {
        return item.getChildByName('coinName');
    };
    CChoiceCoinView.prototype.getBalanceByItem = function (item) {
        return item.getChildByName('value_lbl');
    };
    Object.defineProperty(CChoiceCoinView.prototype, "walletPanel", {
        get: function () {
            return this.walletBox.getChildByName('panel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CChoiceCoinView.prototype, "walletList", {
        get: function () {
            return this.walletPanel.getChildByName('walletList');
        },
        enumerable: true,
        configurable: true
    });
    return CChoiceCoinView;
}(layaMaxUI_1.ui.login.ChoiceCoinUI));
exports.default = CChoiceCoinView;
},{"../../ui/layaMaxUI":271}],212:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../gm/GM");
var log_1 = require("../../hbcore/framework/log");
var CLoginModel_1 = require("./CLoginModel");
var GMEvent_1 = require("../../gm/GMEvent");
var SFSClient_1 = require("../../hbcore/net/SFSClient");
var NetState_1 = require("../../hbcore/net/NetState");
var CLoginController = /** @class */ (function (_super) {
    __extends(CLoginController, _super);
    function CLoginController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CLoginController.prototype.onEnable = function () {
        this.m_pView = this.owner;
        this.m_model = new CLoginModel_1.default();
        this.m_entered = false;
        this.m_netState = new NetState_1.default();
        this.m_pView.login_btn.clickHandler = Laya.Handler.create(this, this._onLoginClick_uiHandler, null, false);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS, this._onLoginSuccess);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_LOGIN_ERROR, this._onLoginError);
        this._readCache();
    };
    CLoginController.prototype.onDisable = function () {
        if (this.m_pView.login_btn.clickHandler) {
            this.m_pView.login_btn.clickHandler.recover();
            this.m_pView.login_btn.clickHandler = null;
        }
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_LOGIN_ERROR);
    };
    CLoginController.prototype._onLoginClick_uiHandler = function () {
        if (this.m_entered) {
            return;
        }
        if (this.m_netState.isNetStateBusy(SFSClient_1.NetEvent.LOGIN)) {
            return;
        }
        this.m_netState.setNetStateBusy(SFSClient_1.NetEvent.LOGIN);
        var inputName = this.m_pView.nameLbl.text;
        if (!inputName || inputName.length == 0) {
            return;
        }
        var userName = inputName;
        var passWord = '123456';
        GM_1.GM.instance.userInfo.userName = userName;
        GM_1.GM.instance.userInfo.passWord = passWord;
        log_1.log.log('登陆大厅');
        GM_1.GM.instance.network.hallLogin(userName, passWord);
    };
    CLoginController.prototype._onLoginSuccess = function (data) {
        this.m_entered = true;
        this.m_netState.setNetStateIdle(SFSClient_1.NetEvent.LOGIN);
        this._saveCache();
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_ENTER_HALL);
    };
    CLoginController.prototype._onLoginError = function (data) {
        this.m_netState.setNetStateIdle(SFSClient_1.NetEvent.LOGIN);
    };
    CLoginController.prototype._readCache = function () {
        if (GM_1.GM.instance.isLocal) {
            var userName = Laya.LocalStorage.getItem('username');
            if (userName && userName.length > 0) {
                this.m_pView.nameLbl.text = userName;
            }
        }
    };
    CLoginController.prototype._saveCache = function () {
        if (GM_1.GM.instance.isLocal) {
            var userName = this.m_pView.nameLbl.text;
            Laya.LocalStorage.setItem('username', userName);
        }
    };
    return CLoginController;
}(Laya.Script));
exports.default = CLoginController;
},{"../../gm/GM":221,"../../gm/GMEvent":222,"../../hbcore/framework/log":256,"../../hbcore/net/NetState":263,"../../hbcore/net/SFSClient":264,"./CLoginModel":213}],213:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CLoginModel = /** @class */ (function () {
    function CLoginModel() {
    }
    return CLoginModel;
}());
exports.default = CLoginModel;
},{}],214:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
var CLoginView = /** @class */ (function (_super) {
    __extends(CLoginView, _super);
    function CLoginView() {
        return _super.call(this) || this;
    }
    CLoginView.prototype.onDestroy = function () {
    };
    CLoginView.prototype.onEnable = function () {
        this.mouseEnabled = true;
        this._updateView();
        this._onEvent();
    };
    CLoginView.prototype.onDisable = function () {
        this._offEvent();
    };
    CLoginView.prototype._updateView = function () {
    };
    CLoginView.prototype._onEvent = function () {
    };
    CLoginView.prototype._offEvent = function () {
    };
    return CLoginView;
}(layaMaxUI_1.ui.login.LoginUI));
exports.default = CLoginView;
},{"../../ui/layaMaxUI":271}],215:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../../gm/GM");
var CChoiceWalletComponet = /** @class */ (function (_super) {
    __extends(CChoiceWalletComponet, _super);
    function CChoiceWalletComponet(view) {
        var _this = _super.call(this) || this;
        _this.m_view = view;
        return _this;
    }
    CChoiceWalletComponet.prototype.show = function () {
        if (!this.isShow) {
            this.isShow = true;
            this.m_view.walletBox.visible = true;
            this.m_view.btn_close.on(Laya.Event.MOUSE_UP, this, this.onCloseBtnClick);
            this.m_view.walletList.selectEnable = true;
            this.m_view.walletList.renderHandler = Laya.Handler.create(this, this._onDataListItemRender_uiEvent, null, false);
            this.m_view.walletList.selectHandler = Laya.Handler.create(this, this._onSelectListItem, null, false);
            this.m_data = GM_1.GM.instance.userInfo.walletsList;
            if (!this.m_data) {
                this.m_data = [];
            }
            this.m_view.walletList.repeatY = this.m_data.length;
            this.m_view.walletList.dataSource = this.m_data;
            this.m_view.walletPanel.vScrollBar.skin = "";
            this.m_view.walletPanel.vScrollBar.hide = true;
            this.m_view.walletPanel.scrollTo(0, 0);
        }
    };
    CChoiceWalletComponet.prototype.hide = function () {
        if (this.isShow) {
            this.isShow = false;
            this.m_view.walletBox.visible = false;
            this.m_view.btn_close.off(Laya.Event.MOUSE_UP, this, this.onCloseBtnClick);
            this.m_view.walletList.renderHandler.recover();
            this.m_view.walletList.renderHandler = null;
            this.m_view.walletList.selectHandler.recover();
            this.m_view.walletList.selectHandler = null;
            this.m_data = null;
        }
    };
    CChoiceWalletComponet.prototype.onCloseBtnClick = function () {
        this.hide();
    };
    CChoiceWalletComponet.prototype._onDataListItemRender_uiEvent = function (item, idx) {
        if (!item.dataSource) {
            item.visible = false;
            return;
        }
        item.visible = true;
        var wallet = item.dataSource;
        var lb = item.getChildByName("lb_nam");
        lb.text = wallet.name;
        var radio = item.getChildByName("btn_radio");
        radio.selected = (idx == GM_1.GM.instance.userInfo.selectWalletIndex);
    };
    CChoiceWalletComponet.prototype._onSelectListItem = function (index) {
        GM_1.GM.instance.userInfo.selectWalletIndex = index;
        this.hide();
        //需要重新登陆
        GM_1.GM.instance.network.disconnect();
        GM_1.GM.instance.network.reconnect();
    };
    CChoiceWalletComponet.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.hide();
        this.m_view = null;
    };
    return CChoiceWalletComponet;
}(Laya.Script));
exports.default = CChoiceWalletComponet;
},{"../../../gm/GM":221}],216:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaseNet = /** @class */ (function () {
    function CBaseNet() {
    }
    Object.defineProperty(CBaseNet.prototype, "isError", {
        get: function () {
            if (this.errorCode == undefined || this.errorCode == 0) {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    CBaseNet.Clone = function (other, type) {
        var obj = new type();
        for (var key in other) {
            obj[key] = other[key];
        }
        return obj;
    };
    CBaseNet.IsError = function (data) {
        if (data.hasOwnProperty('errorCode')) {
            if (data['errorCode'] == undefined || 0 == data['errorCode']) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    };
    CBaseNet.ErrorCode = function (data) {
        return data['errorCode'];
    };
    CBaseNet.ErrorMessage = function (data) {
        return data['errorMessage'];
    };
    return CBaseNet;
}());
exports.default = CBaseNet;
},{}],217:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lang_1 = require("../../hbcore/framework/Lang");
var NetTranslateErrorCode = /** @class */ (function () {
    function NetTranslateErrorCode() {
    }
    NetTranslateErrorCode.translateErroCode = function (_type) {
        var msg = Lang_1.default.Get("net_error_" + _type);
        return msg;
    };
    NetTranslateErrorCode.translateHallErroCode = function (_type) {
        var msg = Lang_1.default.Get("net_error_" + _type);
        return msg;
    };
    return NetTranslateErrorCode;
}());
exports.NetTranslateErrorCode = NetTranslateErrorCode;
},{"../../hbcore/framework/Lang":250}],218:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GM_1 = require("../../gm/GM");
var log_1 = require("../../hbcore/framework/log");
var CGlobalConf_1 = require("../const/CGlobalConf");
var GMEvent_1 = require("../../gm/GMEvent");
var WalletProxy;
(function (WalletProxy) {
    /**
     * 解析钱包地址列表
     * @param param
     */
    function listWallets(param) {
        log_1.log.log("listWallets_raw:\t", String(param));
        try {
            if (!param) {
                param = [{ "address": "bcbtestcqJTfEw74nZCbNoxWZRFtYPxke2bSk6c", "name": "MyWallet1" }, { "address": "bcbtest2grc7jhbnbeoMnaQCuLkxWuddhFty8AFG", "name": "henry" }];
            }
            else {
                var tmp = "[" + String(param) + "]";
                param = JSON.parse(tmp);
            }
        }
        catch (error) {
            param = [{ "address": "bcbtestcqJTfEw74nZCbNoxWZRFtYPxke2bSk6c", "name": "MyWallet1" }, { "address": "bcbtest2grc7jhbnbeoMnaQCuLkxWuddhFty8AFG", "name": "henry" }];
        }
        finally {
            GM_1.GM.instance.userInfo.walletsList = param;
            log_1.log.log("listWallets:\t", String(param));
            //有返回调用说明是从钱包登陆
            GM_1.GM.instance.userInfo.router_to = CGlobalConf_1.default.LOGIN_WALLET;
        }
    }
    WalletProxy.listWallets = listWallets;
    function inform(param) {
        // log.log('__inform');
        var retStr = JSON.stringify(param); // String(param);
        log_1.log.log('inform\t', retStr);
        // CMessageBox.instance.showMsg(retStr, CMessageBox.TYPE_BOX);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_WALLET_TRANSFER_INFORM, param);
    }
    WalletProxy.inform = inform;
})(WalletProxy = exports.WalletProxy || (exports.WalletProxy = {}));
},{"../../gm/GM":221,"../../gm/GMEvent":222,"../../hbcore/framework/log":256,"../const/CGlobalConf":18}],219:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CComponent_1 = require("../game/common/component/CComponent");
var GM_1 = require("./GM");
var CGlobalConf_1 = require("../game/const/CGlobalConf");
var CPath_1 = require("../game/const/CPath");
var log_1 = require("../hbcore/framework/log");
var CBGSoundComponent = /** @class */ (function (_super) {
    __extends(CBGSoundComponent, _super);
    function CBGSoundComponent() {
        return _super.call(this) || this;
    }
    CBGSoundComponent.prototype.reset = function () {
    };
    CBGSoundComponent.prototype.onDestroy = function () {
        this.m_bDestroy = true;
        this.m_pSoundSystem.stopMusic();
        this.m_pSoundSystem.stopAllSound();
        this.m_pSoundSystem = null;
        _super.prototype.onDestroy.call(this);
    };
    CBGSoundComponent.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    CBGSoundComponent.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
        this.m_bDestroy = false;
        this.m_pSoundSystem = GM_1.GM.instance.gameStage.soundSystem;
        return true;
    };
    CBGSoundComponent.prototype.process = function () {
        var _this = this;
        // start
        if (this.m_bDestroy) {
            return;
        }
        var path = CPath_1.CPath.getSoundPath(CGlobalConf_1.default.SOUND_BG1);
        var res = Laya.loader.getRes(path);
        if (!res) {
            Laya.loader.load(path, Laya.Handler.create(this, function () {
                if (_this.m_bDestroy) {
                    return;
                }
                _this.m_pSoundSystem.playMusic(path, 0);
            }));
        }
        else {
            this.m_pSoundSystem.playMusic(path, 0);
        }
        log_1.log.log('切换背景音乐');
    };
    CBGSoundComponent.prototype.openSound = function () {
    };
    CBGSoundComponent.prototype.closeSound = function () {
    };
    return CBGSoundComponent;
}(CComponent_1.CComponent));
exports.default = CBGSoundComponent;
},{"../game/common/component/CComponent":15,"../game/const/CGlobalConf":18,"../game/const/CPath":19,"../hbcore/framework/log":256,"./GM":221}],220:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FrameWork_1 = require("../hbcore/framework/FrameWork");
var pool_1 = require("../hbcore/framework/pool");
var Fsm_1 = require("../hbcore/framework/Fsm");
var sound_1 = require("../hbcore/framework/sound");
var sequential_1 = require("../hbcore/framework/sequential");
var CGameProcedureSystem_1 = require("./gameProcedure/CGameProcedureSystem");
/**
 * ...
 * @author auto
 */
var CGameStage = /** @class */ (function (_super) {
    __extends(CGameStage, _super);
    function CGameStage(pStartedHandler, pUpdateHandler) {
        var _this = _super.call(this) || this;
        _this.m_pStartedHandler = pStartedHandler;
        _this.m_pUpdateHandler = pUpdateHandler;
        var stageStart = new CGameStageStart(_this);
        stageStart.on(Laya.Event.COMPLETE, _this, _this._onStageStarted, [stageStart]);
        return _this;
    }
    CGameStage.prototype._onStageStarted = function (stageStart) {
        stageStart.off(Laya.Event.COMPLETE, this, this._onStageStarted);
        if (this.m_pStartedHandler) {
            this.m_pStartedHandler.run();
            this.m_pStartedHandler = null;
        }
        // 循环开始
        this.m_gameStageUpdate = new CGameStageUpdate(this);
        this.startLoop();
    };
    CGameStage.prototype.startLoop = function () {
        // 循环在scene.update之后, 也就是所有其他的update执行完后, 才会执行这里的update
        Laya.timer.frameLoop(1, this, this._onLoop);
    };
    CGameStage.prototype.stopLoop = function () {
        Laya.timer.clearAll(this);
    };
    CGameStage.prototype._onLoop = function () {
        this.m_gameStageUpdate.update();
        if (this.m_pUpdateHandler) {
            this.m_pUpdateHandler.run();
        }
    };
    CGameStage.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        this.addSystem(this.m_pool = new pool_1.pool.CPoolSystem());
        this.addSystem(this.m_fsm = new Fsm_1.fsm.CFsmSystem());
        this.addSystem(this.m_sequential = new sequential_1.sequential.CSequentiaProcedureSystem());
        this.addSystem(this.m_sound = new sound_1.sound.CSoundSystem());
        this.addSystem(new CGameProcedureSystem_1.default());
    };
    CGameStage.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    Object.defineProperty(CGameStage.prototype, "poolSystem", {
        get: function () {
            return this.m_pool;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameStage.prototype, "fsmSystem", {
        get: function () {
            return this.m_fsm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameStage.prototype, "sequentialSystem", {
        get: function () {
            return this.m_sequential;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameStage.prototype, "soundSystem", {
        get: function () {
            return this.m_sound;
        },
        enumerable: true,
        configurable: true
    });
    return CGameStage;
}(FrameWork_1.framework.CAppStage));
exports.CGameStage = CGameStage;
// ===============================================================
var CGameStageStart = /** @class */ (function (_super) {
    __extends(CGameStageStart, _super);
    function CGameStageStart(pGameStage) {
        var _this = _super.call(this) || this;
        _this.m_gameStage = pGameStage;
        _this.m_gameStage.awake();
        Laya.timer.frameLoop(1, _this, _this._waitStart);
        return _this;
    }
    CGameStageStart.prototype._waitStart = function () {
        var isStarted = this.m_gameStage.start();
        if (isStarted) {
            Laya.timer.clear(this, this._waitStart);
            // Laya.timer.frameLoop(1, this, _onEnterFrame);
            this.m_isReady = true;
            this.event(Laya.Event.COMPLETE);
        }
    };
    Object.defineProperty(CGameStageStart.prototype, "stage", {
        get: function () {
            return this.m_gameStage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameStageStart.prototype, "isReady", {
        get: function () {
            return this.m_isReady;
        },
        enumerable: true,
        configurable: true
    });
    return CGameStageStart;
}(Laya.EventDispatcher));
exports.CGameStageStart = CGameStageStart;
// ===============================================================
var CGameStageUpdate = /** @class */ (function (_super) {
    __extends(CGameStageUpdate, _super);
    function CGameStageUpdate(pGameStage) {
        var _this = _super.call(this) || this;
        _this.FIX_TIME = 1 / 60;
        _this.m_gameStage = pGameStage;
        _this.m_duringTime = 0;
        return _this;
    }
    CGameStageUpdate.prototype.update = function () {
        var deltaTime = Laya.timer.delta * 0.001;
        this.m_gameStage.update(deltaTime);
        this.m_duringTime += deltaTime;
        while (this.m_duringTime >= this.FIX_TIME) {
            this.m_duringTime -= this.FIX_TIME;
            this.m_gameStage.fixUpdate(this.FIX_TIME);
        }
    };
    Object.defineProperty(CGameStageUpdate.prototype, "stage", {
        get: function () {
            return this.m_gameStage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CGameStageUpdate.prototype, "isReady", {
        get: function () {
            return this.m_isReady;
        },
        enumerable: true,
        configurable: true
    });
    return CGameStageUpdate;
}(Laya.EventDispatcher));
exports.CGameStageUpdate = CGameStageUpdate;
},{"../hbcore/framework/FrameWork":248,"../hbcore/framework/Fsm":249,"../hbcore/framework/pool":257,"../hbcore/framework/sequential":259,"../hbcore/framework/sound":260,"./gameProcedure/CGameProcedureSystem":231}],221:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CGameStage_1 = require("./CGameStage");
var HttpProxy_1 = require("../hbcore/net/HttpProxy");
var log_1 = require("../hbcore/framework/log");
var GMEvent_1 = require("./GMEvent");
var GameNetwork_1 = require("./GameNetwork");
var UserInfo_1 = require("./data/UserInfo");
var CMessageBox_1 = require("../game/common/CMessageBox");
var CPath_1 = require("../game/const/CPath");
var CGlobalConf_1 = require("../game/const/CGlobalConf");
var CComponent_1 = require("../game/common/component/CComponent");
var CBGSoundComponent_1 = require("./CBGSoundComponent");
var GM = /** @class */ (function () {
    function GM() {
        this.m_isLocal = -1;
        this.m_httpProxy = new HttpProxy_1.Http.HttpProxy();
        this.m_eventDispater = new GMEvent_1.default();
        this.m_network = new GameNetwork_1.default();
        this.m_userInfo = new UserInfo_1.default();
    }
    Object.defineProperty(GM, "instance", {
        get: function () {
            if (!this.s_instance) {
                this.s_instance = new GM();
            }
            return this.s_instance;
        },
        enumerable: true,
        configurable: true
    });
    GM.prototype.stop = function () {
    };
    GM.prototype.initilize = function () {
        this.m_startTime = Laya.timer.currTimer;
        log_1.log.log('GM.initilize');
        var onInitilizeHandler = Laya.Handler.create(this, this._onInitilize);
        var onUpdateHandler = Laya.Handler.create(this, this._onUpdate, null, false);
        this.m_gameStage = new CGameStage_1.CGameStage(onInitilizeHandler, onUpdateHandler);
    };
    GM.prototype._onInitilize = function () {
        var curTime = Laya.timer.currTimer;
        var costTime = curTime - this.m_startTime;
        log_1.log.log('GM.onInitilized. cost time : ', costTime.toString(), ' ms');
        log_1.log.log('_________________________________________________________________________');
        // CProcedureEntry 游戏入口
        // CProcedureLoadResource 资源加载
        // CProcedureGameInitilize 游戏初始化
        this.m_componentManager = new CComponent_1.CComponent();
        this.m_componentManager.addComponent(new CBGSoundComponent_1.default());
        this.m_componentManager.start();
        this.m_componentManager.process();
    };
    GM.prototype.initConf = function (v) { this.m_conf = v; };
    ;
    GM.prototype.initNetConect = function () {
        this.m_network.initialize();
    };
    // 主循环回调, 也可以当作是主循环, 但是会在其他update之后调用
    GM.prototype._onUpdate = function () {
        // 循环在scene.update之后, 也就是所有其他的update执行完后, 才会执行这里的update
        var now = Laya.timer.currTimer;
        this._curTime = now;
        var deltaTime = Laya.timer.delta * 0.001;
    };
    GM.playButtonSound = function () {
        GM.instance.gameStage.soundSystem.playSound(CPath_1.CPath.getSoundPath(CGlobalConf_1.default.SOUND_BTN));
    };
    GM.playSound = function (name) {
        GM.instance.gameStage.soundSystem.playSound(CPath_1.CPath.getSoundPath(name));
    };
    Object.defineProperty(GM.prototype, "gameStage", {
        get: function () { return this.m_gameStage; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "httpProxy", {
        get: function () { return this.m_httpProxy; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "eventDispater", {
        get: function () { return this.m_eventDispater; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "network", {
        get: function () { return this.m_network; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "userInfo", {
        get: function () { return this.m_userInfo; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "conf", {
        get: function () { return this.m_conf; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "messageBox", {
        get: function () { return CMessageBox_1.default.instance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM, "coinData", {
        get: function () { return GM.instance.userInfo.coinData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM, "coinMap", {
        get: function () { return GM.instance.userInfo.coinData.coinMap; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM, "gameData", {
        // gameData
        get: function () { return GM.instance.userInfo.gameData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM, "baccData", {
        get: function () { return this.gameData.baccData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM, "p21Data", {
        get: function () { return this.gameData.p21Data; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GM.prototype, "isLocal", {
        get: function () {
            if (this.m_isLocal > 0) {
                return this.m_isLocal == 1;
            }
            if (!GM.instance.conf) {
                return false;
            }
            var tempConfig = GM.instance.conf.SFSConfig;
            var host = tempConfig.host;
            var isLocal = host.indexOf('192.168') != -1;
            if (isLocal) {
                this.m_isLocal = 1;
            }
            else {
                this.m_isLocal = 2;
            }
            return isLocal;
        },
        enumerable: true,
        configurable: true
    });
    return GM;
}());
exports.GM = GM;
},{"../game/common/CMessageBox":8,"../game/common/component/CComponent":15,"../game/const/CGlobalConf":18,"../game/const/CPath":19,"../hbcore/framework/log":256,"../hbcore/net/HttpProxy":262,"./CBGSoundComponent":219,"./CGameStage":220,"./GMEvent":222,"./GameNetwork":224,"./data/UserInfo":229}],222:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Emitter_1 = require("../hbcore/observer/Emitter");
var GMEvent = /** @class */ (function (_super) {
    __extends(GMEvent, _super);
    function GMEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GMEvent.EVENT_TO_LOGIN = 'to_login';
    GMEvent.EVENT_HALL_CONNECT_SUCCESS = 'hall_connect_success';
    GMEvent.EVENT_HALL_LOGIN_SUCCESS = 'hall_login_success';
    GMEvent.EVENT_HALL_LOGIN_ERROR = 'hall_login_error';
    GMEvent.EVENT_GAME_CONNECT_SUCCESS = 'game_connect_success';
    GMEvent.EVENT_GAME_LOGIN_SUCCESS = 'game_login_success';
    GMEvent.EVENT_GAME_LOGIN_ERROR = 'game_login_error';
    GMEvent.EVENT_ENTER_HALL = 'enter_hall';
    GMEvent.EVENT_ENTER_GAME_HALL = 'enter_game_hall';
    GMEvent.EVENT_ENTER_GAME_ROOM = 'enter_game_room';
    GMEvent.EVENT_SELECTED_COIN = 'selected_coin';
    GMEvent.EVENT_WALLET_TRANSFER_INFORM = 'transferInform';
    GMEvent.EVENT_BALANCE_UPDATE = 'balanceUpdate';
    return GMEvent;
}(Emitter_1.Emitter));
exports.default = GMEvent;
},{"../hbcore/observer/Emitter":265}],223:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaseNet_1 = require("../game/net/CBaseNet");
var GM_1 = require("./GM");
// 游戏控制层的通用协议， 数据
exports.HallConf = {
    TransferAccounts: '1101',
    Disconnect: "1201",
    // send
    EditName: '1003',
    UserConfig: '1002',
    UserAccountRecords: '1102',
    ChooseCurrency: '1103',
    GetPlayerBalance: '1104',
    DailyBetWin: '1105',
    TransResult: '1203' // 充值提现结算
};
exports.GameConf = {
    Reconnect: "1102",
    TransferAccounts: "1103",
    UpdateUserBalance: "1301",
    UpdateGameInfo: "1302",
    Disconnect: "1201",
    UserConfig: "1104",
    // EnterGame:'1113', 
    ExitGame: '1205',
};
var CHallGamesData = /** @class */ (function () {
    function CHallGamesData() {
    }
    return CHallGamesData;
}());
exports.CHallGamesData = CHallGamesData;
var CLoginNetData = /** @class */ (function (_super) {
    __extends(CLoginNetData, _super);
    function CLoginNetData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CLoginNetData;
}(CBaseNet_1.default));
exports.CLoginNetData = CLoginNetData;
var CCurrencyCodeData = /** @class */ (function () {
    function CCurrencyCodeData() {
    }
    return CCurrencyCodeData;
}());
exports.CCurrencyCodeData = CCurrencyCodeData;
var CDisconnectNetData = /** @class */ (function (_super) {
    __extends(CDisconnectNetData, _super);
    function CDisconnectNetData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CDisconnectNetData;
}(CBaseNet_1.default));
exports.CDisconnectNetData = CDisconnectNetData;
var CExitGame = /** @class */ (function (_super) {
    __extends(CExitGame, _super);
    function CExitGame() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CExitGame;
}(CBaseNet_1.default));
exports.CExitGame = CExitGame;
function sendGetPlayerBalance() {
    GM_1.GM.instance.network.sfsHall.send(exports.HallConf.GetPlayerBalance, {}, false);
}
exports.sendGetPlayerBalance = sendGetPlayerBalance;
},{"../game/net/CBaseNet":216,"./GM":221}],224:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SFSClient_1 = require("../hbcore/net/SFSClient");
var GM_1 = require("./GM");
var GameNetResponse_1 = require("./GameNetResponse");
var GMEvent_1 = require("./GMEvent");
var FuncUtil_1 = require("../hbcore/util/FuncUtil");
var CMessageBox_1 = require("../game/common/CMessageBox");
var Lang_1 = require("../hbcore/framework/Lang");
var CWarnView_1 = require("../game/common/CWarnView");
var CGameProcedureSystem_1 = require("./gameProcedure/CGameProcedureSystem");
var HBJS_1 = require("./HBJS");
var CBaseNet_1 = require("../game/net/CBaseNet");
var log_1 = require("../hbcore/framework/log");
var GameNetWork = /** @class */ (function () {
    function GameNetWork() {
        this.m_sfsHall = new SFSClient_1.default();
        this.m_sfsGame = new SFSClient_1.default();
        this.m_reconnectCount = 0;
    }
    GameNetWork.prototype.dispose = function () {
        this._unregisterGameNetEvent();
        this._unregisterHallNetEvent();
        this.disconnect();
    };
    // event GMEvent.EVENT_HALL_CONNECT_SUCCESS
    GameNetWork.prototype.initialize = function () {
        var sfsconfig = GM_1.GM.instance.conf.SFSConfig;
        this.m_sfsHall.initParamer(sfsconfig);
        this._registerHallNetEvent();
        this.m_sfsHall.connect();
    };
    // ===================== hall
    GameNetWork.prototype._registerHallNetEvent = function () {
        //登陆服务器
        var pHallEmitter = this.m_sfsHall.Emitter;
        pHallEmitter.on(this, SFSClient_1.NetEvent.CONNECTION, this._onHallConnectToServer);
        pHallEmitter.on(this, SFSClient_1.NetEvent.LOGIN, this._onHallLogin);
        pHallEmitter.on(this, SFSClient_1.NetEvent.LOGIN_ERROR, this._onHallLoginError);
        pHallEmitter.on(this, SFSClient_1.NetEvent.NET_ASSERTS, this._onDisconnect);
        pHallEmitter.on(this, GameNetResponse_1.HallConf.Disconnect, this._onDisconnect);
        pHallEmitter.on(this, GameNetResponse_1.HallConf.TransResult, this._onTransResult);
    };
    GameNetWork.prototype._unregisterHallNetEvent = function () {
        //登陆服务器
        var pHallEmitter = this.m_sfsHall.Emitter;
        pHallEmitter.off(this, SFSClient_1.NetEvent.CONNECTION);
        pHallEmitter.off(this, SFSClient_1.NetEvent.LOGIN);
        pHallEmitter.off(this, SFSClient_1.NetEvent.LOGIN_ERROR);
        pHallEmitter.off(this, SFSClient_1.NetEvent.NET_ASSERTS);
        pHallEmitter.off(this, GameNetResponse_1.GameConf.Disconnect);
        pHallEmitter.off(this, GameNetResponse_1.HallConf.TransResult);
    };
    GameNetWork.prototype.hallDisconnect = function () {
        this._unregisterHallNetEvent();
        this.m_sfsHall.disconnect();
    };
    // 登陆成功 '
    // GMEvent.EVENT_HALL_LOGIN_SUCCESS
    GameNetWork.prototype.hallLogin = function (userName, passWord) {
        var userinfo = { "userName": userName, "passWord": passWord };
        this.m_sfsHall.loginRequest(userinfo, true);
    };
    GameNetWork.prototype._onHallConnectToServer = function () {
        this.m_reconnectCount = 0;
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS);
    };
    GameNetWork.prototype._onHallLogin = function (data) {
        GM_1.GM.instance.userInfo.updateLoginData(data); // 登陆信息在游戏里需要用到, 所以要保存在global里                
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS, data);
    };
    GameNetWork.prototype._onHallLoginError = function (data) {
        CMessageBox_1.default.instance.showNetError(data.errorMessage);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_HALL_LOGIN_ERROR, data);
    };
    // ========================= game =========================
    GameNetWork.prototype._registerGameNetEvent = function () {
        //游戏服务器
        var pEmitterGame = this.m_sfsGame.Emitter;
        pEmitterGame.on(this, SFSClient_1.NetEvent.LOGIN, this._onGameLoginRes);
        pEmitterGame.on(this, SFSClient_1.NetEvent.LOGIN_ERROR, this._onGameLoginErrorRes);
        pEmitterGame.on(this, GameNetResponse_1.HallConf.Disconnect, this._onDisconnect);
        pEmitterGame.on(this, SFSClient_1.NetEvent.NET_ASSERTS, this._onDisconnect);
    };
    GameNetWork.prototype._unregisterGameNetEvent = function () {
        //游戏服务器
        var pEmitterGame = this.m_sfsGame.Emitter;
        pEmitterGame.off(this, SFSClient_1.NetEvent.LOGIN);
        pEmitterGame.off(this, SFSClient_1.NetEvent.LOGIN_ERROR);
        pEmitterGame.off(this, GameNetResponse_1.GameConf.Disconnect);
        pEmitterGame.off(this, SFSClient_1.NetEvent.NET_ASSERTS);
    };
    GameNetWork.prototype.gameDisconnect = function () {
        this._unregisterGameNetEvent();
        this.m_sfsGame.disconnect();
    };
    // 连接成功 GMEvent.EVENT_GAME_CONNECT_SUCCESS
    // 登陆成功 GMEvent.EVENT_GAME_LOGIN_SUCCESS
    GameNetWork.prototype.gameConnect = function (gameCore) {
        var _this = this;
        this._unregisterGameNetEvent();
        this._registerGameNetEvent();
        var sfs = this.m_sfsGame;
        var userInfo = GM_1.GM.instance.userInfo;
        var gameinfo = userInfo.hallData.getGameData(gameCore);
        var tempConfig = GM_1.GM.instance.conf.SFSConfig;
        var sfsconfig = FuncUtil_1.FuncUtil.shallowCopy(tempConfig, Object);
        sfsconfig.zone = gameinfo.gameCode;
        sfsconfig.host = gameinfo.ip;
        sfsconfig.port = gameinfo.port;
        if (sfs.isConnected()) {
            this._gameLogin(userInfo.userName, userInfo.passWord, gameinfo.gameCode);
        }
        else {
            sfs.initParamer(sfsconfig);
            sfs.Emitter.on(this, SFSClient_1.NetEvent.CONNECTION, function () {
                GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_GAME_CONNECT_SUCCESS);
                sfs.Emitter.off(_this, SFSClient_1.NetEvent.CONNECTION);
                _this._gameLogin(userInfo.userName, userInfo.passWord, gameinfo.gameCode);
            });
            sfs.connect();
        }
    };
    GameNetWork.prototype._gameLogin = function (userName, passWord, gameCode) {
        this.m_sfsGame.loginRequest({ username: userName, gameCode: gameCode, pwd: passWord }, false);
    };
    GameNetWork.prototype._onGameLoginRes = function (data) {
        GM_1.GM.instance.userInfo.updateGameLoginData(data);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_GAME_LOGIN_SUCCESS, data);
    };
    GameNetWork.prototype._onGameLoginErrorRes = function (data) {
        CMessageBox_1.default.instance.showNetError(data.errorMessage);
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_GAME_LOGIN_ERROR, data);
    };
    // ======================= all ==============================
    GameNetWork.prototype.disconnect = function () {
        this.hallDisconnect();
        this.gameDisconnect();
    };
    GameNetWork.prototype.reconnect = function () {
        this.disconnect();
        GM_1.GM.instance.gameStage.getSystem(CGameProcedureSystem_1.default).returnToLogin();
    };
    // 断开连接，重连
    GameNetWork.prototype._onDisconnect = function (param) {
        this.disconnect();
        this.m_reconnectCount++;
        if (this.m_reconnectCount >= 4) {
            if (HBJS_1.HBJS.exitGame) {
                HBJS_1.HBJS.exitGame();
            }
            return;
        }
        var msg;
        if (param) {
            msg = param.message; // NetTranslateErrorCode.translateErroCode(param.message);
        }
        else {
            // 服务器挂了, param为null
            msg = Lang_1.default.Get('net_asserts');
        }
        // 等玩家确认后返回到登陆界面
        CWarnView_1.default.instance().showMsg(msg).closeHandler = Laya.Handler.create(this, function () {
            // MiniLoadingController.instance().show(GCONF.SCENE_LOGIN);
            // Laya.timer.frameOnce(3, this, () => {
            //     this.initialize();
            // });
            GM_1.GM.instance.gameStage.getSystem(CGameProcedureSystem_1.default).returnToLogin();
        });
    };
    GameNetWork.prototype._onTransResult = function (data) {
        if (!data) {
            return;
        }
        var type = data['type'];
        var balance = data['balance'];
        if (type == 0) {
            // 充值
            if (CBaseNet_1.default.IsError(data)) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('recharge_fail'), CMessageBox_1.default.TYPE_BOX);
                log_1.log.log('trans result errorcode : ', CBaseNet_1.default.ErrorCode(data));
            }
            else {
                // 成功
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('recharge_success'), CMessageBox_1.default.TYPE_BOX);
                this._updateBalance(balance);
            }
        }
        else if (type == 1) {
            // 提现
            if (CBaseNet_1.default.IsError(data)) {
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('withdraw_fail'), CMessageBox_1.default.TYPE_BOX);
                log_1.log.log('trans result errorcode : ', CBaseNet_1.default.ErrorCode(data));
            }
            else {
                // 成功
                CMessageBox_1.default.instance.showMsg(Lang_1.default.Get('withdraw_success'), CMessageBox_1.default.TYPE_BOX);
                this._updateBalance(balance);
            }
        }
    };
    GameNetWork.prototype._updateBalance = function (balance) {
        var user = GM_1.GM.instance.userInfo;
        if (!user) {
            return;
        }
        user.balance = balance;
        GM_1.GM.instance.eventDispater.event(GMEvent_1.default.EVENT_BALANCE_UPDATE);
    };
    Object.defineProperty(GameNetWork.prototype, "sfsHall", {
        get: function () {
            return this.m_sfsHall;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameNetWork.prototype, "sfsGame", {
        get: function () {
            return this.m_sfsGame;
        },
        enumerable: true,
        configurable: true
    });
    return GameNetWork;
}());
exports.default = GameNetWork;
},{"../game/common/CMessageBox":8,"../game/common/CWarnView":12,"../game/net/CBaseNet":216,"../hbcore/framework/Lang":250,"../hbcore/framework/log":256,"../hbcore/net/SFSClient":264,"../hbcore/util/FuncUtil":268,"./GM":221,"./GMEvent":222,"./GameNetResponse":223,"./HBJS":225,"./gameProcedure/CGameProcedureSystem":231}],225:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HBJS;
(function (HBJS) {
    HBJS.exitGame = Laya.Browser.window.HB_JS.exitGame;
})(HBJS = exports.HBJS || (exports.HBJS = {}));
},{}],226:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var coin_1 = require("../../game/coin/coin");
var CoinData = /** @class */ (function () {
    function CoinData() {
    }
    Object.defineProperty(CoinData.prototype, "coinType", {
        get: function () {
            return this.m_coinType;
        },
        set: function (ctype) {
            switch (ctype) {
                case coin_1.coin.ECoinType.BCB.key:
                    this.m_coinMap = coin_1.coin.CCoinMap.bcb;
                    break;
                case coin_1.coin.ECoinType.DC.key:
                    this.m_coinMap = coin_1.coin.CCoinMap.dc;
                    break;
            }
            this.m_coinType = ctype;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoinData.prototype, "coinMap", {
        get: function () {
            return this.m_coinMap;
        },
        enumerable: true,
        configurable: true
    });
    return CoinData;
}());
exports.CoinData = CoinData;
},{"../../game/coin/coin":4}],227:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CBaijialeModel_1 = require("../../game/gameList/baijiale/room/CBaijialeModel");
var log_1 = require("../../hbcore/framework/log");
var CP21Data_1 = require("../../game/gameList/dian21/data/CP21Data");
var GameData = /** @class */ (function () {
    function GameData() {
        this.m_gameDataMap = new Object();
        this.m_baccData = new CBaijialeModel_1.CBaccData();
        this.m_p21Data = new CP21Data_1.p21Data.CP21Data();
        this.m_roundID = 0;
        this.m_curRoundID = 0;
        this.m_redirectID = 0;
    }
    // 进某游戏后, 各游戏桌台数据
    GameData.prototype.updateLoginData = function (v) {
        // v.gameCode = CGlobalConf.GAME_CODE.BlackJack; // for test
        if (v.stageInfos) {
            v.stageInfos.sort(function (a, b) {
                return a.stageId - b.stageId;
            });
        }
        this.m_gameDataMap[v.gameCode] = v;
        this.m_curStageInfo = v;
    };
    // 获得某个游戏的桌台数据
    GameData.prototype.getStageInfo = function (gameCore) {
        return this.m_gameDataMap[gameCore];
    };
    Object.defineProperty(GameData.prototype, "curStageInfo", {
        // 当前游戏桌台数据
        get: function () {
            return this.m_curStageInfo;
        },
        enumerable: true,
        configurable: true
    });
    GameData.prototype.getStageInfoByID = function (id) {
        if (!this.curStageInfo) {
            return null;
        }
        var list = this.curStageInfo.stageInfos;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var stageInfo = list_1[_i];
            if (stageInfo && stageInfo.stageId == id) {
                return stageInfo;
            }
        }
        return null;
    };
    Object.defineProperty(GameData.prototype, "baccData", {
        get: function () { return this.m_baccData; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameData.prototype, "p21Data", {
        get: function () { return this.m_p21Data; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameData.prototype, "roundID", {
        get: function () {
            return this.m_roundID;
        },
        enumerable: true,
        configurable: true
    });
    GameData.prototype.addRound = function () {
        this.m_roundID++;
        log_1.log.log('addRound id ', this.m_roundID);
    };
    GameData.prototype.addCurRound = function () {
        this.m_curRoundID++;
        log_1.log.log('addCurRound id ', this.m_curRoundID);
    };
    Object.defineProperty(GameData.prototype, "isCurRound", {
        get: function () {
            if (this.m_curRoundID > this.m_roundID) {
                this.m_curRoundID = this.m_roundID;
            }
            log_1.log.log('isCurRound : ', this.m_roundID == this.m_curRoundID, 'roundID : ', this.m_roundID, ' curRoundID ：', this.m_curRoundID);
            return this.m_roundID == this.m_curRoundID;
        },
        enumerable: true,
        configurable: true
    });
    GameData.prototype.resetRound = function () {
        this.m_roundID = 0;
        this.m_curRoundID = 0;
    };
    GameData.prototype.setRedirect = function (id) {
        this.m_redirectID = id;
    };
    GameData.prototype.getRedirect = function () {
        return this.m_redirectID;
    };
    GameData.prototype.resetRedirect = function () {
        this.m_redirectID = 0;
    };
    return GameData;
}());
exports.default = GameData;
},{"../../game/gameList/baijiale/room/CBaijialeModel":76,"../../game/gameList/dian21/data/CP21Data":122,"../../hbcore/framework/log":256}],228:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HallData = /** @class */ (function () {
    function HallData() {
    }
    // ======大厅 游戏列表
    HallData.prototype.updateLoginData = function (v) {
        this.m_loginData = v;
    };
    Object.defineProperty(HallData.prototype, "loginData", {
        get: function () {
            return this.m_loginData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HallData.prototype, "games", {
        get: function () {
            return this.m_loginData.games;
        },
        enumerable: true,
        configurable: true
    });
    // 登陆游戏数据, ip, port等
    HallData.prototype.getGameData = function (gameCore) {
        for (var _i = 0, _a = this.m_loginData.games; _i < _a.length; _i++) {
            var data = _a[_i];
            if (data.gameCode == gameCore) {
                return data;
            }
        }
        return null;
    };
    return HallData;
}());
exports.default = HallData;
},{}],229:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HallData_1 = require("./HallData");
var GameData_1 = require("./GameData");
var CUserModel_1 = require("../../game/hall/user/CUserModel");
var FuncUtil_1 = require("../../hbcore/util/FuncUtil");
var coin_1 = require("../../game/coin/coin");
var CoinData_1 = require("./CoinData");
var UserInfo = /** @class */ (function () {
    function UserInfo() {
        this.m_listWallet = [{ "address": "bcbtestcqJTfEw74nZCbNoxWZRFtYPxke2bSk6c", "name": "MyWallet1" },
            { "address": "bcbtest2grc7jhbnbeoMnaQCuLkxWuddhFty8AFG", "name": "henry" }, { "address": "bcbtestcqJTfEw74nZCbNoxWZRFtYPxke2bSk6c", "name": "MyWallet1" },
            { "address": "bcbtest2grc7jhbnbeoMnaQCuLkxWuddhFty8AFG", "name": "henry" }];
        this.m_selectWalletIndex = 0;
        this.m_gameData = new GameData_1.default();
        this.m_hallData = new HallData_1.default();
        this.m_coinData = new CoinData_1.CoinData();
        this.m_coinData.coinType = coin_1.coin.ECoinType.BCB.key;
        this.balance = 0;
    }
    UserInfo.prototype.updateGameLoginData = function (v) {
        this.m_gameData.updateLoginData(v);
    };
    UserInfo.prototype.updateLoginData = function (v) {
        this.m_hallData.updateLoginData(v);
        this.setUserSetting(v.customConfig);
        // this.passWord = v.loginGamePassword; 去掉了。登陆游戏服的密码不在这
        this.nickName = v.nickName;
        this.balance = v.balance;
    };
    UserInfo.prototype.setUserSetting = function (setting) {
        var configs;
        try {
            configs = JSON.parse(setting);
        }
        catch (error) {
            configs = new CUserModel_1.UserConfigInfo();
        }
        finally {
            this.m_userSetting = FuncUtil_1.FuncUtil.shallowCopy(configs, CUserModel_1.UserConfigInfo);
            if (this.m_userSetting.headNum > 6 || this.m_userSetting.headNum < 1) {
                this.m_userSetting.headNum = 1;
            }
        }
    };
    Object.defineProperty(UserInfo.prototype, "walletsList", {
        get: function () {
            return this.m_listWallet;
        },
        set: function (param) {
            this.m_listWallet = param;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "selectWalletIndex", {
        get: function () {
            return this.m_selectWalletIndex;
        },
        set: function (index) {
            this.m_selectWalletIndex = index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "router_to", {
        get: function () {
            return this.m_router_to;
        },
        set: function (num) {
            this.m_router_to = num;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "selectWallet", {
        get: function () {
            return this.m_listWallet[this.m_selectWalletIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "hallData", {
        get: function () {
            return this.m_hallData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "gameData", {
        get: function () {
            return this.m_gameData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "coinData", {
        get: function () {
            return this.m_coinData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserInfo.prototype, "userSetting", {
        get: function () {
            return this.m_userSetting;
        },
        enumerable: true,
        configurable: true
    });
    return UserInfo;
}());
exports.default = UserInfo;
var WalletData = /** @class */ (function () {
    function WalletData() {
    }
    return WalletData;
}());
exports.WalletData = WalletData;
},{"../../game/coin/coin":4,"../../game/hall/user/CUserModel":198,"../../hbcore/util/FuncUtil":268,"./CoinData":226,"./GameData":227,"./HallData":228}],230:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var procedure_1 = require("../../hbcore/framework/procedure");
/**
 * ...
 * @author auto
 */
var CGameProcedureBase = /** @class */ (function (_super) {
    __extends(CGameProcedureBase, _super);
    function CGameProcedureBase() {
        return _super.call(this) || this;
    }
    CGameProcedureBase.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        this.m_fsm = fsm;
    };
    CGameProcedureBase.prototype.forceChangeProcedure = function (stateType) {
        this.changeProcedure(this.m_fsm, stateType);
    };
    return CGameProcedureBase;
}(procedure_1.procedure.CProcedureBase));
exports.default = CGameProcedureBase;
},{"../../hbcore/framework/procedure":258}],231:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frameWork_1 = require("../../hbcore/framework/frameWork");
var Fsm_1 = require("../../hbcore/framework/Fsm");
var CProcedureEntry_1 = require("./CProcedureEntry");
var CProcedureLoadResource_1 = require("./CProcedureLoadResource");
var CProcedureLoadDataTable_1 = require("./CProcedureLoadDataTable");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var CProcedureHall_1 = require("./CProcedureHall");
var CProcedureGaming_1 = require("./CProcedureGaming");
var log_1 = require("../../hbcore/framework/log");
var CProcedureLogin_1 = require("./CProcedureLogin");
var CProcedureGameHall_1 = require("./CProcedureGameHall");
var CProcedureGameInitilize_1 = require("./CProcedureGameInitilize");
var CProcedureLoginRouter_1 = require("./CProcedureLoginRouter");
var CProcedureChoiceCoin_1 = require("./CProcedureChoiceCoin");
var CProcedureConnect_1 = require("./CProcedureConnect");
var CProcedureChoiceCoinOpen_1 = require("./CProcedureChoiceCoinOpen");
var CProcedureChoiceCoinSend_1 = require("./CProcedureChoiceCoinSend");
/**
 * ...
 * @author auto
 * 游戏流程控制
 */
var CGameProcedureSystem = /** @class */ (function (_super) {
    __extends(CGameProcedureSystem, _super);
    function CGameProcedureSystem() {
        return _super.call(this) || this;
    }
    CGameProcedureSystem.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
        log_1.log.log('CGameProcedureSystem.onAwake');
        var procedureList = [
            new CProcedureEntry_1.default(), new CProcedureLoadResource_1.default(), new CProcedureLoadDataTable_1.default(),
            new CProcedureGameInitilize_1.default(),
            new CProcedureConnect_1.default(),
            new CProcedureChoiceCoinSend_1.default(),
            new CProcedureChoiceCoinOpen_1.default(),
            new CProcedureChoiceCoin_1.default(),
            new CProcedureLoginRouter_1.default(),
            new CProcedureChangeScene_1.default(),
            new CProcedureLogin_1.default(), new CProcedureHall_1.default(), new CProcedureGameHall_1.default(), new CProcedureGaming_1.default()
        ];
        var fsmSystem = this.stage.getSystem(Fsm_1.fsm.CFsmSystem);
        this.m_procedureManager = fsmSystem.createProcedure("gameProcedure", procedureList);
    };
    CGameProcedureSystem.prototype.onStart = function () {
        log_1.log.log('CGameProcedureSystem.onStart');
        var ret = _super.prototype.onStart.call(this);
        this.m_procedureManager.startProcedure(CProcedureEntry_1.default);
        return ret;
    };
    CGameProcedureSystem.prototype.onDestroy = function () {
        _super.prototype.onDestroy.call(this);
    };
    CGameProcedureSystem.prototype.returnToLogin = function () {
        if (this.m_procedureManager && this.m_procedureManager.currentProcedure) {
            this.m_procedureManager.currentProcedure.forceChangeProcedure(CProcedureLoginRouter_1.default);
        }
    };
    return CGameProcedureSystem;
}(frameWork_1.framework.CAppSystem));
exports.default = CGameProcedureSystem;
},{"../../hbcore/framework/Fsm":249,"../../hbcore/framework/frameWork":254,"../../hbcore/framework/log":256,"./CProcedureChangeScene":232,"./CProcedureChoiceCoin":233,"./CProcedureChoiceCoinOpen":234,"./CProcedureChoiceCoinSend":235,"./CProcedureConnect":236,"./CProcedureEntry":237,"./CProcedureGameHall":238,"./CProcedureGameInitilize":239,"./CProcedureGaming":240,"./CProcedureHall":241,"./CProcedureLoadDataTable":242,"./CProcedureLoadResource":243,"./CProcedureLogin":244,"./CProcedureLoginRouter":245}],232:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var log_1 = require("../../hbcore/framework/log");
var CProcedureGaming_1 = require("./CProcedureGaming");
var CProcedureHall_1 = require("./CProcedureHall");
var CProcedureLogin_1 = require("./CProcedureLogin");
var CProcedureGameHall_1 = require("./CProcedureGameHall");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CLoading_1 = require("../../game/loading/CLoading");
var CProcedureChoiceCoin_1 = require("./CProcedureChoiceCoin");
/**
 * ...
 * @author
 */
var CProcedureChangeScene = /** @class */ (function (_super) {
    __extends(CProcedureChangeScene, _super);
    function CProcedureChangeScene() {
        var _this = _super.call(this) || this;
        _this.m_openSceneCompletedHandler = new Laya.Handler(_this, _this._onOpenSceneCompleted);
        return _this;
    }
    CProcedureChangeScene.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureChangeScene.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureChangeScene.onEnter");
        log_1.log.log('切换场景');
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        var nextScene = fsm.getData(EProcedureKey_1.default.NEXT_SCENE_ID);
        log_1.log.log('进入场景 : ', nextScene);
        CLoading_1.default.instance.show();
        Laya.Scene.open(nextScene, true, null, this.m_openSceneCompletedHandler);
    };
    CProcedureChangeScene.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        var nextSceneType = fsm.getData(EProcedureKey_1.default.NEXT_SCENE_TYPE);
        if (this.m_bFinished) {
            switch (nextSceneType) {
                case ESceneID_1.ESceneType.LOGIN:
                    this.changeProcedure(fsm, CProcedureLogin_1.default);
                    break;
                case ESceneID_1.ESceneType.HALL:
                    this.changeProcedure(fsm, CProcedureHall_1.default);
                    break;
                case ESceneID_1.ESceneType.GAME_HALL:
                    this.changeProcedure(fsm, CProcedureGameHall_1.default);
                    break;
                case ESceneID_1.ESceneType.GAMING:
                    this.changeProcedure(fsm, CProcedureGaming_1.default);
                    break;
                case ESceneID_1.ESceneType.CHOICE_COIN:
                    this.changeProcedure(fsm, CProcedureChoiceCoin_1.default);
                    break;
            }
        }
    };
    CProcedureChangeScene.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureChangeScene.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureChangeScene.prototype._onOpenSceneCompleted = function () {
        CLoading_1.default.instance.hide();
        this.m_bFinished = true;
    };
    return CProcedureChangeScene;
}(CGameProcedureBase_1.default));
exports.default = CProcedureChangeScene;
},{"../../game/loading/CLoading":209,"../../hbcore/framework/log":256,"./CGameProcedureBase":230,"./CProcedureChoiceCoin":233,"./CProcedureGameHall":238,"./CProcedureGaming":240,"./CProcedureHall":241,"./CProcedureLogin":244,"./EProcedureKey":246,"./ESceneID":247}],233:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var log_1 = require("../../hbcore/framework/log");
var Lang_1 = require("../../hbcore/framework/Lang");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CLoading_1 = require("../../game/loading/CLoading");
var NetState_1 = require("../../hbcore/net/NetState");
var CProcedureChoiceCoinSend_1 = require("./CProcedureChoiceCoinSend");
var CMessageBox_1 = require("../../game/common/CMessageBox");
/**
 * ... 选择币种
 * @author
 */
var CProcedureChoiceCoin = /** @class */ (function (_super) {
    __extends(CProcedureChoiceCoin, _super);
    function CProcedureChoiceCoin() {
        return _super.call(this) || this;
    }
    CProcedureChoiceCoin.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureChoiceCoin.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureChoiceCoin.onEnter");
        log_1.log.log("选择币种...");
        _super.prototype.onEnter.call(this, fsm);
        // 显示loading界面
        CLoading_1.default.instance.show(Lang_1.default.Get('loging'));
        this.m_netState = new NetState_1.default();
        this.m_selectCoinType = null;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS, this._onConnected);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS, this._onLoginSuccess);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_LOGIN_ERROR, this._onLoginError);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_SELECTED_COIN, this._onSelectedCoin_uiHandler);
        // GM.instance.network.sfsHall.Emitter.on(this, HallConf.ChooseCurrency, this._onChooseCurrencyResponse);
        this.m_reloginCount = 0;
        this._connect();
    };
    CProcedureChoiceCoin.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CProcedureChoiceCoin.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_SELECTED_COIN);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_LOGIN_SUCCESS);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_LOGIN_ERROR);
        // GM.instance.network.sfsHall.Emitter.off(this, HallConf.ChooseCurrency);
    };
    CProcedureChoiceCoin.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureChoiceCoin.prototype._connect = function () {
        log_1.log.log('连接大厅');
        // 连接
        GM_1.GM.instance.initNetConect();
    };
    CProcedureChoiceCoin.prototype._onConnected = function () {
        this._login();
    };
    // 连接成功	
    CProcedureChoiceCoin.prototype._login = function () {
        var wallet = GM_1.GM.instance.userInfo.selectWallet;
        log_1.log.log("选择登陆的钱包地址", JSON.stringify(wallet));
        var userName = wallet.address;
        var passWord = wallet.name;
        GM_1.GM.instance.userInfo.userName = userName;
        // GM.instance.userInfo.passWord = passWord; 这个没意义
        log_1.log.log('登陆大厅');
        GM_1.GM.instance.network.hallLogin(userName, '');
    };
    // 登陆成功
    CProcedureChoiceCoin.prototype._onLoginSuccess = function () {
        // 下一个流程
        // 通知choiceView登陆完成
        // choiceView可以拿数据了
        log_1.log.log('登陆成功');
        CLoading_1.default.instance.hide();
        // view那边, 直接监听 GMEvent.EVENT_HALL_LOGIN_SUCCESS
    };
    CProcedureChoiceCoin.prototype._onLoginError = function (data) {
        // 登陆失败
        // 重登
        this.m_reloginCount++;
        if (this.m_reloginCount > 5) {
            log_1.log.log('重登次数太多，断开连接');
            // toedo
            //  Laya.timer.once(5000, this, ()=>{
            // 	this._loginB();
            //  })
            CMessageBox_1.default.instance.showNetError(data.errorMessage, CMessageBox_1.default.TYPE_BOX);
            GM_1.GM.instance.network.sfsHall.disconnect();
            return;
        }
        this._loginB();
    };
    CProcedureChoiceCoin.prototype._loginB = function () {
        log_1.log.log('登陆失败');
        if (GM_1.GM.instance.network.sfsHall.isConnected()) {
            this._login();
        }
        else {
            log_1.log.log('连接断开');
            this._connect();
        }
    };
    // 
    CProcedureChoiceCoin.prototype._onSelectedCoin_uiHandler = function (coinType) {
        this.m_fsm.setData(EProcedureKey_1.default.CHOOSE_COIN_TYPE, coinType);
        this.changeProcedure(this.m_fsm, CProcedureChoiceCoinSend_1.default);
    };
    return CProcedureChoiceCoin;
}(CGameProcedureBase_1.default));
exports.default = CProcedureChoiceCoin;
},{"../../game/common/CMessageBox":8,"../../game/loading/CLoading":209,"../../hbcore/framework/Lang":250,"../../hbcore/framework/log":256,"../../hbcore/net/NetState":263,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChoiceCoinSend":235,"./EProcedureKey":246}],234:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var log_1 = require("../../hbcore/framework/log");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
/**
 * ... 选择币种
 * @author
 */
var CProcedureChoiceCoinOpen = /** @class */ (function (_super) {
    __extends(CProcedureChoiceCoinOpen, _super);
    function CProcedureChoiceCoinOpen() {
        return _super.call(this) || this;
    }
    CProcedureChoiceCoinOpen.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureChoiceCoinOpen.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureOpenChoiceCoin.onEnter");
        log_1.log.log("切到币种选择...");
        _super.prototype.onEnter.call(this, fsm);
        fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.CHOICE_COIN);
        fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, ESceneID_1.ESceneID.CHOICE_COIN);
        this.changeProcedure(fsm, CProcedureChangeScene_1.default);
    };
    CProcedureChoiceCoinOpen.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CProcedureChoiceCoinOpen.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureChoiceCoinOpen.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CProcedureChoiceCoinOpen;
}(CGameProcedureBase_1.default));
exports.default = CProcedureChoiceCoinOpen;
},{"../../hbcore/framework/log":256,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./EProcedureKey":246,"./ESceneID":247}],235:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var GameNetResponse_1 = require("../GameNetResponse");
var coin_1 = require("../../game/coin/coin");
var CHallModel_1 = require("../../game/hall/CHallModel");
var CBaseNet_1 = require("../../game/net/CBaseNet");
var NetState_1 = require("../../hbcore/net/NetState");
/**
 * ... 发送选币
 * @author
 */
var CProcedureChoiceCoinSend = /** @class */ (function (_super) {
    __extends(CProcedureChoiceCoinSend, _super);
    function CProcedureChoiceCoinSend() {
        return _super.call(this) || this;
    }
    CProcedureChoiceCoinSend.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureChoiceCoinSend.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureChoiceCoinSend.onEnter");
        log_1.log.log("发送选择币种...");
        _super.prototype.onEnter.call(this, fsm);
        this.m_netState = new NetState_1.default();
        GM_1.GM.instance.network.sfsHall.Emitter.on(this, GameNetResponse_1.HallConf.ChooseCurrency, this._onChooseCurrencyResponse);
        var coinType = fsm.getData(EProcedureKey_1.default.CHOOSE_COIN_TYPE);
        this._sendChooseCoin(coinType);
    };
    CProcedureChoiceCoinSend.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CProcedureChoiceCoinSend.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.network.sfsHall.Emitter.off(this, GameNetResponse_1.HallConf.ChooseCurrency);
    };
    CProcedureChoiceCoinSend.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureChoiceCoinSend.prototype._sendChooseCoin = function (coinType) {
        // 选择了币种
        log_1.log.log('选择了币种', coinType);
        if (this.m_netState.isNetStateBusy(GameNetResponse_1.HallConf.ChooseCurrency)) {
            return;
        }
        this.m_selectCoinType = coinType.key;
        this.m_netState.setNetStateBusy(GameNetResponse_1.HallConf.ChooseCurrency);
        GM_1.GM.instance.network.sfsHall.send(GameNetResponse_1.HallConf.ChooseCurrency, { currencyCode: coinType.key });
    };
    CProcedureChoiceCoinSend.prototype._onChooseCurrencyResponse = function (data) {
        Laya.timer.clearAll(this);
        this.m_netState.setNetStateIdle(GameNetResponse_1.HallConf.ChooseCurrency);
        var newData = CBaseNet_1.default.Clone(data, CHallModel_1.CChooseCoinRes);
        if (newData.isError) {
            GM_1.GM.instance.messageBox.showNetError(newData.errorCode);
        }
        else {
            GM_1.GM.instance.userInfo.balance = newData.balance;
            GM_1.GM.instance.userInfo.passWord = newData.loginGamePassword; // 这里更新游戏服密码
            GM_1.GM.instance.userInfo.rechargeMin = newData.rechargeMin;
            GM_1.GM.instance.userInfo.rechargeMax = newData.rechargeMax;
            GM_1.GM.instance.userInfo.withdrawMin = newData.transferMin;
            GM_1.GM.instance.userInfo.withdrawMax = newData.transferMax;
            this._onEnterHall();
        }
    };
    CProcedureChoiceCoinSend.prototype._onEnterHall = function () {
        if (this.m_selectCoinType == null) {
            this.m_selectCoinType = coin_1.coin.ECoinType.BCB.key;
        }
        GM_1.GM.coinData.coinType = this.m_selectCoinType;
        this.m_fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.HALL);
        this.m_fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, ESceneID_1.ESceneID.HALL);
        this.changeProcedure(this.m_fsm, CProcedureChangeScene_1.default);
    };
    return CProcedureChoiceCoinSend;
}(CGameProcedureBase_1.default));
exports.default = CProcedureChoiceCoinSend;
},{"../../game/coin/coin":4,"../../game/hall/CHallModel":188,"../../game/net/CBaseNet":216,"../../hbcore/framework/log":256,"../../hbcore/net/NetState":263,"../GM":221,"../GameNetResponse":223,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./EProcedureKey":246,"./ESceneID":247}],236:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
/**
 * ...
 * @author
 */
var CProcedureConnect = /** @class */ (function (_super) {
    __extends(CProcedureConnect, _super);
    function CProcedureConnect() {
        return _super.call(this) || this;
    }
    CProcedureConnect.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureConnect.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureConnect.onEnter");
        log_1.log.log("连接服务器...");
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS, this._onLoginSuccess);
        GM_1.GM.instance.initNetConect();
    };
    CProcedureConnect.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            log_1.log.log("连接大厅服务器成功...");
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.LOGIN);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, ESceneID_1.ESceneID.LOGIN);
            this.changeProcedure(fsm, CProcedureChangeScene_1.default);
        }
    };
    CProcedureConnect.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS);
    };
    CProcedureConnect.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureConnect.prototype._onLoginSuccess = function () {
        this.m_bFinished = true;
    };
    return CProcedureConnect;
}(CGameProcedureBase_1.default));
exports.default = CProcedureConnect;
},{"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./EProcedureKey":246,"./ESceneID":247}],237:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../hbcore/framework/log");
var CProcedureLoadDataTable_1 = require("./CProcedureLoadDataTable");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var GM_1 = require("../GM");
var WalletProxy_1 = require("../../game/walletBridge/WalletProxy");
var CGlobalConf_1 = require("../../game/const/CGlobalConf");
/**
 * ...
 * @author auto
 */
var CProcedureEntry = /** @class */ (function (_super) {
    __extends(CProcedureEntry, _super);
    function CProcedureEntry() {
        return _super.call(this) || this;
    }
    CProcedureEntry.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureEntry.prototype.onEnter = function (fsm) {
        _super.prototype.onEnter.call(this, fsm);
        log_1.log.log("CProcedureEntry.onEnter");
        log_1.log.log('进入游戏');
        //------------tests-begin   正式一定要移除vConsole--------
        // Laya.Browser.window.HB_JS.initVConsole();
        //------------tests-end----------------------------------
        GM_1.GM.instance.userInfo.router_to = CGlobalConf_1.default.LOGIN_WALLET;
        Laya.Browser.window.inform = WalletProxy_1.WalletProxy.inform;
        Laya.Browser.window.HB_JS.listWallets = WalletProxy_1.WalletProxy.listWallets;
        Laya.Browser.window.HB_JS.getWalletList();
    };
    CProcedureEntry.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        this.changeProcedure(fsm, CProcedureLoadDataTable_1.default);
    };
    CProcedureEntry.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureEntry.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CProcedureEntry;
}(CGameProcedureBase_1.default));
exports.default = CProcedureEntry;
},{"../../game/const/CGlobalConf":18,"../../game/walletBridge/WalletProxy":218,"../../hbcore/framework/log":256,"../GM":221,"./CGameProcedureBase":230,"./CProcedureLoadDataTable":242}],238:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
/**
 * ...
 * @author
 */
var CProcedureGameHall = /** @class */ (function (_super) {
    __extends(CProcedureGameHall, _super);
    function CProcedureGameHall() {
        return _super.call(this) || this;
    }
    CProcedureGameHall.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureGameHall.prototype.onEnter = function (fsm) {
        log_1.log.log('CProcedureGameHall.onEnter');
        log_1.log.log('进入游戏列表场景');
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        this.m_bReturnHall = false;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_ENTER_GAME_ROOM, this._onEnterRoom);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_ENTER_HALL, this._onReturnHall);
    };
    CProcedureGameHall.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            log_1.log.log('点了游戏, 进入游戏');
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.GAMING);
            var gameCore = GM_1.GM.instance.userInfo.gameData.curStageInfo.gameCode;
            var gameSceneID = ESceneID_1.getGameSceneIDByGameCode(gameCore);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, gameSceneID);
            this.changeProcedure(fsm, CProcedureChangeScene_1.default);
        }
        else if (this.m_bReturnHall) {
            GM_1.GM.instance.network.gameDisconnect();
            log_1.log.log('点了返回, 进入大厅');
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.HALL);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, ESceneID_1.ESceneID.HALL);
            this.changeProcedure(fsm, CProcedureChangeScene_1.default);
        }
    };
    CProcedureGameHall.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_ENTER_GAME_ROOM);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_ENTER_HALL);
    };
    CProcedureGameHall.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureGameHall.prototype._onEnterRoom = function () {
        this.m_bFinished = true;
    };
    CProcedureGameHall.prototype._onReturnHall = function () {
        this.m_bReturnHall = true;
    };
    return CProcedureGameHall;
}(CGameProcedureBase_1.default));
exports.default = CProcedureGameHall;
},{"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./EProcedureKey":246,"./ESceneID":247}],239:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var config_1 = require("../../hbcore/framework/config");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CProcedureLoginRouter_1 = require("./CProcedureLoginRouter");
/**
 * ...
 * @author
 */
var CProcedureGameInitilize = /** @class */ (function (_super) {
    __extends(CProcedureGameInitilize, _super);
    function CProcedureGameInitilize() {
        return _super.call(this) || this;
    }
    CProcedureGameInitilize.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureGameInitilize.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureGameInitilize.onEnter");
        log_1.log.log("游戏初始化...");
        _super.prototype.onEnter.call(this, fsm);
        config_1.config.DEBUG = true; // GM.instance.isLocal;
        // DashBoard.instance.initialize(GM.instance.isLocal);
    };
    CProcedureGameInitilize.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        log_1.log.log("游戏初始化成功...");
        this.changeProcedure(fsm, CProcedureLoginRouter_1.default);
    };
    CProcedureGameInitilize.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_HALL_CONNECT_SUCCESS);
    };
    CProcedureGameInitilize.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CProcedureGameInitilize;
}(CGameProcedureBase_1.default));
exports.default = CProcedureGameInitilize;
},{"../../hbcore/framework/config":253,"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureLoginRouter":245}],240:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
/**
 * ...
 * @author
 */
var CProcedureGaming = /** @class */ (function (_super) {
    __extends(CProcedureGaming, _super);
    function CProcedureGaming() {
        return _super.call(this) || this;
    }
    CProcedureGaming.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureGaming.prototype.onEnter = function (fsm) {
        log_1.log.log('CProcedureGaming.onEnter');
        log_1.log.log('进入游戏场景');
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_ENTER_GAME_HALL, this._onReturnGameHall);
    };
    CProcedureGaming.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            var gameCore = GM_1.GM.instance.userInfo.gameData.curStageInfo.gameCode;
            var gameHallID = ESceneID_1.getGameHallIDByGameCode(gameCore);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.GAME_HALL);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, gameHallID);
            this.changeProcedure(fsm, CProcedureChangeScene_1.default);
        }
    };
    CProcedureGaming.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_ENTER_GAME_HALL);
    };
    CProcedureGaming.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureGaming.prototype._onReturnGameHall = function () {
        this.m_bFinished = true;
    };
    return CProcedureGaming;
}(CGameProcedureBase_1.default));
exports.default = CProcedureGaming;
},{"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./EProcedureKey":246,"./ESceneID":247}],241:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CProcedureChangeScene_1 = require("./CProcedureChangeScene");
var EProcedureKey_1 = require("./EProcedureKey");
var ESceneID_1 = require("./ESceneID");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CProcedureLoginRouter_1 = require("./CProcedureLoginRouter");
/**
 * ...
 * @author auto
 */
var CProcedureHall = /** @class */ (function (_super) {
    __extends(CProcedureHall, _super);
    function CProcedureHall() {
        return _super.call(this) || this;
    }
    CProcedureHall.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureHall.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureHall.onEnter");
        log_1.log.log('进入大厅');
        _super.prototype.onEnter.call(this, fsm);
        GM_1.GM.instance.gameStage.soundSystem.isMuted = !GM_1.GM.instance.userInfo.userSetting.bSound;
        this.m_bFinished = false;
        this.m_bReturnLogin = false;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_ENTER_GAME_HALL, this._onEnterGameHall);
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_TO_LOGIN, this._onReturnToLogin);
    };
    CProcedureHall.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bReturnLogin) {
            GM_1.GM.instance.network.disconnect();
            this.changeProcedure(fsm, CProcedureLoginRouter_1.default);
        }
        else if (this.m_bFinished) {
            var gameCore = GM_1.GM.instance.userInfo.gameData.curStageInfo.gameCode;
            var gameHallID = ESceneID_1.getGameHallIDByGameCode(gameCore);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_TYPE, ESceneID_1.ESceneType.GAME_HALL);
            fsm.setData(EProcedureKey_1.default.NEXT_SCENE_ID, gameHallID);
            this.changeProcedure(fsm, CProcedureChangeScene_1.default);
        }
    };
    CProcedureHall.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_ENTER_GAME_HALL);
    };
    CProcedureHall.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureHall.prototype._onEnterGameHall = function () {
        this.m_bFinished = true;
    };
    CProcedureHall.prototype._onReturnToLogin = function () {
        this.m_bReturnLogin = true;
    };
    return CProcedureHall;
}(CGameProcedureBase_1.default));
exports.default = CProcedureHall;
},{"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChangeScene":232,"./CProcedureLoginRouter":245,"./EProcedureKey":246,"./ESceneID":247}],242:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../hbcore/framework/log");
var Lang_1 = require("../../hbcore/framework/Lang");
var GM_1 = require("../GM");
var CGlobalConf_1 = require("../../game/const/CGlobalConf");
var CProcedureLoadResource_1 = require("./CProcedureLoadResource");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
/**
 * ...
 * @author
 */
var CProcedureLoadDataTable = /** @class */ (function (_super) {
    __extends(CProcedureLoadDataTable, _super);
    function CProcedureLoadDataTable() {
        return _super.call(this) || this;
    }
    CProcedureLoadDataTable.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureLoadDataTable.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureLoadDataTable.onEnter");
        log_1.log.log("配置加载...");
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        this._loadConfigs(this, function () {
            this.m_bFinished = true;
        });
    };
    CProcedureLoadDataTable.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinished) {
            log_1.log.log("配置加载完毕...");
            this.changeProcedure(fsm, CProcedureLoadResource_1.default);
        }
    };
    CProcedureLoadDataTable.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureLoadDataTable.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureLoadDataTable.prototype._loadConfigs = function (caller, callback) {
        var loadLangFunc = function (url) {
            var langData = Laya.loader.getRes(url);
            Lang_1.default.initialize(langData);
            callback.apply(caller);
        };
        var loadConfigFunc = function (configData) {
            GM_1.GM.instance.initConf(configData);
            var langType = configData.lang;
            if (!langType || langType.length == 0) {
                langType = 'zh_cn';
            }
            var langURL = "conf/" + langType + ".xml";
            // 加载xml
            var loadLangHandler = Laya.Handler.create(null, loadLangFunc, [langURL]);
            Laya.loader.load(langURL, loadLangHandler, null, Laya.Loader.XML);
        };
        var loadConfigHandler = Laya.Handler.create(null, loadConfigFunc);
        Laya.loader.load(CGlobalConf_1.default.CONFIG_URL, loadConfigHandler, null, Laya.Loader.JSON);
    };
    return CProcedureLoadDataTable;
}(CGameProcedureBase_1.default));
exports.default = CProcedureLoadDataTable;
},{"../../game/const/CGlobalConf":18,"../../hbcore/framework/Lang":250,"../../hbcore/framework/log":256,"../GM":221,"./CGameProcedureBase":230,"./CProcedureLoadResource":243}],243:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../hbcore/framework/log");
var CProcedureGameInitilize_1 = require("./CProcedureGameInitilize");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CPath_1 = require("../../game/const/CPath");
/**
 * ...
 * @author
 */
var CProcedureLoadResource = /** @class */ (function (_super) {
    __extends(CProcedureLoadResource, _super);
    function CProcedureLoadResource() {
        var _this = _super.call(this) || this;
        _this.WAIT_SUB_LOAD_RESOURCE_TIME = 1;
        return _this;
    }
    CProcedureLoadResource.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureLoadResource.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureLoadResource.onEnter");
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinish = false;
        // 加载资源
        log_1.log.log('开始加载资源');
        var resList = ['comp'];
        for (var i = 0; i < resList.length; i++) {
            resList[i] = CPath_1.CPath.getAtlasPath(resList[i]);
        }
        resList.push('common/paicai/img_num.png');
        Laya.loader.load(resList, Laya.Handler.create(this, this._onLoadResourceFinish));
    };
    CProcedureLoadResource.prototype._onLoadResourceFinish = function () {
        this.m_bFinish = true;
    };
    CProcedureLoadResource.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        if (this.m_bFinish) {
            log_1.log.log('资源完毕');
            this.changeProcedure(fsm, CProcedureGameInitilize_1.default);
        }
    };
    CProcedureLoadResource.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureLoadResource.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CProcedureLoadResource;
}(CGameProcedureBase_1.default));
exports.default = CProcedureLoadResource;
},{"../../game/const/CPath":19,"../../hbcore/framework/log":256,"./CGameProcedureBase":230,"./CProcedureGameInitilize":239}],244:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EProcedureKey_1 = require("./EProcedureKey");
var log_1 = require("../../hbcore/framework/log");
var GM_1 = require("../GM");
var GMEvent_1 = require("../GMEvent");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var coin_1 = require("../../game/coin/coin");
var CProcedureChoiceCoinSend_1 = require("./CProcedureChoiceCoinSend");
/**
 * ...
 * @author auto
 */
var CProcedureLogin = /** @class */ (function (_super) {
    __extends(CProcedureLogin, _super);
    function CProcedureLogin() {
        return _super.call(this) || this;
    }
    CProcedureLogin.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureLogin.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureLogin.onEnter");
        log_1.log.log('进入登陆界面');
        _super.prototype.onEnter.call(this, fsm);
        this.m_bFinished = false;
        GM_1.GM.instance.eventDispater.on(this, GMEvent_1.default.EVENT_ENTER_HALL, this._onEnterHall);
    };
    CProcedureLogin.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
        // log.log('等待login...');
        if (this.m_bFinished) {
            log_1.log.log('login成功');
            // fsm.setData(EProcedureKey.NEXT_SCENE_TYPE, ESceneType.HALL);
            // fsm.setData(EProcedureKey.NEXT_SCENE_ID, ESceneID.HALL);
            // this.changeProcedure(fsm, CProcedureChangeScene);
            // GM.instance.network.sfsHall.send(HallConf.ChooseCurrency, { currencyCode: 'DC' });
            this.m_fsm.setData(EProcedureKey_1.default.CHOOSE_COIN_TYPE, coin_1.coin.ECoinType.BCB);
            this.changeProcedure(this.m_fsm, CProcedureChoiceCoinSend_1.default);
        }
    };
    CProcedureLogin.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
        GM_1.GM.instance.eventDispater.off(this, GMEvent_1.default.EVENT_ENTER_HALL);
    };
    CProcedureLogin.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    CProcedureLogin.prototype._onEnterHall = function () {
        this.m_bFinished = true;
    };
    return CProcedureLogin;
}(CGameProcedureBase_1.default));
exports.default = CProcedureLogin;
},{"../../game/coin/coin":4,"../../hbcore/framework/log":256,"../GM":221,"../GMEvent":222,"./CGameProcedureBase":230,"./CProcedureChoiceCoinSend":235,"./EProcedureKey":246}],245:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../hbcore/framework/log");
var CGameProcedureBase_1 = require("./CGameProcedureBase");
var CProcedureConnect_1 = require("./CProcedureConnect");
var CGlobalConf_1 = require("../../game/const/CGlobalConf");
var CProcedureChoiceCoinOpen_1 = require("./CProcedureChoiceCoinOpen");
var GM_1 = require("../GM");
/**
 * ...
 * @author
 */
var CProcedureLoginRouter = /** @class */ (function (_super) {
    __extends(CProcedureLoginRouter, _super);
    function CProcedureLoginRouter() {
        return _super.call(this) || this;
    }
    CProcedureLoginRouter.prototype.onInit = function (fsm) {
        _super.prototype.onInit.call(this, fsm);
    };
    CProcedureLoginRouter.prototype.onEnter = function (fsm) {
        log_1.log.log("CProcedureLoginRouter.onEnter");
        log_1.log.log("登陆路由...");
        _super.prototype.onEnter.call(this, fsm);
        if (GM_1.GM.instance.userInfo.router_to == CGlobalConf_1.default.LOGIN_WALLET) {
            this.changeProcedure(fsm, CProcedureChoiceCoinOpen_1.default);
        }
        else if (GM_1.GM.instance.userInfo.router_to == CGlobalConf_1.default.LOGIN_NORMAL) {
            this.changeProcedure(fsm, CProcedureConnect_1.default);
        }
    };
    CProcedureLoginRouter.prototype.onUpdate = function (fsm, deltaTime) {
        _super.prototype.onUpdate.call(this, fsm, deltaTime);
    };
    CProcedureLoginRouter.prototype.onLeave = function (fsm, isShutDown) {
        _super.prototype.onLeave.call(this, fsm, isShutDown);
    };
    CProcedureLoginRouter.prototype.onDestroy = function (fsm) {
        _super.prototype.onDestroy.call(this, fsm);
    };
    return CProcedureLoginRouter;
}(CGameProcedureBase_1.default));
exports.default = CProcedureLoginRouter;
},{"../../game/const/CGlobalConf":18,"../../hbcore/framework/log":256,"../GM":221,"./CGameProcedureBase":230,"./CProcedureChoiceCoinOpen":234,"./CProcedureConnect":236}],246:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ...
 * @author
 */
var EProcedureKey = /** @class */ (function () {
    function EProcedureKey() {
    }
    EProcedureKey.NEXT_SCENE_TYPE = "nextSceneType"; // 表示进入的场景类型
    EProcedureKey.NEXT_SCENE_ID = "nextSceneID"; // 实际进入的场景ID
    EProcedureKey.CHOOSE_COIN_TYPE = 'chooseCoinType';
    return EProcedureKey;
}());
exports.default = EProcedureKey;
},{}],247:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CGlobalConf_1 = require("../../game/const/CGlobalConf");
var ESceneID = /** @class */ (function () {
    function ESceneID() {
    }
    ESceneID.LOGIN = 'login/Login.scene';
    ESceneID.HALL = 'hall/HallScene.scene';
    ESceneID.P21_HALL = 'gamelist/p21/P21HallScene.scene';
    ESceneID.P21 = 'gamelist/p21/P21Scene.scene';
    ESceneID.BAI_JIA_LE_HALL = 'gamelist/bjl/BaijialeHallScene.scene';
    ESceneID.BAI_JIA_LE = 'gamelist/bjl/BaijialeScene.scene';
    ESceneID.CHOICE_COIN = 'login/ChoiceCoin.scene';
    return ESceneID;
}());
exports.ESceneID = ESceneID;
var ESceneType = /** @class */ (function () {
    function ESceneType() {
    }
    ESceneType.LOGIN = 0;
    ESceneType.HALL = 1;
    ESceneType.GAME_HALL = 2;
    ESceneType.GAMING = 3;
    ESceneType.CHOICE_COIN = 4;
    return ESceneType;
}());
exports.ESceneType = ESceneType;
function getGameHallIDByGameCode(gameCore) {
    switch (gameCore) {
        case CGlobalConf_1.default.GAME_CODE.Bacc:
            return ESceneID.BAI_JIA_LE_HALL;
        case CGlobalConf_1.default.GAME_CODE.BlackJack:
            return ESceneID.P21_HALL;
    }
}
exports.getGameHallIDByGameCode = getGameHallIDByGameCode;
function getGameSceneIDByGameCode(gameCore) {
    switch (gameCore) {
        case CGlobalConf_1.default.GAME_CODE.Bacc:
            return ESceneID.BAI_JIA_LE;
        case CGlobalConf_1.default.GAME_CODE.BlackJack:
            return ESceneID.P21;
    }
}
exports.getGameSceneIDByGameCode = getGameSceneIDByGameCode;
},{"../../game/const/CGlobalConf":18}],248:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var framework;
(function (framework) {
    /**
     * ...
     * @author auto
     */
    var CLifeCycle = /** @class */ (function (_super) {
        __extends(CLifeCycle, _super);
        function CLifeCycle() {
            var _this = _super.call(this) || this;
            _this.m_state = CLifeCycle.STATE_UNREADY;
            return _this;
        }
        // =================================================
        CLifeCycle.prototype.destroy = function () {
            this.onDestroy();
        };
        CLifeCycle.prototype.awake = function () {
            if (this.isUnReady) {
                this.onAwake();
            }
        };
        CLifeCycle.prototype.start = function () {
            return this.onStart();
        };
        // =================================================
        CLifeCycle.prototype.onAwake = function () {
            this.m_state = CLifeCycle.STATE_AWAKED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onAwake", typeName);
        };
        CLifeCycle.prototype.onStart = function () {
            this.m_state = CLifeCycle.STATE_STARTED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onStart", typeName);
            return true;
        };
        CLifeCycle.prototype.onDestroy = function () {
            this.m_state = CLifeCycle.STATE_DESTORYED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onDestroy", typeName);
        };
        Object.defineProperty(CLifeCycle.prototype, "isAwakeState", {
            // =================================================
            get: function () {
                return this.m_state == CLifeCycle.STATE_AWAKED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isUnReady", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_UNREADY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isAwaked", {
            get: function () {
                return this.m_state >= CLifeCycle.STATE_AWAKED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isStarted", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_STARTED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isDestoryed", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_DESTORYED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "data", {
            get: function () {
                return this.m_dataObject;
            },
            set: function (v) {
                this.m_dataObject = v;
            },
            enumerable: true,
            configurable: true
        });
        CLifeCycle.STATE_UNREADY = -1;
        CLifeCycle.STATE_AWAKED = 0;
        CLifeCycle.STATE_STARTED = 1;
        CLifeCycle.STATE_DESTORYED = 2;
        return CLifeCycle;
    }(Laya.EventDispatcher));
    framework.CLifeCycle = CLifeCycle;
    // =============================================================================================
    /**
     * ...
     * @author auto
     */
    var CContainerLifeCycle = /** @class */ (function (_super) {
        __extends(CContainerLifeCycle, _super);
        function CContainerLifeCycle() {
            var _this = _super.call(this) || this;
            _this.m_beanList = new Array();
            _this.m_unReadyBeanList = new Array();
            _this.m_unStartBeanList = new Array();
            return _this;
        }
        // =================================================
        CContainerLifeCycle.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for (var i = this.m_beanList.length - 1; i >= 0; i--) {
                var o = this.m_beanList[i];
                o.destroy();
            }
        };
        CContainerLifeCycle.prototype.awake = function () {
            _super.prototype.awake.call(this);
            this._awakeUnReadyBean();
        };
        CContainerLifeCycle.prototype._awakeUnReadyBean = function () {
            if (this.m_unReadyBeanList.length > 0) {
                for (var i = 0; i < this.m_unReadyBeanList.length; i++) {
                    var o = this.m_unReadyBeanList[i];
                    o.awake();
                    if (o.isAwaked) {
                        this.m_unReadyBeanList.splice(i, 1);
                        i--;
                        this.m_unStartBeanList.push(o);
                    }
                }
            }
        };
        // 
        CContainerLifeCycle.prototype.start = function () {
            var ret = _super.prototype.start.call(this);
            if (!ret) {
                return ret;
            }
            if (this.m_unStartBeanList.length > 0) {
                for (var i = 0; i < this.m_unStartBeanList.length; i++) {
                    var o = this.m_unStartBeanList[i];
                    ret = o.start();
                    if (!ret) {
                        return ret;
                    }
                    if (o.isStarted) {
                        this.m_unStartBeanList.splice(i, 1);
                        i--;
                    }
                }
            }
            return true;
        };
        // =================================================
        CContainerLifeCycle.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        // onStart如果return false, 则会多次调用直到为true
        CContainerLifeCycle.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CContainerLifeCycle.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
        };
        // =================================================
        CContainerLifeCycle.prototype.getBean = function (clz) {
            if (this.m_beanList) {
                for (var i = 0; i < this.m_beanList.length; i++) {
                    var o = this.m_beanList[i];
                    if (o instanceof clz) {
                        return o;
                    }
                }
            }
            return null;
        };
        CContainerLifeCycle.prototype.getBeans = function () {
            return this.m_beanList;
        };
        CContainerLifeCycle.prototype.removeBean = function (b) {
            if (!b) {
                return false;
            }
            var index = this.m_beanList.indexOf(b);
            if (-1 == index) {
                return false;
            }
            this.m_beanList.splice(index, 1);
            index = this.m_unReadyBeanList.indexOf(b);
            if (-1 != index) {
                this.m_unReadyBeanList.splice(index, 1);
            }
            index = this.m_unStartBeanList.indexOf(b);
            if (-1 != index) {
                this.m_unStartBeanList.splice(index, 1);
            }
            return true;
        };
        CContainerLifeCycle.prototype.addBean = function (o) {
            if (!o) {
                return false;
            }
            if (this.contains(o)) {
                return false;
            }
            this.m_beanList.push(o);
            this.m_unReadyBeanList.push(o);
            return true;
        };
        CContainerLifeCycle.prototype.contains = function (o) {
            for (var i = 0; i < this.m_beanList.length; i++) {
                var b = this.m_beanList[i];
                if (b == o) {
                    return true;
                }
            }
            return false;
        };
        return CContainerLifeCycle;
    }(CLifeCycle));
    framework.CContainerLifeCycle = CContainerLifeCycle;
    // =============================================================================================
    /**
     * ...
     * @author
     */
    var CBean = /** @class */ (function (_super) {
        __extends(CBean, _super);
        function CBean() {
            return _super.call(this) || this;
        }
        CBean.prototype.addBean = function (o) {
            var ret = _super.prototype.addBean.call(this, o);
            if (ret) {
                o.system = this.system;
            }
            return ret;
        };
        CBean.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CBean.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CBean.prototype.onDestroy = function () {
            this.m_system = null;
            _super.prototype.onDestroy.call(this);
        };
        Object.defineProperty(CBean.prototype, "system", {
            get: function () {
                return this.m_system;
            },
            set: function (v) {
                this.m_system = v;
            },
            enumerable: true,
            configurable: true
        });
        return CBean;
    }(CContainerLifeCycle));
    framework.CBean = CBean;
    // =============================================================================================
    /**
     * ...
     * @author auto
     */
    var CAppSystem = /** @class */ (function (_super) {
        __extends(CAppSystem, _super);
        function CAppSystem() {
            return _super.call(this) || this;
        }
        CAppSystem.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CAppSystem.prototype.onStart = function () {
            var ret = _super.prototype.onStart.call(this);
            return ret;
        };
        CAppSystem.prototype.onDestroy = function () {
            this.m_stage = null;
            _super.prototype.onDestroy.call(this);
            // this.m_viewList = null;
        };
        // view
        // getAllViewBean() : Array<CViewBean> {
        // 	return m_viewList;
        // }
        CAppSystem.prototype.update = function (delta) {
            // if (m_viewList) {
            // 	for each (let view:CViewBean in m_viewList) {
            // 		if (view && view.isStarted) {
            // 			if (view.isDirty) {
            // 				view.updateData(delta);
            // 			}
            // 		}
            // 	}
            // }
        };
        CAppSystem.prototype.addBean = function (o) {
            var ret = _super.prototype.addBean.call(this, o);
            if (ret) {
                o.system = this;
            }
            // if (o is CViewBean) {
            // 	if (!m_viewList) {
            // 		m_viewList = new Array<CViewBean>();
            // 	}
            // 	m_viewList.push(o);
            // }
            return ret;
        };
        CAppSystem.prototype.removeBean = function (b) {
            var ret = _super.prototype.removeBean.call(this, b);
            // if (b is CViewBean) {
            // 	let idx:int = m_viewList.indexOf(b as CViewBean);
            // 	m_viewList.splice(idx, 1);
            // }
            return ret;
        };
        Object.defineProperty(CAppSystem.prototype, "stage", {
            get: function () {
                return this.m_stage;
            },
            set: function (v) {
                this.m_stage = v;
            },
            enumerable: true,
            configurable: true
        });
        return CAppSystem;
    }(CContainerLifeCycle));
    framework.CAppSystem = CAppSystem;
    // =============================================================================================
    /**
     ...
    1.update/fixUpdate : 继承IUpdate/IFixUpdate的system, 会自动调用update与fixUpdate, 并不会往下自动调用(避免调用太多无用的update)
    2.在OnAwake中addBean的节点, 会自动启动, 其他的需要自行调用awake与start:
    如 : (在awake之外添加)
        addBean(b);
        b.awake();
        b.start();
    * @author auto
    */
    var CAppStage = /** @class */ (function (_super) {
        __extends(CAppStage, _super);
        function CAppStage() {
            return _super.call(this) || this;
        }
        CAppStage.prototype.update = function (deltaTime) {
            var b;
            var beans = this.getBeans();
            var iCount = beans.length;
            for (var i = 0; i < iCount; i++) {
                b = beans[i];
                if (b.isStarted) {
                    var iupdate = b['update'];
                    if (iupdate) {
                        b['update'](deltaTime);
                    }
                }
            }
        };
        CAppStage.prototype.fixUpdate = function (fixTime) {
            var b;
            var beans = this.getBeans();
            var iCount = beans.length;
            for (var i = 0; i < iCount; i++) {
                b = beans[i];
                if (b.isStarted) {
                    var iupdate = b['fixUpdate'];
                    if (iupdate) {
                        b['fixUpdate'](fixTime);
                    }
                }
            }
        };
        CAppStage.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CAppStage.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CAppStage.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
        };
        CAppStage.prototype.getSystem = function (clazz) {
            return this.getBean(clazz);
        };
        CAppStage.prototype.addSystem = function (sys) {
            if (this.addBean(sys)) {
                sys.stage = this;
            }
            return false;
        };
        CAppStage.prototype.removeSystem = function (sys) {
            return this.removeBean(sys);
        };
        return CAppStage;
    }(CContainerLifeCycle));
    framework.CAppStage = CAppStage;
    // =============================================================================================
})(framework = exports.framework || (exports.framework = {}));
},{}],249:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frameWork_1 = require("./frameWork");
var procedure_1 = require("./procedure");
var log_1 = require("./log");
var fsm;
(function (fsm_1) {
    /**
     * ...
     * @author
     */
    var CFsmBase = /** @class */ (function () {
        function CFsmBase(name) {
            this.m_name = name;
        }
        Object.defineProperty(CFsmBase.prototype, "Name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CFsmBase;
    }());
    fsm_1.CFsmBase = CFsmBase;
    // ===========================================================================================
    /**
     * ...
     * @author auto
     */
    var CFsm = /** @class */ (function (_super) {
        __extends(CFsm, _super);
        function CFsm(name, owner, stateList) {
            var _this = _super.call(this, name) || this;
            _this.m_owner = owner;
            _this.m_states = new Array(stateList.length);
            _this.m_datas = new Object();
            var i = 0;
            for (; i < stateList.length; i++) {
                var fsmState = stateList[i];
                _this.m_states[i] = fsmState;
            }
            _this.m_currentStateTime = 0;
            _this.m_currentState = null;
            _this.m_isDestroyed = false;
            return _this;
        }
        CFsm.prototype.initialize = function () {
            var i = 0;
            for (; i < this.m_states.length; i++) {
                var fsmState = this.m_states[i];
                fsmState.initialize(this);
            }
            this.m_currentStateTime = 0;
            this.m_currentState = null;
            this.m_isDestroyed = false;
        };
        CFsm.prototype.start = function (stateType) {
            if (this.isRunning) {
                throw new Error("fsm is running, can nott start again");
            }
            var state = this.getState(stateType);
            if (state == null) {
                throw new Error("fsm not exist");
            }
            this.m_currentStateTime = 0;
            this.m_currentState = state;
            this.m_currentState.enter(this);
        };
        Object.defineProperty(CFsm.prototype, "owner", {
            get: function () {
                return this.m_owner;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "fsmStateCount", {
            get: function () {
                return this.m_states.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "isRunning", {
            get: function () {
                return this.m_currentState != null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "isDestroyed", {
            get: function () {
                return this.m_isDestroyed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "currentState", {
            get: function () {
                return this.m_currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "currentStateTime", {
            get: function () {
                return this.m_currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CFsm.prototype.hasState = function (stateType) {
            return this.getState(stateType) != null;
        };
        CFsm.prototype.getState = function (stateType) {
            var i = 0;
            for (; i < this.m_states.length; i++) {
                var state = this.m_states[i];
                if (state instanceof stateType) {
                    return state;
                }
            }
            return null;
        };
        CFsm.prototype.getAllState = function () {
            return this.m_states;
        };
        CFsm.prototype.fireEevnt = function (sender, eventID) {
            this.m_currentState.onEvent(this, sender, eventID, null);
        };
        CFsm.prototype.hasData = function (name) {
            return this.getData(name) != null;
        };
        CFsm.prototype.getData = function (name) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            return this.m_datas[name];
        };
        CFsm.prototype.setData = function (name, data) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            this.m_datas[name] = data;
        };
        CFsm.prototype.removeData = function (name) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            delete this.m_datas[name];
        };
        CFsm.prototype.update = function (deltaTime) {
            if (null == this.m_currentState) {
                return;
            }
            this.m_currentStateTime += deltaTime;
            this.m_currentState.update(this, deltaTime);
        };
        CFsm.prototype.shutDown = function () {
            if (null != this.m_currentState) {
                this.m_currentState.leave(this, true);
                this.m_currentState = null;
                this.m_currentStateTime = 0;
            }
            for (var i = 0; i < this.m_states.length; i++) {
                var state = this.m_states[i];
                state.destroy(this);
            }
            this.m_states.length = 0;
            for (var key in this.m_datas) {
                delete this.m_datas[key];
            }
            this.m_isDestroyed = true;
            this.m_pSystem = null;
        };
        CFsm.prototype.changeState = function (stateType) {
            if (null == this.m_currentState) {
                throw new Error("current state is invalid");
            }
            var state = this.getState(stateType);
            if (null == state) {
                throw new Error("fsm can not change state, state is not exist" + stateType);
            }
            this.m_currentState.leave(this, false);
            this.m_currentStateTime = 0;
            this.m_currentState = state;
            this.m_currentState.enter(this);
        };
        Object.defineProperty(CFsm.prototype, "system", {
            get: function () {
                return this.m_pSystem;
            },
            set: function (v) {
                this.m_pSystem = v;
            },
            enumerable: true,
            configurable: true
        });
        return CFsm;
    }(CFsmBase));
    fsm_1.CFsm = CFsm;
    // ===========================================================================================
    /**
     * ...
     * @author
     */
    var CFsmState = /** @class */ (function () {
        function CFsmState() {
        }
        CFsmState.prototype.initialize = function (fsm) {
            this.onInit(fsm);
        };
        CFsmState.prototype.onInit = function (fsm) {
            //log.log('CFsmState ', 'onInit', );
        };
        CFsmState.prototype.enter = function (fsm) {
            this.onEnter(fsm);
        };
        CFsmState.prototype.onEnter = function (fsm) {
            //log.log('CFsmState ', 'onEnter');
        };
        CFsmState.prototype.update = function (fsm, deltaTime) {
            this.onUpdate(fsm, deltaTime);
        };
        CFsmState.prototype.onUpdate = function (fsm, deltaTime) {
        };
        CFsmState.prototype.leave = function (fsm, isShutDown) {
            this.onLeave(fsm, isShutDown);
        };
        CFsmState.prototype.onLeave = function (fsm, isShutDown) {
            //log.log('CFsmState ', 'onLeave');
        };
        CFsmState.prototype.destroy = function (fsm) {
            this.onDestroy(fsm);
        };
        CFsmState.prototype.onDestroy = function (fsm) {
            //log.log('CFsmState ', 'onDestroy');
        };
        CFsmState.prototype.changeState = function (fsm, stateType) {
            var fsmImp = fsm;
            if (null == fsmImp) {
                throw new Error("fsm is invalid");
            }
            if (stateType == null) {
                throw new Error("state type is invalid");
            }
            fsmImp.changeState(stateType);
        };
        CFsmState.prototype.onEvent = function (fsm, sender, eventID, userData) {
        };
        return CFsmState;
    }());
    fsm_1.CFsmState = CFsmState;
    // ===========================================================================================
    var CFsmManager = /** @class */ (function (_super) {
        __extends(CFsmManager, _super);
        function CFsmManager() {
            var _this = _super.call(this) || this;
            _this.m_fsms = new Object();
            return _this;
        }
        CFsmManager.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CFsmManager.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CFsmManager.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            for (var key in this.m_fsms) {
                var fsm_2 = this.m_fsms[key];
                delete this.m_fsms[key];
                if (fsm_2.isDestroyed) {
                    continue;
                }
                fsm_2.shutDown();
            }
            this.m_fsms = null;
        };
        CFsmManager.prototype.update = function (deltaTime) {
            for (var key in this.m_fsms) {
                var fsm_3 = this.m_fsms[key];
                if (fsm_3.isDestroyed) {
                    continue;
                }
                fsm_3.update(deltaTime);
            }
        };
        CFsmManager.prototype.getAllFsms = function () {
            return this.m_fsms;
        };
        CFsmManager.prototype.getFsm = function (name) {
            return this.m_fsms[name];
        };
        CFsmManager.prototype.getFsmByOwnerType = function (clazz) {
            var fsm;
            for (var key in this.m_fsms) {
                fsm = this.m_fsms[key];
                if (fsm.owner instanceof clazz) {
                    return fsm;
                }
            }
            return null;
        };
        CFsmManager.prototype.getFsmsByOwnerType = function (clazz) {
            var ret = new Array();
            var fsm;
            for (var key in this.m_fsms) {
                fsm = this.m_fsms[key];
                if (fsm.owner instanceof clazz) {
                    ret.push(fsm);
                }
            }
            return ret;
        };
        CFsmManager.prototype.createFsm = function (name, owner, stateList) {
            if (this.hasFsm(name)) {
                throw new Error("already exist FSM " + name);
            }
            var fsm = new CFsm(name, owner, stateList);
            fsm.system = this.system;
            fsm.initialize();
            this.m_fsms[name] = fsm;
            // m_fsms.set(name, fsm);
            return fsm;
        };
        CFsmManager.prototype.destroyFsm = function (name) {
            var fsm = this.m_fsms[name];
            if (fsm) {
                fsm.shutDown();
                delete this.m_fsms[name];
                return true;
            }
            return false;
        };
        CFsmManager.prototype.hasFsm = function (name) {
            return this.m_fsms.hasOwnProperty(name);
        };
        return CFsmManager;
    }(frameWork_1.framework.CBean));
    fsm_1.CFsmManager = CFsmManager;
    // ===========================================================================================
    var CFsmSystem = /** @class */ (function (_super) {
        __extends(CFsmSystem, _super);
        function CFsmSystem() {
            return _super.call(this) || this;
        }
        CFsmSystem.prototype.onAwake = function () {
            log_1.log.log('CFsmSystem.onAwake');
            _super.prototype.onAwake.call(this);
            this.m_proceudres = new Object();
            this.m_fsmManager = new CFsmManager();
            this.addBean(this.m_fsmManager);
        };
        CFsmSystem.prototype.onStart = function () {
            log_1.log.log('CFsmSystem.onStart');
            return _super.prototype.onStart.call(this);
        };
        CFsmSystem.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            for (var key in this.m_proceudres) {
                delete this.m_proceudres[key];
            }
            this.m_proceudres = null;
            this.m_fsmManager = null;
        };
        CFsmSystem.prototype.createFsm = function (name, owner, stateList) {
            var fsm = this.m_fsmManager.createFsm(name, owner, stateList);
            return fsm;
        };
        CFsmSystem.prototype.getFsm = function (name) {
            return this.m_fsmManager.getFsm(name);
        };
        CFsmSystem.prototype.destroyFsm = function (name) {
            return this.m_fsmManager.destroyFsm(name);
        };
        CFsmSystem.prototype.hasFsm = function (name) {
            return this.m_fsmManager.hasFsm(name);
        };
        CFsmSystem.prototype.update = function (deltaTime) {
            _super.prototype.update.call(this, deltaTime);
            this.m_fsmManager.update(deltaTime);
        };
        // 流程
        CFsmSystem.prototype.createProcedure = function (name, procedures) {
            log_1.log.log('CFsmSystem add new Procedure => ', name);
            var procedureManager = new procedure_1.procedure.CProcedureManager();
            procedureManager.initialize(name, this.m_fsmManager, procedures);
            this.m_proceudres[name] = procedureManager;
            return procedureManager;
        };
        CFsmSystem.prototype.getProcedure = function (name) {
            return this.m_proceudres[name];
        };
        CFsmSystem.prototype.removeProcedure = function (name) {
            var manager = this.getProcedure(name);
            if (manager) {
                manager.shutDown();
                delete this.m_proceudres[name];
            }
        };
        return CFsmSystem;
    }(frameWork_1.framework.CAppSystem));
    fsm_1.CFsmSystem = CFsmSystem;
    /**
     * ...
     * @author
     */
    var CProcedureBase = /** @class */ (function (_super) {
        __extends(CProcedureBase, _super);
        function CProcedureBase() {
            return _super.call(this) || this;
        }
        CProcedureBase.prototype.onInit = function (fsm) {
            _super.prototype.onInit.call(this, fsm);
        };
        CProcedureBase.prototype.onEnter = function (fsm) {
            _super.prototype.onEnter.call(this, fsm);
        };
        CProcedureBase.prototype.onUpdate = function (fsm, deltaTime) {
            _super.prototype.onUpdate.call(this, fsm, deltaTime);
        };
        CProcedureBase.prototype.onLeave = function (fsm, isShutDown) {
            _super.prototype.onLeave.call(this, fsm, isShutDown);
        };
        CProcedureBase.prototype.onDestroy = function (fsm) {
            _super.prototype.onDestroy.call(this, fsm);
        };
        CProcedureBase.prototype.changeProcedure = function (fsm, stateType) {
            this.changeState(fsm, stateType);
        };
        return CProcedureBase;
    }(fsm.CFsmState));
    fsm_1.CProcedureBase = CProcedureBase;
    // ===================================================================
    var CProcedureManager = /** @class */ (function () {
        function CProcedureManager() {
        }
        Object.defineProperty(CProcedureManager.prototype, "currentProcedure", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CProcedureManager.prototype, "currentProcedureTime", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CProcedureManager.prototype.initialize = function (name, fsmManager, procedures) {
            if (!fsmManager) {
                throw new Error("fsm manager is invalid");
            }
            this.m_name = name;
            this.m_pFsmManager = fsmManager;
            this.m_procedureFsm = this.m_pFsmManager.createFsm(name, this, procedures);
        };
        CProcedureManager.prototype.startProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            this.m_procedureFsm.start(typeProcedure);
        };
        CProcedureManager.prototype.hasProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.hasState(typeProcedure);
        };
        CProcedureManager.prototype.getProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.getState(typeProcedure);
        };
        CProcedureManager.prototype.update = function (deltaTime) {
            // trace("CProcedureManager.update----------------");
        };
        CProcedureManager.prototype.shutDown = function () {
            if (this.m_pFsmManager != null) {
                if (this.m_procedureFsm != null) {
                    this.m_pFsmManager.destroyFsm(this.m_procedureFsm.Name);
                    this.m_procedureFsm = null;
                }
                this.m_pFsmManager = null;
            }
        };
        Object.defineProperty(CProcedureManager.prototype, "name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CProcedureManager;
    }());
    fsm_1.CProcedureManager = CProcedureManager;
})(fsm = exports.fsm || (exports.fsm = {}));
},{"./frameWork":254,"./log":256,"./procedure":258}],250:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lang = /** @class */ (function () {
    function Lang() {
    }
    Lang.Get = function (key, params) {
        if (params === void 0) { params = null; }
        if (Lang.TEST_FIND_ERROR)
            return key;
        if (!Lang._lang)
            return key;
        var value = Lang._lang[key];
        if (value && value.length > 0) {
            if (params) {
                for (var paramKey in params) {
                    var findKey = "{" + paramKey + "}";
                    if (value.indexOf(findKey) != -1) {
                        value = value.replace(findKey, params[paramKey]);
                    }
                }
            }
        }
        else {
            value = key;
        }
        return value;
    };
    Lang.hasKey = function (key) {
        return Lang._lang.hasOwnProperty(key);
    };
    Lang.initialize = function (xml) {
        if (!xml)
            return;
        if (!Lang._lang) {
            Lang._lang = new Object();
            var childNodes = xml.childNodes[0].childNodes;
            var node = void 0;
            for (var i = 0; i < childNodes.length; ++i) {
                node = childNodes[i];
                node.id;
                node.textContent;
                Lang._lang[node.id] = node.textContent;
            }
        }
    };
    Lang.TEST_FIND_ERROR = false;
    return Lang;
}());
exports.default = Lang;
},{}],251:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fsm_1 = require("./fsm");
var procedure;
(function (procedure) {
    /**
     * ...
     * @author
     */
    var CProcedureBase = /** @class */ (function (_super) {
        __extends(CProcedureBase, _super);
        function CProcedureBase() {
            return _super.call(this) || this;
        }
        CProcedureBase.prototype.onInit = function (fsm) {
            _super.prototype.onInit.call(this, fsm);
        };
        CProcedureBase.prototype.onEnter = function (fsm) {
            _super.prototype.onEnter.call(this, fsm);
        };
        CProcedureBase.prototype.onUpdate = function (fsm, deltaTime) {
            _super.prototype.onUpdate.call(this, fsm, deltaTime);
        };
        CProcedureBase.prototype.onLeave = function (fsm, isShutDown) {
            _super.prototype.onLeave.call(this, fsm, isShutDown);
        };
        CProcedureBase.prototype.onDestroy = function (fsm) {
            _super.prototype.onDestroy.call(this, fsm);
        };
        CProcedureBase.prototype.changeProcedure = function (fsm, stateType) {
            this.changeState(fsm, stateType);
        };
        return CProcedureBase;
    }(fsm_1.fsm.CFsmState));
    procedure.CProcedureBase = CProcedureBase;
    // ===================================================================
    var CProcedureManager = /** @class */ (function () {
        function CProcedureManager() {
        }
        Object.defineProperty(CProcedureManager.prototype, "currentProcedure", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CProcedureManager.prototype, "currentProcedureTime", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CProcedureManager.prototype.initialize = function (name, fsmManager, procedures) {
            if (!fsmManager) {
                throw new Error("fsm manager is invalid");
            }
            this.m_name = name;
            this.m_pFsmManager = fsmManager;
            this.m_procedureFsm = this.m_pFsmManager.createFsm(name, this, procedures);
        };
        CProcedureManager.prototype.startProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            this.m_procedureFsm.start(typeProcedure);
        };
        CProcedureManager.prototype.hasProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.hasState(typeProcedure);
        };
        CProcedureManager.prototype.getProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.getState(typeProcedure);
        };
        CProcedureManager.prototype.update = function (deltaTime) {
            // trace("CProcedureManager.update----------------");
        };
        CProcedureManager.prototype.shutDown = function () {
            if (this.m_pFsmManager != null) {
                if (this.m_procedureFsm != null) {
                    this.m_pFsmManager.destroyFsm(this.m_procedureFsm.Name);
                    this.m_procedureFsm = null;
                }
                this.m_pFsmManager = null;
            }
        };
        Object.defineProperty(CProcedureManager.prototype, "name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CProcedureManager;
    }());
    procedure.CProcedureManager = CProcedureManager;
})(procedure = exports.procedure || (exports.procedure = {}));
},{"./fsm":255}],252:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var animation;
(function (animation) {
    var CAnimation = /** @class */ (function () {
        function CAnimation() {
            this.isStop = false;
            this.m_tweeningObjList = [];
        }
        // 动作开始
        CAnimation.prototype.start = function (caller, callback) {
            if (this.isStop) {
                return false;
            }
            this.m_pCaller = caller;
            this.m_pCallback = callback;
            this.onStart();
        };
        CAnimation.prototype.onStart = function () {
        };
        CAnimation.prototype.end = function () {
            this._onFinalA();
            if (this.m_pCallback) {
                this.m_pCallback.call(this.m_pCaller);
            }
        };
        // 停止动作
        CAnimation.prototype.stop = function () {
            this.isStop = true;
            this._onFinalA();
        };
        CAnimation.prototype._onFinalA = function () {
            this.onFinal();
            if (this.m_tweeningObjList && this.m_tweeningObjList.length > 0) {
                for (var _i = 0, _a = this.m_tweeningObjList; _i < _a.length; _i++) {
                    var sp = _a[_i];
                    if (sp) {
                        Laya.Tween.clearAll(sp);
                    }
                }
            }
            this.m_tweeningObjList = null;
        };
        CAnimation.prototype.onFinal = function () {
        };
        CAnimation.prototype._addTweeningObj = function (obj) {
            this.m_tweeningObjList.push(obj);
        };
        CAnimation.prototype._removeTweeningObj = function (obj) {
            for (var i = 0; i < this.m_tweeningObjList.length; ++i) {
                var poker = this.m_tweeningObjList[i];
                if (poker == obj) {
                    this.m_tweeningObjList.splice(i, 1);
                    break;
                }
            }
        };
        return CAnimation;
    }());
    animation.CAnimation = CAnimation;
    // 动画不可重新开始, 要多次执行, 需要重新创建Group
    // group.add(ani);
    // group.start(caller, callback);
    // group stop之后, 每个animation都会调onFinal, 执行末尾工作, 清除动画, 执行该设置的内容
    // group stop 会执行callback
    // animation stop之后, 不会调用callback, 动画链停止
    var CAnimationGroup = /** @class */ (function () {
        function CAnimationGroup() {
            this.finish = false;
            this.m_list = [];
            this.m_curAni = null;
        }
        CAnimationGroup.prototype.add = function (ani) {
            if (this.finish) {
                return;
            }
            if (ani instanceof Array) {
                for (var i = 0; i < ani.length; ++i) {
                    this.m_list[this.m_list.length] = ani[i];
                }
            }
            else {
                this.m_list[this.m_list.length] = ani;
            }
        };
        CAnimationGroup.prototype.start = function (caller, callback) {
            if (this.finish) {
                return;
            }
            this.m_pCaller = caller;
            this.m_pCallback = callback;
            if (!(this._hasNext())) {
                this._onFinish();
                return;
            }
            this._next();
        };
        // not ok
        CAnimationGroup.prototype.stop = function () {
            if (this.finish) {
                return;
            }
            if (this.m_curAni) {
                this.m_curAni.stop();
            }
            while (this.m_list.length > 0) {
                var ani = this.m_list.shift();
                ani.stop();
            }
            this._onFinish();
        };
        CAnimationGroup.prototype._hasNext = function () {
            return this.m_list.length > 0;
        };
        CAnimationGroup.prototype._next = function () {
            var ani = this.m_list.shift();
            this.m_curAni = ani;
            ani.start(this, this._onAniCompleted);
        };
        CAnimationGroup.prototype._onAniCompleted = function (ani) {
            if (this._hasNext()) {
                this._next();
            }
            else {
                this._onFinish();
            }
        };
        CAnimationGroup.prototype._onFinish = function () {
            this.m_list = null;
            this.finish = true;
            this.m_curAni = null;
            if (this.m_pCallback) {
                this.m_pCallback.call(this.m_pCaller);
            }
            this.m_pCallback = null;
            this.m_pCaller = null;
        };
        return CAnimationGroup;
    }());
    animation.CAnimationGroup = CAnimationGroup;
    // 例子
    // this.group = new CAnimationGroup();
    // this.group.add(new MoveAnimation());
    // this.group.start(this, ()=>{
    //     this.group = null;
    // });
    // Laya.timer.once(1000, this, ()=>{
    //     this.group.stop();
    // })
    // class MoveAnimation extends CAnimation {
    // 	onStart() {
    // 		let sp = new Laya.Sprite();
    // 		this.m_sp = sp;
    // 		sp.graphics.drawRect(0, 0, 10, 10, '#ff0000');
    // 		Laya.stage.addChild(sp);
    // 		sp.x = 0;
    // 		sp.y = 0;
    // 		Laya.Tween.to(sp, {x:200}, 5000, Laya.Ease.linearIn, Laya.Handler.create(this, ()=>{
    // 			if (!this.isStop) {
    // 				Laya.Tween.to(sp, {y:200}, 500, Laya.Ease.linearIn, Laya.Handler.create(this, ()=>{
    // 					this.end();
    // 				}))
    // 			}
    // 		}));
    // 	}	
    // 	onFinal() {
    // 		Laya.Tween.clearAll(this.m_sp);
    // 		this.m_sp.x = 200;
    // 		this.m_sp.y = 200;
    // 	}
    // 	private m_sp:Laya.Sprite;
    // }
})(animation = exports.animation || (exports.animation = {}));
},{}],253:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config;
(function (config) {
    /**
     * ...
     * @author
     */
    config.DEBUG = true;
})(config = exports.config || (exports.config = {}));
},{}],254:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var framework;
(function (framework) {
    /**
     * ...
     * @author auto
     */
    var CLifeCycle = /** @class */ (function (_super) {
        __extends(CLifeCycle, _super);
        function CLifeCycle() {
            var _this = _super.call(this) || this;
            _this.m_state = CLifeCycle.STATE_UNREADY;
            return _this;
        }
        // =================================================
        CLifeCycle.prototype.destroy = function () {
            this.onDestroy();
        };
        CLifeCycle.prototype.awake = function () {
            if (this.isUnReady) {
                this.onAwake();
            }
        };
        CLifeCycle.prototype.start = function () {
            return this.onStart();
        };
        // =================================================
        CLifeCycle.prototype.onAwake = function () {
            this.m_state = CLifeCycle.STATE_AWAKED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onAwake", typeName);
        };
        CLifeCycle.prototype.onStart = function () {
            this.m_state = CLifeCycle.STATE_STARTED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onStart", typeName);
            return true;
        };
        CLifeCycle.prototype.onDestroy = function () {
            this.m_state = CLifeCycle.STATE_DESTORYED;
            // let typeName:string = CCommon.getQualifiedClassName(this);
            // CLog.log("{0} onDestroy", typeName);
        };
        Object.defineProperty(CLifeCycle.prototype, "isAwakeState", {
            // =================================================
            get: function () {
                return this.m_state == CLifeCycle.STATE_AWAKED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isUnReady", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_UNREADY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isAwaked", {
            get: function () {
                return this.m_state >= CLifeCycle.STATE_AWAKED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isStarted", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_STARTED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "isDestoryed", {
            get: function () {
                return this.m_state == CLifeCycle.STATE_DESTORYED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CLifeCycle.prototype, "data", {
            get: function () {
                return this.m_dataObject;
            },
            set: function (v) {
                this.m_dataObject = v;
            },
            enumerable: true,
            configurable: true
        });
        CLifeCycle.STATE_UNREADY = -1;
        CLifeCycle.STATE_AWAKED = 0;
        CLifeCycle.STATE_STARTED = 1;
        CLifeCycle.STATE_DESTORYED = 2;
        return CLifeCycle;
    }(Laya.EventDispatcher));
    framework.CLifeCycle = CLifeCycle;
    // =============================================================================================
    /**
     * ...
     * @author auto
     */
    var CContainerLifeCycle = /** @class */ (function (_super) {
        __extends(CContainerLifeCycle, _super);
        function CContainerLifeCycle() {
            var _this = _super.call(this) || this;
            _this.m_beanList = new Array();
            _this.m_unReadyBeanList = new Array();
            _this.m_unStartBeanList = new Array();
            return _this;
        }
        // =================================================
        CContainerLifeCycle.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for (var i = this.m_beanList.length - 1; i >= 0; i--) {
                var o = this.m_beanList[i];
                o.destroy();
            }
        };
        CContainerLifeCycle.prototype.awake = function () {
            _super.prototype.awake.call(this);
            this._awakeUnReadyBean();
        };
        CContainerLifeCycle.prototype._awakeUnReadyBean = function () {
            if (this.m_unReadyBeanList.length > 0) {
                for (var i = 0; i < this.m_unReadyBeanList.length; i++) {
                    var o = this.m_unReadyBeanList[i];
                    o.awake();
                    if (o.isAwaked) {
                        this.m_unReadyBeanList.splice(i, 1);
                        i--;
                        this.m_unStartBeanList.push(o);
                    }
                }
            }
        };
        // 
        CContainerLifeCycle.prototype.start = function () {
            var ret = _super.prototype.start.call(this);
            if (!ret) {
                return ret;
            }
            if (this.m_unStartBeanList.length > 0) {
                for (var i = 0; i < this.m_unStartBeanList.length; i++) {
                    var o = this.m_unStartBeanList[i];
                    ret = o.start();
                    if (!ret) {
                        return ret;
                    }
                    if (o.isStarted) {
                        this.m_unStartBeanList.splice(i, 1);
                        i--;
                    }
                }
            }
            return true;
        };
        // =================================================
        CContainerLifeCycle.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        // onStart如果return false, 则会多次调用直到为true
        CContainerLifeCycle.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CContainerLifeCycle.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
        };
        // =================================================
        CContainerLifeCycle.prototype.getBean = function (clz) {
            if (this.m_beanList) {
                for (var i = 0; i < this.m_beanList.length; i++) {
                    var o = this.m_beanList[i];
                    if (o instanceof clz) {
                        return o;
                    }
                }
            }
            return null;
        };
        CContainerLifeCycle.prototype.getBeans = function () {
            return this.m_beanList;
        };
        CContainerLifeCycle.prototype.removeBean = function (b) {
            if (!b) {
                return false;
            }
            var index = this.m_beanList.indexOf(b);
            if (-1 == index) {
                return false;
            }
            this.m_beanList.splice(index, 1);
            index = this.m_unReadyBeanList.indexOf(b);
            if (-1 != index) {
                this.m_unReadyBeanList.splice(index, 1);
            }
            index = this.m_unStartBeanList.indexOf(b);
            if (-1 != index) {
                this.m_unStartBeanList.splice(index, 1);
            }
            return true;
        };
        CContainerLifeCycle.prototype.addBean = function (o) {
            if (!o) {
                return false;
            }
            if (this.contains(o)) {
                return false;
            }
            this.m_beanList.push(o);
            this.m_unReadyBeanList.push(o);
            return true;
        };
        CContainerLifeCycle.prototype.contains = function (o) {
            for (var i = 0; i < this.m_beanList.length; i++) {
                var b = this.m_beanList[i];
                if (b == o) {
                    return true;
                }
            }
            return false;
        };
        return CContainerLifeCycle;
    }(CLifeCycle));
    framework.CContainerLifeCycle = CContainerLifeCycle;
    // =============================================================================================
    /**
     * ...
     * @author
     */
    var CBean = /** @class */ (function (_super) {
        __extends(CBean, _super);
        function CBean() {
            return _super.call(this) || this;
        }
        CBean.prototype.addBean = function (o) {
            var ret = _super.prototype.addBean.call(this, o);
            if (ret) {
                o.system = this.system;
            }
            return ret;
        };
        CBean.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CBean.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CBean.prototype.onDestroy = function () {
            this.m_system = null;
            _super.prototype.onDestroy.call(this);
        };
        Object.defineProperty(CBean.prototype, "system", {
            get: function () {
                return this.m_system;
            },
            set: function (v) {
                this.m_system = v;
            },
            enumerable: true,
            configurable: true
        });
        return CBean;
    }(CContainerLifeCycle));
    framework.CBean = CBean;
    // =============================================================================================
    /**
     * ...
     * @author auto
     */
    var CAppSystem = /** @class */ (function (_super) {
        __extends(CAppSystem, _super);
        function CAppSystem() {
            return _super.call(this) || this;
        }
        CAppSystem.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CAppSystem.prototype.onStart = function () {
            var ret = _super.prototype.onStart.call(this);
            return ret;
        };
        CAppSystem.prototype.onDestroy = function () {
            this.m_stage = null;
            _super.prototype.onDestroy.call(this);
            // this.m_viewList = null;
        };
        // view
        // getAllViewBean() : Array<CViewBean> {
        // 	return m_viewList;
        // }
        CAppSystem.prototype.update = function (delta) {
            // if (m_viewList) {
            // 	for each (let view:CViewBean in m_viewList) {
            // 		if (view && view.isStarted) {
            // 			if (view.isDirty) {
            // 				view.updateData(delta);
            // 			}
            // 		}
            // 	}
            // }
        };
        CAppSystem.prototype.addBean = function (o) {
            var ret = _super.prototype.addBean.call(this, o);
            if (ret) {
                o.system = this;
            }
            // if (o is CViewBean) {
            // 	if (!m_viewList) {
            // 		m_viewList = new Array<CViewBean>();
            // 	}
            // 	m_viewList.push(o);
            // }
            return ret;
        };
        CAppSystem.prototype.removeBean = function (b) {
            var ret = _super.prototype.removeBean.call(this, b);
            // if (b is CViewBean) {
            // 	let idx:int = m_viewList.indexOf(b as CViewBean);
            // 	m_viewList.splice(idx, 1);
            // }
            return ret;
        };
        Object.defineProperty(CAppSystem.prototype, "stage", {
            get: function () {
                return this.m_stage;
            },
            set: function (v) {
                this.m_stage = v;
            },
            enumerable: true,
            configurable: true
        });
        return CAppSystem;
    }(CContainerLifeCycle));
    framework.CAppSystem = CAppSystem;
    // =============================================================================================
    /**
     ...
    1.update/fixUpdate : 继承IUpdate/IFixUpdate的system, 会自动调用update与fixUpdate, 并不会往下自动调用(避免调用太多无用的update)
    2.在OnAwake中addBean的节点, 会自动启动, 其他的需要自行调用awake与start:
    如 : (在awake之外添加)
        addBean(b);
        b.awake();
        b.start();
    * @author auto
    */
    var CAppStage = /** @class */ (function (_super) {
        __extends(CAppStage, _super);
        function CAppStage() {
            return _super.call(this) || this;
        }
        CAppStage.prototype.update = function (deltaTime) {
            var b;
            var beans = this.getBeans();
            var iCount = beans.length;
            for (var i = 0; i < iCount; i++) {
                b = beans[i];
                if (b.isStarted) {
                    var iupdate = b['update'];
                    if (iupdate) {
                        b['update'](deltaTime);
                    }
                }
            }
        };
        CAppStage.prototype.fixUpdate = function (fixTime) {
            var b;
            var beans = this.getBeans();
            var iCount = beans.length;
            for (var i = 0; i < iCount; i++) {
                b = beans[i];
                if (b.isStarted) {
                    var iupdate = b['fixUpdate'];
                    if (iupdate) {
                        b['fixUpdate'](fixTime);
                    }
                }
            }
        };
        CAppStage.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CAppStage.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CAppStage.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
        };
        CAppStage.prototype.getSystem = function (clazz) {
            return this.getBean(clazz);
        };
        CAppStage.prototype.addSystem = function (sys) {
            if (this.addBean(sys)) {
                sys.stage = this;
            }
            return false;
        };
        CAppStage.prototype.removeSystem = function (sys) {
            return this.removeBean(sys);
        };
        return CAppStage;
    }(CContainerLifeCycle));
    framework.CAppStage = CAppStage;
    // =============================================================================================
})(framework = exports.framework || (exports.framework = {}));
},{}],255:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frameWork_1 = require("./frameWork");
var procedure_1 = require("./procedure");
var log_1 = require("./log");
var fsm;
(function (fsm_1) {
    /**
     * ...
     * @author
     */
    var CFsmBase = /** @class */ (function () {
        function CFsmBase(name) {
            this.m_name = name;
        }
        Object.defineProperty(CFsmBase.prototype, "Name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CFsmBase;
    }());
    fsm_1.CFsmBase = CFsmBase;
    // ===========================================================================================
    /**
     * ...
     * @author auto
     */
    var CFsm = /** @class */ (function (_super) {
        __extends(CFsm, _super);
        function CFsm(name, owner, stateList) {
            var _this = _super.call(this, name) || this;
            _this.m_owner = owner;
            _this.m_states = new Array(stateList.length);
            _this.m_datas = new Object();
            var i = 0;
            for (; i < stateList.length; i++) {
                var fsmState = stateList[i];
                _this.m_states[i] = fsmState;
            }
            _this.m_currentStateTime = 0;
            _this.m_currentState = null;
            _this.m_isDestroyed = false;
            return _this;
        }
        CFsm.prototype.initialize = function () {
            var i = 0;
            for (; i < this.m_states.length; i++) {
                var fsmState = this.m_states[i];
                fsmState.initialize(this);
            }
            this.m_currentStateTime = 0;
            this.m_currentState = null;
            this.m_isDestroyed = false;
        };
        CFsm.prototype.start = function (stateType) {
            if (this.isRunning) {
                throw new Error("fsm is running, can nott start again");
            }
            var state = this.getState(stateType);
            if (state == null) {
                throw new Error("fsm not exist");
            }
            this.m_currentStateTime = 0;
            this.m_currentState = state;
            this.m_currentState.enter(this);
        };
        Object.defineProperty(CFsm.prototype, "owner", {
            get: function () {
                return this.m_owner;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "fsmStateCount", {
            get: function () {
                return this.m_states.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "isRunning", {
            get: function () {
                return this.m_currentState != null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "isDestroyed", {
            get: function () {
                return this.m_isDestroyed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "currentState", {
            get: function () {
                return this.m_currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CFsm.prototype, "currentStateTime", {
            get: function () {
                return this.m_currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CFsm.prototype.hasState = function (stateType) {
            return this.getState(stateType) != null;
        };
        CFsm.prototype.getState = function (stateType) {
            var i = 0;
            for (; i < this.m_states.length; i++) {
                var state = this.m_states[i];
                if (state instanceof stateType) {
                    return state;
                }
            }
            return null;
        };
        CFsm.prototype.getAllState = function () {
            return this.m_states;
        };
        CFsm.prototype.fireEevnt = function (sender, eventID) {
            this.m_currentState.onEvent(this, sender, eventID, null);
        };
        CFsm.prototype.hasData = function (name) {
            return this.getData(name) != null;
        };
        CFsm.prototype.getData = function (name) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            return this.m_datas[name];
        };
        CFsm.prototype.setData = function (name, data) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            this.m_datas[name] = data;
        };
        CFsm.prototype.removeData = function (name) {
            if (name == null || name.length == 0) {
                throw new Error("name is invalid");
            }
            delete this.m_datas[name];
        };
        CFsm.prototype.update = function (deltaTime) {
            if (null == this.m_currentState) {
                return;
            }
            this.m_currentStateTime += deltaTime;
            this.m_currentState.update(this, deltaTime);
        };
        CFsm.prototype.shutDown = function () {
            if (null != this.m_currentState) {
                this.m_currentState.leave(this, true);
                this.m_currentState = null;
                this.m_currentStateTime = 0;
            }
            for (var i = 0; i < this.m_states.length; i++) {
                var state = this.m_states[i];
                state.destroy(this);
            }
            this.m_states.length = 0;
            for (var key in this.m_datas) {
                delete this.m_datas[key];
            }
            this.m_isDestroyed = true;
            this.m_pSystem = null;
        };
        CFsm.prototype.changeState = function (stateType) {
            if (null == this.m_currentState) {
                throw new Error("current state is invalid");
            }
            var state = this.getState(stateType);
            if (null == state) {
                throw new Error("fsm can not change state, state is not exist" + stateType);
            }
            this.m_currentState.leave(this, false);
            this.m_currentStateTime = 0;
            this.m_currentState = state;
            this.m_currentState.enter(this);
        };
        Object.defineProperty(CFsm.prototype, "system", {
            get: function () {
                return this.m_pSystem;
            },
            set: function (v) {
                this.m_pSystem = v;
            },
            enumerable: true,
            configurable: true
        });
        return CFsm;
    }(CFsmBase));
    fsm_1.CFsm = CFsm;
    // ===========================================================================================
    /**
     * ...
     * @author
     */
    var CFsmState = /** @class */ (function () {
        function CFsmState() {
        }
        CFsmState.prototype.initialize = function (fsm) {
            this.onInit(fsm);
        };
        CFsmState.prototype.onInit = function (fsm) {
            //log.log('CFsmState ', 'onInit', );
        };
        CFsmState.prototype.enter = function (fsm) {
            this.onEnter(fsm);
        };
        CFsmState.prototype.onEnter = function (fsm) {
            //log.log('CFsmState ', 'onEnter');
        };
        CFsmState.prototype.update = function (fsm, deltaTime) {
            this.onUpdate(fsm, deltaTime);
        };
        CFsmState.prototype.onUpdate = function (fsm, deltaTime) {
        };
        CFsmState.prototype.leave = function (fsm, isShutDown) {
            this.onLeave(fsm, isShutDown);
        };
        CFsmState.prototype.onLeave = function (fsm, isShutDown) {
            //log.log('CFsmState ', 'onLeave');
        };
        CFsmState.prototype.destroy = function (fsm) {
            this.onDestroy(fsm);
        };
        CFsmState.prototype.onDestroy = function (fsm) {
            //log.log('CFsmState ', 'onDestroy');
        };
        CFsmState.prototype.changeState = function (fsm, stateType) {
            var fsmImp = fsm;
            if (null == fsmImp) {
                throw new Error("fsm is invalid");
            }
            if (stateType == null) {
                throw new Error("state type is invalid");
            }
            fsmImp.changeState(stateType);
        };
        CFsmState.prototype.onEvent = function (fsm, sender, eventID, userData) {
        };
        return CFsmState;
    }());
    fsm_1.CFsmState = CFsmState;
    // ===========================================================================================
    var CFsmManager = /** @class */ (function (_super) {
        __extends(CFsmManager, _super);
        function CFsmManager() {
            var _this = _super.call(this) || this;
            _this.m_fsms = new Object();
            return _this;
        }
        CFsmManager.prototype.onAwake = function () {
            _super.prototype.onAwake.call(this);
        };
        CFsmManager.prototype.onStart = function () {
            return _super.prototype.onStart.call(this);
        };
        CFsmManager.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            for (var key in this.m_fsms) {
                var fsm_2 = this.m_fsms[key];
                delete this.m_fsms[key];
                if (fsm_2.isDestroyed) {
                    continue;
                }
                fsm_2.shutDown();
            }
            this.m_fsms = null;
        };
        CFsmManager.prototype.update = function (deltaTime) {
            for (var key in this.m_fsms) {
                var fsm_3 = this.m_fsms[key];
                if (fsm_3.isDestroyed) {
                    continue;
                }
                fsm_3.update(deltaTime);
            }
        };
        CFsmManager.prototype.getAllFsms = function () {
            return this.m_fsms;
        };
        CFsmManager.prototype.getFsm = function (name) {
            return this.m_fsms[name];
        };
        CFsmManager.prototype.getFsmByOwnerType = function (clazz) {
            var fsm;
            for (var key in this.m_fsms) {
                fsm = this.m_fsms[key];
                if (fsm.owner instanceof clazz) {
                    return fsm;
                }
            }
            return null;
        };
        CFsmManager.prototype.getFsmsByOwnerType = function (clazz) {
            var ret = new Array();
            var fsm;
            for (var key in this.m_fsms) {
                fsm = this.m_fsms[key];
                if (fsm.owner instanceof clazz) {
                    ret.push(fsm);
                }
            }
            return ret;
        };
        CFsmManager.prototype.createFsm = function (name, owner, stateList) {
            if (this.hasFsm(name)) {
                throw new Error("already exist FSM " + name);
            }
            var fsm = new CFsm(name, owner, stateList);
            fsm.system = this.system;
            fsm.initialize();
            this.m_fsms[name] = fsm;
            // m_fsms.set(name, fsm);
            return fsm;
        };
        CFsmManager.prototype.destroyFsm = function (name) {
            var fsm = this.m_fsms[name];
            if (fsm) {
                fsm.shutDown();
                delete this.m_fsms[name];
                return true;
            }
            return false;
        };
        CFsmManager.prototype.hasFsm = function (name) {
            return this.m_fsms.hasOwnProperty(name);
        };
        return CFsmManager;
    }(frameWork_1.framework.CBean));
    fsm_1.CFsmManager = CFsmManager;
    // ===========================================================================================
    var CFsmSystem = /** @class */ (function (_super) {
        __extends(CFsmSystem, _super);
        function CFsmSystem() {
            return _super.call(this) || this;
        }
        CFsmSystem.prototype.onAwake = function () {
            log_1.log.log('CFsmSystem.onAwake');
            _super.prototype.onAwake.call(this);
            this.m_proceudres = new Object();
            this.m_fsmManager = new CFsmManager();
            this.addBean(this.m_fsmManager);
        };
        CFsmSystem.prototype.onStart = function () {
            log_1.log.log('CFsmSystem.onStart');
            return _super.prototype.onStart.call(this);
        };
        CFsmSystem.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            for (var key in this.m_proceudres) {
                delete this.m_proceudres[key];
            }
            this.m_proceudres = null;
            this.m_fsmManager = null;
        };
        CFsmSystem.prototype.createFsm = function (name, owner, stateList) {
            var fsm = this.m_fsmManager.createFsm(name, owner, stateList);
            return fsm;
        };
        CFsmSystem.prototype.getFsm = function (name) {
            return this.m_fsmManager.getFsm(name);
        };
        CFsmSystem.prototype.destroyFsm = function (name) {
            return this.m_fsmManager.destroyFsm(name);
        };
        CFsmSystem.prototype.hasFsm = function (name) {
            return this.m_fsmManager.hasFsm(name);
        };
        CFsmSystem.prototype.update = function (deltaTime) {
            _super.prototype.update.call(this, deltaTime);
            this.m_fsmManager.update(deltaTime);
        };
        // 流程
        CFsmSystem.prototype.createProcedure = function (name, procedures) {
            log_1.log.log('CFsmSystem add new Procedure => ', name);
            var procedureManager = new procedure_1.procedure.CProcedureManager();
            procedureManager.initialize(name, this.m_fsmManager, procedures);
            this.m_proceudres[name] = procedureManager;
            return procedureManager;
        };
        CFsmSystem.prototype.getProcedure = function (name) {
            return this.m_proceudres[name];
        };
        CFsmSystem.prototype.removeProcedure = function (name) {
            var manager = this.getProcedure(name);
            if (manager) {
                manager.shutDown();
                delete this.m_proceudres[name];
            }
        };
        return CFsmSystem;
    }(frameWork_1.framework.CAppSystem));
    fsm_1.CFsmSystem = CFsmSystem;
    /**
     * ...
     * @author
     */
    var CProcedureBase = /** @class */ (function (_super) {
        __extends(CProcedureBase, _super);
        function CProcedureBase() {
            return _super.call(this) || this;
        }
        CProcedureBase.prototype.onInit = function (fsm) {
            _super.prototype.onInit.call(this, fsm);
        };
        CProcedureBase.prototype.onEnter = function (fsm) {
            _super.prototype.onEnter.call(this, fsm);
        };
        CProcedureBase.prototype.onUpdate = function (fsm, deltaTime) {
            _super.prototype.onUpdate.call(this, fsm, deltaTime);
        };
        CProcedureBase.prototype.onLeave = function (fsm, isShutDown) {
            _super.prototype.onLeave.call(this, fsm, isShutDown);
        };
        CProcedureBase.prototype.onDestroy = function (fsm) {
            _super.prototype.onDestroy.call(this, fsm);
        };
        CProcedureBase.prototype.changeProcedure = function (fsm, stateType) {
            this.changeState(fsm, stateType);
        };
        return CProcedureBase;
    }(fsm.CFsmState));
    fsm_1.CProcedureBase = CProcedureBase;
    // ===================================================================
    var CProcedureManager = /** @class */ (function () {
        function CProcedureManager() {
        }
        Object.defineProperty(CProcedureManager.prototype, "currentProcedure", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CProcedureManager.prototype, "currentProcedureTime", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CProcedureManager.prototype.initialize = function (name, fsmManager, procedures) {
            if (!fsmManager) {
                throw new Error("fsm manager is invalid");
            }
            this.m_name = name;
            this.m_pFsmManager = fsmManager;
            this.m_procedureFsm = this.m_pFsmManager.createFsm(name, this, procedures);
        };
        CProcedureManager.prototype.startProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            this.m_procedureFsm.start(typeProcedure);
        };
        CProcedureManager.prototype.hasProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.hasState(typeProcedure);
        };
        CProcedureManager.prototype.getProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.getState(typeProcedure);
        };
        CProcedureManager.prototype.update = function (deltaTime) {
            // trace("CProcedureManager.update----------------");
        };
        CProcedureManager.prototype.shutDown = function () {
            if (this.m_pFsmManager != null) {
                if (this.m_procedureFsm != null) {
                    this.m_pFsmManager.destroyFsm(this.m_procedureFsm.Name);
                    this.m_procedureFsm = null;
                }
                this.m_pFsmManager = null;
            }
        };
        Object.defineProperty(CProcedureManager.prototype, "name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CProcedureManager;
    }());
    fsm_1.CProcedureManager = CProcedureManager;
})(fsm = exports.fsm || (exports.fsm = {}));
},{"./frameWork":254,"./log":256,"./procedure":258}],256:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var log;
(function (log_1) {
    /**
     * ...
     * @author
     */
    function log(msg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!config_1.config.DEBUG)
            return;
        if (args && args.length > 0) {
            for (var i = 0; i < args.length; i++) {
                var matchString = "{" + i + "}";
                var index = msg.indexOf(matchString);
                if (index == -1) {
                    msg += args[i];
                }
                else {
                    msg = msg.replace("{" + i + "}", args[i]);
                }
            }
        }
        console.log(msg);
    }
    log_1.log = log;
    function logObj(msg, obj, other) {
        if (other === void 0) { other = null; }
        if (!config_1.config.DEBUG)
            return;
        if (other && other.length > 0) {
            log(msg, JSON.stringify(obj), other);
        }
        else {
            log(msg, JSON.stringify(obj));
        }
    }
    log_1.logObj = logObj;
})(log = exports.log || (exports.log = {}));
},{"./config":253}],257:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FrameWork_1 = require("./FrameWork");
var log_1 = require("./log");
// import framework from '../framework/FrameWork';
var pool;
(function (pool) {
    /**
     * ...
     * @author auto
     */
    var CPoolBean = /** @class */ (function (_super) {
        __extends(CPoolBean, _super);
        function CPoolBean(sign, type) {
            var _this = _super.call(this) || this;
            _this.m_type = type;
            _this.m_sign = sign;
            return _this;
        }
        Object.defineProperty(CPoolBean.prototype, "sign", {
            get: function () {
                return this.m_sign;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CPoolBean.prototype, "type", {
            get: function () {
                return this.m_type;
            },
            enumerable: true,
            configurable: true
        });
        CPoolBean.prototype.createObject = function () {
            var item = Laya.Pool.getItemByClass(this.sign, this.type);
            var reset = item["reset"];
            if (reset) {
                item.reset();
            }
            return item;
        };
        CPoolBean.prototype.recoverObject = function (item) {
            var dispose = item["dispose"];
            if (dispose) {
                item.dispose();
            }
            Laya.Pool.recover(this.sign, item);
        };
        return CPoolBean;
    }(FrameWork_1.framework.CBean));
    pool.CPoolBean = CPoolBean;
    // ==================================================================================
    var CPoolSystem = /** @class */ (function (_super) {
        __extends(CPoolSystem, _super);
        function CPoolSystem() {
            return _super.call(this) || this;
        }
        CPoolSystem.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            Laya.CacheManger.stopCheck();
            this.forceReleaseExternsPool();
        };
        CPoolSystem.prototype.onAwake = function () {
            log_1.log.log('CPoolSystem.onAwake');
            _super.prototype.onAwake.call(this);
        };
        CPoolSystem.prototype.onStart = function () {
            var ret = _super.prototype.onStart.call(this);
            // 检查并清除超出maxCount的元素
            Laya.CacheManger.beginCheck();
            log_1.log.log('CPoolSystem.onStart');
            return ret;
        };
        // 清除所有内存池资源, 只清理CPoolBean管理的
        CPoolSystem.prototype.removeAllPoolMemory = function () {
            var beanList = this.getBeans();
            var sign;
            for (var _i = 0, beanList_1 = beanList; _i < beanList_1.length; _i++) {
                var bean = beanList_1[_i];
                sign = bean.sign;
                Laya.Pool.clearBySign(sign);
            }
        };
        CPoolSystem.prototype.removePoolMemory = function (sign) {
            // 因为边界检测没法清除. 如果移除poolBean, 则会导致下次addPool时, 会再增加一个边界检测, 
            // let poolBean:CPoolBean = this.getPool(sign);
            // if (poolBean) {
            // 	this.removeBean(poolBean);
            // 	// 边界检测没法清除
            // }
            // 清除内存池资源
            Laya.Pool.clearBySign(sign);
        };
        CPoolSystem.prototype.addPool = function (sign, type, maxCount) {
            if (maxCount === void 0) { maxCount = 100; }
            // 使用PoolCache.addPoolCacheManager 添加pool, 可将pool交给CacheManager管理
            var poolBean = this.getPool(sign);
            if (!poolBean) {
                poolBean = new CPoolBean(sign, type);
                this.addBean(poolBean);
                poolBean.awake();
                poolBean.start();
                Laya.PoolCache.addPoolCacheManager(sign, maxCount);
            }
            return poolBean;
        };
        CPoolSystem.prototype.getPool = function (sign) {
            var beans = this.getBeans();
            for (var _i = 0, beans_1 = beans; _i < beans_1.length; _i++) {
                var bean = beans_1[_i];
                if (bean instanceof CPoolBean) {
                    var poolBean = bean;
                    if (poolBean.sign == sign) {
                        return poolBean;
                    }
                }
            }
            return null;
        };
        // 创建对象和回收对象, 与使用CPoolBean是一样的, 只不过CPoolBean保存了pool的类型
        // 使用以下方法, 不会定时清理超过边界的内存
        CPoolSystem.prototype.createObject = function (flag, clazz) {
            var item = Laya.Pool.getItemByClass(flag, clazz);
            return item;
        };
        CPoolSystem.prototype.recoverObject = function (flag, item) {
            Laya.Pool.recover(flag, item);
        };
        // 强制清除超出的pool, 但内部没处理, 只有清除超出maxCount的
        CPoolSystem.prototype.forceReleaseExternsPool = function () {
            Laya.CacheManger.forceDispose();
        };
        return CPoolSystem;
    }(FrameWork_1.framework.CAppSystem));
    pool.CPoolSystem = CPoolSystem;
})(pool = exports.pool || (exports.pool = {}));
},{"./FrameWork":248,"./log":256}],258:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fsm_1 = require("./fsm");
var procedure;
(function (procedure) {
    /**
     * ...
     * @author
     */
    var CProcedureBase = /** @class */ (function (_super) {
        __extends(CProcedureBase, _super);
        function CProcedureBase() {
            return _super.call(this) || this;
        }
        CProcedureBase.prototype.onInit = function (fsm) {
            _super.prototype.onInit.call(this, fsm);
        };
        CProcedureBase.prototype.onEnter = function (fsm) {
            _super.prototype.onEnter.call(this, fsm);
        };
        CProcedureBase.prototype.onUpdate = function (fsm, deltaTime) {
            _super.prototype.onUpdate.call(this, fsm, deltaTime);
        };
        CProcedureBase.prototype.onLeave = function (fsm, isShutDown) {
            _super.prototype.onLeave.call(this, fsm, isShutDown);
        };
        CProcedureBase.prototype.onDestroy = function (fsm) {
            _super.prototype.onDestroy.call(this, fsm);
        };
        CProcedureBase.prototype.changeProcedure = function (fsm, stateType) {
            this.changeState(fsm, stateType);
        };
        return CProcedureBase;
    }(fsm_1.fsm.CFsmState));
    procedure.CProcedureBase = CProcedureBase;
    // ===================================================================
    var CProcedureManager = /** @class */ (function () {
        function CProcedureManager() {
        }
        Object.defineProperty(CProcedureManager.prototype, "currentProcedure", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CProcedureManager.prototype, "currentProcedureTime", {
            get: function () {
                if (this.m_procedureFsm == null) {
                    throw new Error("you must iniialize procedure first");
                }
                return this.m_procedureFsm.currentStateTime;
            },
            enumerable: true,
            configurable: true
        });
        CProcedureManager.prototype.initialize = function (name, fsmManager, procedures) {
            if (!fsmManager) {
                throw new Error("fsm manager is invalid");
            }
            this.m_name = name;
            this.m_pFsmManager = fsmManager;
            this.m_procedureFsm = this.m_pFsmManager.createFsm(name, this, procedures);
        };
        CProcedureManager.prototype.startProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            this.m_procedureFsm.start(typeProcedure);
        };
        CProcedureManager.prototype.hasProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.hasState(typeProcedure);
        };
        CProcedureManager.prototype.getProcedure = function (typeProcedure) {
            if (this.m_procedureFsm == null) {
                throw new Error("you must iniialize procedure first");
            }
            return this.m_procedureFsm.getState(typeProcedure);
        };
        CProcedureManager.prototype.update = function (deltaTime) {
            // trace("CProcedureManager.update----------------");
        };
        CProcedureManager.prototype.shutDown = function () {
            if (this.m_pFsmManager != null) {
                if (this.m_procedureFsm != null) {
                    this.m_pFsmManager.destroyFsm(this.m_procedureFsm.Name);
                    this.m_procedureFsm = null;
                }
                this.m_pFsmManager = null;
            }
        };
        Object.defineProperty(CProcedureManager.prototype, "name", {
            get: function () {
                return this.m_name;
            },
            enumerable: true,
            configurable: true
        });
        return CProcedureManager;
    }());
    procedure.CProcedureManager = CProcedureManager;
})(procedure = exports.procedure || (exports.procedure = {}));
},{"./fsm":255}],259:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FrameWork_1 = require("./FrameWork");
var log_1 = require("./log");
var sequential;
(function (sequential) {
    /**
     * ...
     * @author auto
     串行流程
        */
    var CSequentialProcedureManager = /** @class */ (function () {
        function CSequentialProcedureManager() {
            this.m_procedureInfoList = new Array();
            this.reset();
        }
        CSequentialProcedureManager.prototype.reset = function () {
            this.m_isRunning = false;
            this.m_procedureInfoList.length = 0;
            this.m_currentProcedureInfo = null;
            this.m_finishCallback = null;
            Laya.timer.clear(this, this._onUpdate);
        };
        CSequentialProcedureManager.prototype.destroy = function () {
            this.m_isRunning = false;
            this.m_currentProcedureInfo = null;
            this.m_procedureInfoList = null;
            Laya.timer.clear(this, this._onUpdate);
        };
        // handler == checkFinishHandler == null : 则直接通过 -> 没意义
        // handler == null, checkFinishHandler != null, 则checkFinishHandler返回true, 通过 -> 用于等待某个条件完成
        // handler != null, checkFinishHandler == null, 执行一次handler, 然后通过 -> 用于调用一次handler, 和普通函数调用一置
        // handler != null, checkFinishHandler != null, 执行一次handler, 并等待checkFinishHandler返回true, 通过
        // 注意checkFinishHandler的once要设成false
        CSequentialProcedureManager.prototype.addSequential = function (handler, checkFinishHandler) {
            this.m_procedureInfoList[this.m_procedureInfoList.length] = new _CProcedureInfo(handler, checkFinishHandler);
            if (!this.m_isRunning) {
                this.m_isRunning = true;
                Laya.timer.frameLoop(1, this, this._onUpdate);
            }
        };
        CSequentialProcedureManager.prototype._onUpdate = function () {
            if (!this.m_currentProcedureInfo && this.m_procedureInfoList.length > 0) {
                this.m_currentProcedureInfo = this.m_procedureInfoList.shift();
                if (this.m_currentProcedureInfo.handler) {
                    this.m_currentProcedureInfo.handler.run();
                }
            }
            if (this.m_currentProcedureInfo) {
                if (this.m_currentProcedureInfo.checkFinishHandler) {
                    if (this.m_currentProcedureInfo.checkFinishHandler.run()) {
                        // finish返回true, 完成
                        this.m_currentProcedureInfo = null;
                    }
                }
                else {
                    // 没有finish直接完成
                    this.m_currentProcedureInfo = null;
                }
            }
            if (!this.m_currentProcedureInfo && this.m_procedureInfoList.length == 0) {
                // stop
                this.m_isRunning = false;
                Laya.timer.clear(this, this._onUpdate);
                if (null != this.m_finishCallback) {
                    this.m_finishCallback.run();
                }
                return;
            }
        };
        Object.defineProperty(CSequentialProcedureManager.prototype, "finishCallback", {
            set: function (v) {
                this.m_finishCallback = v;
            },
            enumerable: true,
            configurable: true
        });
        return CSequentialProcedureManager;
    }());
    sequential.CSequentialProcedureManager = CSequentialProcedureManager;
    var _CProcedureInfo = /** @class */ (function () {
        function _CProcedureInfo(handler, checkFinishHandler) {
            this.handler = handler;
            this.checkFinishHandler = checkFinishHandler;
        }
        return _CProcedureInfo;
    }());
    // ============================================================================
    var CSequentiaProcedureSystem = /** @class */ (function (_super) {
        __extends(CSequentiaProcedureSystem, _super);
        function CSequentiaProcedureSystem() {
            return _super.call(this) || this;
        }
        CSequentiaProcedureSystem.prototype.onAwake = function () {
            log_1.log.log('CSequentiaProcedureSystem.onAwake');
            _super.prototype.onAwake.call(this);
            this.m_list = new ProcedureInfoList();
        };
        CSequentiaProcedureSystem.prototype.onStart = function () {
            log_1.log.log('CSequentiaProcedureSystem.onStart');
            return _super.prototype.onStart.call(this);
        };
        CSequentiaProcedureSystem.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            this.m_list.destroy();
            this.m_list = null;
        };
        // handler == checkFinishHandler == null : 则直接通过 -> 没意义
        // handler == null, checkFinishHandler != null, 则checkFinishHandler返回true, 通过 -> 用于等待某个条件完成
        // handler != null, checkFinishHandler == null, 执行一次handler, 然后通过 -> 用于调用一次handler, 和普通函数调用一置
        // handler != null, checkFinishHandler != null, 执行一次handler, 并等待checkFinishHandler返回true, 通过
        // 注意checkFinishHandler的once要设成false	
        // 调用addSequential(xx, handler, checkhandker);
        //		1.先执行handle
        //		2.执行checkHandler, 直到checkHandler为true, 完成
        // 每个caller，会创建一个流程, 为一组
        CSequentiaProcedureSystem.prototype.addSequential = function (caller, handler, checkFinishHandler) {
            var info = this.m_list.find(caller);
            if (!info) {
                info = this.m_list.create();
                info.isIdle = false;
                info.caller = caller;
                info.procedureManager.finishCallback = Laya.Handler.create(this, this._onSequnentialFinish, [caller]);
            }
            info.procedureManager.addSequential(handler, checkFinishHandler);
        };
        CSequentiaProcedureSystem.prototype._onSequnentialFinish = function (caller) {
            this.m_list.recycle(caller);
        };
        return CSequentiaProcedureSystem;
    }(FrameWork_1.framework.CAppSystem));
    sequential.CSequentiaProcedureSystem = CSequentiaProcedureSystem;
    var ProcedureInfoList = /** @class */ (function () {
        function ProcedureInfoList() {
            this.m_list = new Array();
        }
        ProcedureInfoList.prototype.destroy = function () {
            var i = 0;
            var len = this.m_list.length;
            var info;
            for (; i < len; i++) {
                info = this.m_list[i];
                info.procedureManager.destroy();
                info.reset();
                info.procedureManager = null;
            }
            this.m_list.length = 0;
            this.m_list = null;
        };
        ProcedureInfoList.prototype.remove = function (caller) {
            var i = 0;
            var len = this.m_list.length;
            var info;
            for (; i < len; i++) {
                info = this.m_list[i];
                if (info.caller == caller) {
                    this.m_list.splice(i, 1);
                    break;
                }
            }
        };
        ProcedureInfoList.prototype.find = function (caller) {
            var i = 0;
            var len = this.m_list.length;
            var info;
            for (; i < len; i++) {
                info = this.m_list[i];
                if (info.caller == caller) {
                    return info;
                }
            }
            return null;
        };
        ProcedureInfoList.prototype.getIdle = function () {
            var i = 0;
            var len = this.m_list.length;
            var info;
            for (; i < len; i++) {
                info = this.m_list[i];
                if (info.isIdle) {
                    return info;
                }
            }
            return null;
        };
        ProcedureInfoList.prototype.create = function () {
            var info = this.getIdle();
            if (!info) {
                info = new ProcedureInfo();
                var procedureManager = new CSequentialProcedureManager();
                info.procedureManager = procedureManager;
                this.m_list[this.m_list.length] = info;
            }
            return info;
        };
        ProcedureInfoList.prototype.recycle = function (caller) {
            if (this.m_list.length > 10) {
                this.remove(caller);
            }
            else {
                var info = this.find(caller);
                info.reset();
            }
        };
        return ProcedureInfoList;
    }());
    var ProcedureInfo = /** @class */ (function () {
        function ProcedureInfo() {
            this.isIdle = true;
        }
        ProcedureInfo.prototype.reset = function () {
            this.caller = null;
            this.handler = null;
            this.checkFinishHandler = null;
            this.isIdle = true;
        };
        return ProcedureInfo;
    }());
})(sequential = exports.sequential || (exports.sequential = {}));
},{"./FrameWork":248,"./log":256}],260:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FrameWork_1 = require("./FrameWork");
var log_1 = require("./log");
var sound;
(function (sound) {
    /**
     * ...
     * @author
     */
    var CSoundSystem = /** @class */ (function (_super) {
        __extends(CSoundSystem, _super);
        function CSoundSystem() {
            var _this = _super.call(this) || this;
            /**播放音效 */
            _this.bSound = true;
            /**播放音乐 */
            _this.bMusic = true;
            _this.curMusic = "";
            _this.m_playingMap = {};
            _this.m_playTimeMap = {};
            return _this;
        }
        CSoundSystem.prototype.onAwake = function () {
            log_1.log.log('CSoundSystem.onAwake');
            _super.prototype.onAwake.call(this);
        };
        CSoundSystem.prototype.onStart = function () {
            log_1.log.log('CSoundSystem.onStart');
            var ret = _super.prototype.onStart.call(this);
            return ret;
        };
        CSoundSystem.prototype.playMusic = function (url, loops, complete, startTime) {
            // if (this.bMusic) {
            // }
            if (this.curMusic != url) {
                this.curMusic = url;
            }
            return Laya.SoundManager.playMusic(url, loops, complete, startTime);
        };
        CSoundSystem.prototype.playSound = function (path, isDontPlayWhenPlaying, isOverrideSame, multPlaySameInterval, finisiHandler) {
            if (isDontPlayWhenPlaying === void 0) { isDontPlayWhenPlaying = false; }
            if (isOverrideSame === void 0) { isOverrideSame = false; }
            if (multPlaySameInterval === void 0) { multPlaySameInterval = 0; }
            if (finisiHandler === void 0) { finisiHandler = null; }
            if (this.bSound) {
                if (isDontPlayWhenPlaying) {
                    if (this.m_playingMap.hasOwnProperty(path)) {
                        return;
                    }
                    this.m_playingMap[path] = true;
                    Laya.SoundManager.playSound(path, 1, Laya.Handler.create(this, this._onPlaySoundFinish, [path, finisiHandler]));
                }
                else if (isOverrideSame) {
                    Laya.SoundManager.stopSound(path);
                    Laya.SoundManager.playSound(path, 1, finisiHandler);
                }
                else if (multPlaySameInterval > 0) {
                    if (this.m_playTimeMap.hasOwnProperty(path)) {
                        var lastPlayTime = this.m_playTimeMap[path];
                        if (Laya.timer.currTimer - lastPlayTime < multPlaySameInterval) {
                            return;
                        }
                    }
                    this.m_playTimeMap[path] = Laya.timer.currTimer;
                    Laya.SoundManager.playSound(path, 1, finisiHandler);
                }
                else {
                    Laya.SoundManager.playSound(path, 1, finisiHandler);
                }
            }
        };
        CSoundSystem.prototype._onPlaySoundFinish = function (path, finisiHandler) {
            if (this.m_playingMap.hasOwnProperty(path)) {
                delete this.m_playingMap[path];
            }
            if (finisiHandler) {
                finisiHandler.run();
            }
        };
        Object.defineProperty(CSoundSystem.prototype, "isMuted", {
            // 是否静音
            get: function () {
                return Laya.SoundManager.muted;
            },
            set: function (v) {
                Laya.SoundManager.muted = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSoundSystem.prototype, "isSoundMuted", {
            // 是否音效静音
            get: function () {
                return Laya.SoundManager.soundMuted;
            },
            set: function (v) {
                Laya.SoundManager.soundMuted = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSoundSystem.prototype, "isMusicMuted", {
            // 是否背景音乐静音
            get: function () {
                return Laya.SoundManager.musicMuted;
            },
            set: function (v) {
                Laya.SoundManager.musicMuted = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSoundSystem.prototype, "soundVolume", {
            // 音效音量
            get: function () {
                return Laya.SoundManager.soundVolume;
            },
            set: function (v) {
                Laya.SoundManager.setSoundVolume(v);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSoundSystem.prototype, "musicVolume", {
            // 背景音乐音量
            get: function () {
                return Laya.SoundManager.musicVolume;
            },
            set: function (v) {
                Laya.SoundManager.setMusicVolume(v);
            },
            enumerable: true,
            configurable: true
        });
        // 停止音乐音效
        CSoundSystem.prototype.stopSound = function (url) {
            Laya.SoundManager.stopSound(url);
        };
        CSoundSystem.prototype.stopAllSound = function () {
            Laya.SoundManager.stopAllSound();
        };
        CSoundSystem.prototype.stopMusic = function () {
            Laya.SoundManager.stopMusic();
        };
        // 释放声音资源(音效和音乐)
        CSoundSystem.prototype.destroySound = function (url) {
            Laya.SoundManager.destroySound(url);
        };
        CSoundSystem.prototype.onDestroy = function () {
            _super.prototype.onDestroy.call(this);
            Laya.SoundManager.stopAll();
        };
        return CSoundSystem;
    }(FrameWork_1.framework.CAppSystem));
    sound.CSoundSystem = CSoundSystem;
})(sound = exports.sound || (exports.sound = {}));
},{"./FrameWork":248,"./log":256}],261:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Fsm_1 = require("./framework/Fsm");
var config_1 = require("./framework/config");
var FrameWork_1 = require("./framework/FrameWork");
var log_1 = require("./framework/log");
var pool_1 = require("./framework/pool");
var Procedure_1 = require("./framework/Procedure");
var sequential_1 = require("./framework/sequential");
var sound_1 = require("./framework/sound");
var Lang_1 = require("./framework/Lang");
var gameframework;
(function (gameframework) {
    gameframework.fsm = Fsm_1.fsm;
    gameframework.config = config_1.config;
    gameframework.framework = FrameWork_1.framework;
    gameframework.log = log_1.log;
    gameframework.pool = pool_1.pool;
    gameframework.procedure = Procedure_1.procedure;
    gameframework.sequential = sequential_1.sequential;
    gameframework.sound = sound_1.sound;
    gameframework.lang = Lang_1.default;
})(gameframework = exports.gameframework || (exports.gameframework = {}));
},{"./framework/FrameWork":248,"./framework/Fsm":249,"./framework/Lang":250,"./framework/Procedure":251,"./framework/config":253,"./framework/log":256,"./framework/pool":257,"./framework/sequential":259,"./framework/sound":260}],262:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HttpRequest = Laya.HttpRequest;
var Event = Laya.Event;
var Handler = Laya.Handler;
var Pool = Laya.Pool;
var GM_1 = require("../../gm/GM");
/**
 * @author: henrylee
 * @2018/09/28
 *
 */
var Http;
(function (Http) {
    /**
     * key -> val   键值对
     * @param val number | string
     */
    var HttpVariables = /** @class */ (function () {
        function HttpVariables() {
        }
        return HttpVariables;
    }());
    Http.HttpVariables = HttpVariables;
    /**
     * 返回对象
     * @public ret   请求是否成功标记
     * @public msg   Message带回的信息
     * @public data  成功返回时的有效信息
     *
     */
    var Respone = /** @class */ (function () {
        function Respone() {
        }
        Respone.prototype.recover = function () {
            Pool.recover("Http.Respone", this);
        };
        return Respone;
    }());
    Http.Respone = Respone;
    /**
     * 代理http请求
     * 处理请求抛出的事件
     *
     */
    var HttpProxy = /** @class */ (function () {
        function HttpProxy() {
            this.requestMap = null;
            this.hr = null;
            this.requestMap = {};
            this.hr = new HttpRequest();
        }
        HttpProxy.send = function (remoteapi, method, caller, callback, variables) {
            GM_1.GM.instance.httpProxy.send(remoteapi, method, caller, callback, variables);
        };
        HttpProxy.prototype.send = function (remoteapi, method, caller, callback, variables) {
            var url = HttpProxy.URL_PREFIX + remoteapi;
            if (this.requestMap[url]) {
                return;
            }
            this.requestMap[url] = Handler.create(caller, callback);
            this.hr.once(Event.COMPLETE, this, this.onComplete);
            this.hr.once(Event.ERROR, this, this.onError);
            this.hr.send(url, this.composeVariables(variables), method, 'text', HttpProxy.HEAD_ARRAY);
        };
        HttpProxy.prototype.onComplete = function (e) {
            var handler = this.requestMap[this.hr.url];
            if (handler) {
                var respone = Pool.getItemByClass("Http.Respone", Respone);
                respone.ret = true;
                respone.msg = "";
                handler.runWith(respone);
                handler.recover();
                delete this.requestMap[this.hr.url];
            }
        };
        HttpProxy.prototype.onError = function (e) {
            var handler = this.requestMap[this.hr.url];
            if (handler) {
                var respone = Pool.getItemByClass("Http.Respone", Respone);
                respone.ret = false;
                respone.msg = "";
                handler.runWith(respone);
                handler.recover();
                delete this.requestMap[this.hr.url];
            }
        };
        HttpProxy.prototype.composeVariables = function (variables) {
            if (!variables) {
                return null;
            }
            var pairstr = "";
            for (var key in variables) {
                pairstr += "&" + key + "=" + variables[key];
            }
            if (pairstr.length > 1) {
                pairstr = pairstr.substr(1);
            }
            return pairstr;
        };
        /**
         * URL_PREFIX + remoteapi = 完整的请求地址
         */
        HttpProxy.URL_PREFIX = "https://www.baidu.com/";
        // static URL_PREFIX: string = "";
        HttpProxy.HEAD_ARRAY = ["Content-Type", "application/x-www-form-urlencoded", "Access-Control-Allow-Origin", "*"];
        return HttpProxy;
    }());
    Http.HttpProxy = HttpProxy;
})(Http = exports.Http || (exports.Http = {}));
},{"../../gm/GM":221}],263:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NetState = /** @class */ (function () {
    function NetState() {
        this.m_netStateMap = {};
    }
    NetState.prototype._getNetState = function (type) {
        var ret;
        ret = this.m_netStateMap[type];
        return ret;
    };
    NetState.prototype.setNetStateBusy = function (type) {
        var state = this._getNetState(type);
        if (!state) {
            state = new NetStateInfo();
            this.m_netStateMap[type] = state;
        }
        state.isBusy = true;
    };
    NetState.prototype.setNetStateIdle = function (type) {
        var state = this._getNetState(type);
        if (!state) {
            state = new NetStateInfo();
            this.m_netStateMap[type] = state;
        }
        state.isBusy = false;
    };
    NetState.prototype.isNetStateBusy = function (type) {
        var state = this._getNetState(type);
        if (!state) {
            return false;
        }
        return state.isBusy;
    };
    return NetState;
}());
exports.default = NetState;
var NetStateInfo = /** @class */ (function () {
    function NetStateInfo() {
    }
    return NetStateInfo;
}());
},{}],264:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Emitter_1 = require("../observer/Emitter");
var SFSEvent = SFS2X.SFSEvent;
var log_1 = require("../framework/log");
var Lang_1 = require("../framework/Lang");
exports.NetEvent = {
    CONNECTION: "connection",
    CONNECTION_LOST: "connetion_lost",
    LOGIN: "login",
    LOGIN_ERROR: "loginError",
    NET_ASSERTS: "netAsserts"
};
var SFSClient = /** @class */ (function () {
    function SFSClient() {
        this._emitter = null;
        this._sfs = null;
        this._config = null;
        this._room = null;
        this._loginTimeoutID = -1; // 登录setTimeout handle
        this._pingTimeoutCount = 0; // 统计心跳请求超时次数
        this._pingStartTime = 0; // 发送心跳请求的时间，用于计算延迟
        this._networkDelay = 0; // 网络延迟时间（毫秒）
        this._reconnectCount = 0; // 重连失败次数统计
    }
    SFSClient.prototype.initSFS = function (config) {
        if (null == this._sfs) {
            this._sfs = new SFS2X.SmartFox(config);
        }
        return this._sfs;
    };
    /**
     * 初始化服务器
     * @param config 服务器配置
     */
    SFSClient.prototype.initParamer = function (serverConfig) {
        //配置文件读出的信息需要重新包装一次
        this._config = {
            zone: serverConfig.zone,
            host: serverConfig.host,
            port: serverConfig.port,
            useSSL: serverConfig.useSSL,
            pingCommand: serverConfig.pingCommand,
            debug: undefined === serverConfig.debug ? false : serverConfig.debug,
            pingInterval: undefined === serverConfig.pingInterval ? 1000 * 10 : serverConfig.pingInterval,
            pingTimeoutMax: undefined === serverConfig.pingTimeoutMax ? 3 : serverConfig.pingTimeoutMax,
            requestTimeoutMax: undefined === serverConfig.requestTimeoutMax ? 1000 * 60 * 6 : serverConfig.requestTimeoutMax,
            isAutoReconnect: undefined === serverConfig.isAutoReconnect ? false : serverConfig.isAutoReconnect,
            reconnectDelay: undefined === serverConfig.reconnectDelay ? 1000 * 3 : serverConfig.reconnectDelay,
            reconnectCountMax: undefined === serverConfig.reconnectCountMax ? 5 : serverConfig.reconnectCountMax
        };
        this.initSFS(this._config);
        this.registerListener();
    };
    SFSClient.prototype.registerListener = function () {
        var _sfs = this._sfs;
        if (_sfs) {
            _sfs.addEventListener(SFSEvent.CONNECTION, this.onConnection, this);
            _sfs.addEventListener(SFSEvent.CONNECTION_LOST, this.onConnectionLost, this);
            _sfs.addEventListener(SFSEvent.CONNECTION_RETRY, this.onConnectionRetry, this);
            _sfs.addEventListener(SFSEvent.CONNECTION_RESUME, this.onConnectionResume, this);
            _sfs.addEventListener(SFSEvent.EXTENSION_RESPONSE, this.onExtensionResponse, this);
            _sfs.addEventListener(SFSEvent.LOGIN, this.onLogin, this);
            _sfs.addEventListener(SFSEvent.LOGIN_ERROR, this.onLoginError, this);
            _sfs.addEventListener(SFSEvent.ROOM_JOIN, this.onRoomJoined, this);
            _sfs.addEventListener(SFSEvent.ROOM_JOIN_ERROR, this.onRoomJoinError, this);
        }
    };
    SFSClient.prototype.unregisterListener = function () {
        var _sfs = this._sfs;
        if (_sfs) {
            _sfs.removeEventListener(SFSEvent.CONNECTION, this.onConnection);
            _sfs.removeEventListener(SFSEvent.CONNECTION_LOST, this.onConnectionLost);
            _sfs.removeEventListener(SFSEvent.CONNECTION_RETRY, this.onConnectionRetry);
            _sfs.removeEventListener(SFSEvent.CONNECTION_RESUME, this.onConnectionResume);
            _sfs.removeEventListener(SFSEvent.EXTENSION_RESPONSE, this.onExtensionResponse);
            _sfs.removeEventListener(SFSEvent.LOGIN, this.onLogin);
            _sfs.removeEventListener(SFSEvent.LOGIN_ERROR, this.onLoginError);
            _sfs.removeEventListener(SFSEvent.ROOM_JOIN, this.onRoomJoined);
            _sfs.removeEventListener(SFSEvent.ROOM_JOIN_ERROR, this.onRoomJoinError);
        }
    };
    SFSClient.prototype.connect = function () {
        var conf = this._config;
        var _sfs = this._sfs;
        if (!conf && !_sfs) {
            throw new Error(Lang_1.default.Get('net_unready'));
        }
        if (!this.isConnected()) {
            _sfs.connect(conf.host, parseInt(conf.port));
        }
    };
    SFSClient.prototype.isConnected = function () {
        return this._sfs && this._sfs.isConnected();
    };
    SFSClient.prototype.onConnection = function (event) {
        var self = this;
        if (event.success) {
            self._reconnectCount = 0;
            //长时间不登录，释放socket连接
            self._loginTimeoutID = setTimeout(function () {
                self.disconnect();
            }, this._config.requestTimeoutMax);
            log_1.log.logObj(this._config.zone + " onConnection success!", event);
            this._emitter.event(exports.NetEvent.CONNECTION);
        }
        else {
            log_1.log.log(this._config.zone + " 第" + (self._reconnectCount + 1) + '次连接服务器失败！');
            self.onConnectionLost();
        }
    };
    SFSClient.prototype.onConnectionLost = function (event) {
        var errorStr = '';
        if (event) {
            var temp = event;
            if (temp.hasOwnProperty('code')) {
                errorStr = 'code : ' + temp['code'];
            }
            if (temp.hasOwnProperty('reason')) {
                errorStr += ' reason : ' + temp['reason'];
            }
            if (temp.hasOwnProperty('wasClean')) {
                errorStr += ' is close by abnormal : ' + !(temp['wasClean']);
            }
        }
        log_1.log.logObj(this._config.zone + " onConnectionLost ", errorStr);
        this.stopPing();
        if (this._config && this._config.isAutoReconnect && ++this._reconnectCount < this._config.reconnectCountMax) {
            Laya.timer.frameOnce(1, this, this.connect);
        }
        else {
            log_1.log.log("断线了");
            this._emitter.event(exports.NetEvent.NET_ASSERTS);
        }
        this._emitter.event(exports.NetEvent.CONNECTION_LOST);
    };
    SFSClient.prototype.onConnectionRetry = function (event) {
        log_1.log.log(this._config.zone + " connection retry...", event);
    };
    SFSClient.prototype.onConnectionResume = function (event) {
        log_1.log.log(this._config.zone + " onConnection resume!", event);
    };
    SFSClient.prototype.startPing = function () {
        this._pingTimeoutCount = 0;
        Laya.timer.loop(this._config.pingInterval, this, this.excutePing);
    };
    SFSClient.prototype.excutePing = function () {
        var conf = this._config;
        if (++this._pingTimeoutCount > conf.pingTimeoutMax) {
            log_1.log.log('ping超时, 链接断开');
            this.onConnectionLost(null);
            this.disconnect();
        }
        else {
            this.send(conf.pingCommand);
            if (this._pingStartTime === 0) {
                this._pingStartTime = Date.now();
            }
        }
    };
    SFSClient.prototype.stopPing = function () {
        Laya.timer.clear(this, this.excutePing);
    };
    SFSClient.prototype.loginRequest = function (userInfo, isSFSLogin) {
        if (isSFSLogin === void 0) { isSFSLogin = true; }
        //login服务器和game服务器传参不一致
        if (isSFSLogin) {
            var paramer = { pwd: userInfo.passWord };
            this._sfs.send(new SFS2X.Requests.System.LoginRequest(userInfo.userName, "", paramer, this._config.zone));
        }
        else {
            this._sfs.send(new SFS2X.Requests.System.LoginRequest(userInfo.username, "", userInfo, this._config.zone));
        }
    };
    SFSClient.prototype.onLogin = function (event) {
        var data = event.data;
        log_1.log.logObj(this._config.zone + " login response ", data);
        this._emitter.event(exports.NetEvent.LOGIN, data);
        if (this._loginTimeoutID !== -1) {
            clearTimeout(this._loginTimeoutID);
        }
        var _sfs = this._sfs;
        if (_sfs) {
            this.startPing();
        }
    };
    SFSClient.prototype.onLoginError = function (event) {
        log_1.log.logObj(this._config.zone + " loginError ", (event));
        this._emitter.event(exports.NetEvent.LOGIN_ERROR, event);
        if (this._loginTimeoutID !== -1) {
            clearTimeout(this._loginTimeoutID);
        }
        // this.disconnect();
    };
    SFSClient.prototype.onRoomJoined = function (event) {
        if (event) {
            this._room = event.room;
        }
    };
    SFSClient.prototype.onRoomJoinError = function (event) {
        if (event) {
            this._room = null;
        }
    };
    SFSClient.prototype.send = function (msgName, param, isInRoom) {
        if (param === void 0) { param = {}; }
        if (isInRoom === void 0) { isInRoom = false; }
        if (this.isConnected()) {
            this._sfs.send(new SFS2X.Requests.System.ExtensionRequest(msgName, param, !isInRoom ? null : this._room));
            // if ("1000" != msgName) {
            log_1.log.log(this._config.zone + (isInRoom ? "|" + this._room : ""), msgName, JSON.stringify(param));
            // }
        }
    };
    SFSClient.prototype.onExtensionResponse = function (event) {
        var cmd = event.cmd;
        var data = event.params;
        if (cmd == this._config.pingCommand) {
            this._pingTimeoutCount = 0;
            this._networkDelay = Date.now() - this._pingStartTime;
            this._pingStartTime = 0;
            this._emitter.event(SFSClient.EVENT_SIGNAL, this.getSignal());
        }
        if (cmd && cmd != this._config.pingCommand) {
            // console.log(this._config.zone + " ***   ***  cmd:" + cmd);
            log_1.log.logObj('net response : ' + this._config.zone, (data), ("cmd:" + cmd));
            this._emitter.event(cmd, data);
        }
    };
    SFSClient.prototype.disconnect = function () {
        this.stopPing();
        this._room = null;
        this._pingTimeoutCount = 0;
        this._emitter.offAll();
        var _sfs = this._sfs;
        if (_sfs) {
            this.unregisterListener();
            if (_sfs.isConnected) {
                _sfs.disconnect();
            }
            this._sfs = null;
        }
    };
    SFSClient.prototype.getNetworkDelay = function () {
        return this._networkDelay;
    };
    SFSClient.prototype.getSignal = function () {
        var level = 0;
        if (this._networkDelay < 50) {
            level = 4;
        }
        else if (this._networkDelay < 100) {
            level = 3;
        }
        else if (this._networkDelay < 300) {
            level = 2;
        }
        else if (this._networkDelay < 500) {
            level = 1;
        }
        return level;
    };
    Object.defineProperty(SFSClient.prototype, "Emitter", {
        get: function () {
            if (null == this._emitter) {
                this._emitter = new Emitter_1.Emitter();
            }
            return this._emitter;
        },
        enumerable: true,
        configurable: true
    });
    SFSClient.EVENT_SIGNAL = 'signal';
    return SFSClient;
}());
exports.default = SFSClient;
},{"../framework/Lang":250,"../framework/log":256,"../observer/Emitter":265}],265:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = Laya.Handler;
/**
 * @author: henrylee
 * 2018/09/28
 */
var Emitter = /** @class */ (function () {
    function Emitter() {
        this.listeners = {};
    }
    Emitter.prototype.on = function (caller, name, func) {
        var handlers = this.listeners[name];
        //检查是否有同类型的侦听器组
        if (null == handlers) {
            this.listeners[name] = [];
        }
        else {
            //检查是否同一个caller已经注册过同类型侦听器
            var n = handlers.length;
            while (--n > -1) {
                var handler = handlers[n];
                if (handler.caller === caller) {
                    return;
                }
            }
        }
        this.listeners[name].push(Handler.create(caller, func, null, false));
    };
    Emitter.prototype.off = function (caller, name) {
        var handlers = this.listeners[name];
        if (!handlers)
            return;
        //遍历过程中如果有插入和删除操作，会造成逻辑混乱，所以复制一份
        var temp = handlers.concat();
        var n = temp.length;
        while (--n > -1) {
            var handler = temp[n];
            if (handler.caller === caller) {
                handler = handlers.splice(n, 1)[0];
                handler.recover();
                break;
            }
        }
        if (handlers.length == 0) {
            delete this.listeners[name];
        }
    };
    Emitter.prototype.offAll = function () {
        for (var key in this.listeners) {
            if (this.listeners.hasOwnProperty(key)) {
                var handlers = this.listeners[key];
                var n = handlers.length;
                while (--n > -1) {
                    var handler = handlers[n];
                    handler.recover();
                }
            }
        }
        this.listeners = {};
    };
    Emitter.prototype.event = function (name, param) {
        var handlers = this.listeners[name];
        if (!handlers)
            return;
        //遍历过程中如果有插入和删除操作，会造成逻辑混乱，所以复制一份
        var temp = handlers.concat();
        var n = temp.length;
        if (param == undefined) {
            param = null;
        }
        while (--n > -1) {
            var handler = temp[n];
            handler.runWith(param);
        }
    };
    return Emitter;
}());
exports.Emitter = Emitter;
},{}],266:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ApiUtil;
(function (ApiUtil) {
    // 创建非一次回收的handler
    function createHandler(caller, method, args) {
        return Laya.Handler.create(caller, method, args, false);
    }
    ApiUtil.createHandler = createHandler;
    function recoverHandler(handler) {
        if (handler) {
            handler.recover();
        }
    }
    ApiUtil.recoverHandler = recoverHandler;
    // 获得sp的全局坐标
    function getGlobalPos(sp, pos) {
        if (pos === void 0) { pos = null; }
        if (!pos) {
            pos = new Laya.Point(sp.x, sp.y);
        }
        var globalPos = sp.parent.localToGlobal(pos);
        return globalPos;
    }
    ApiUtil.getGlobalPos = getGlobalPos;
    // 全局坐标转为sp的相对坐标
    function globalToLocal(sp, pos) {
        var localPos = sp.parent.globalToLocal(pos);
        return localPos;
    }
    ApiUtil.globalToLocal = globalToLocal;
    // obj1的坐标转到obj2的坐标
    // pos != null, 使用pos的坐标, pos为obj1同一对等的坐标系,     pos == null, 使用obj1的坐标
    function obj1ToObj2Pos(obj1, obj2, pos) {
        if (pos === void 0) { pos = null; }
        if (!pos) {
            pos = new Laya.Point(obj1.x, obj1.y);
        }
        var gPos = getGlobalPos(obj1, pos);
        var localPos = globalToLocal(obj2, gPos);
        return localPos;
    }
    ApiUtil.obj1ToObj2Pos = obj1ToObj2Pos;
    // strnumber(2.12000) => return 2.12
    function formatStrNumber(strNumber) {
        var dotIndex = strNumber.indexOf('.');
        if (dotIndex == -1) {
            return strNumber;
        }
        var strList = strNumber.split('.');
        var str2 = strList[1];
        var notZeroIndex = -1;
        for (var i = str2.length - 1; i >= 0; --i) {
            if (str2.charAt(i) != '0') {
                notZeroIndex = i;
                break;
            }
        }
        if (notZeroIndex != -1) {
            str2 = str2.substring(0, notZeroIndex + 1);
        }
        var ret = strList[0] + '.' + str2;
        return ret;
    }
    ApiUtil.formatStrNumber = formatStrNumber;
    // fix : fix后的值不处理. 因为number会有0.000000000000000x的情况
    // v(2.120000000006) => return 2.12
    function formatNumber(v, fix) {
        if (fix === void 0) { fix = 5; }
        var cell = Math.ceil(v);
        var floor = Math.floor(v);
        if (Math.abs(v - cell) < 0.000000001) {
            v = cell;
        }
        else if (Math.abs(v - floor) < 0.000000001) {
            v = floor;
        }
        var str = v.toFixed(fix);
        str = formatStrNumber(str);
        var ret = Number(str);
        return ret;
    }
    ApiUtil.formatNumber = formatNumber;
    // 补齐前面的0, 123 => 000123, len 总长度
    function addZeroToFront(str, len) {
        if (str.length >= len) {
            return str;
        }
        var addCount = len - str.length;
        var addStr = '';
        for (var i = 0; i < addCount; ++i) {
            addStr += '0';
        }
        var ret = addStr + str;
        return ret;
    }
    ApiUtil.addZeroToFront = addZeroToFront;
    // 拆分一个较大值为一个小值列表, 小值为传入的列表里的index,
    // 如 : SplitValueToValueList(80, [10, 20, 50]) => return [50, 20, 10] 
    //      => 如果returnType == 1 => return [2, 1, 0], 返回的是索引
    // v : 要拆分的值
    // baseValueList : 拆分的小值, 把v拆分成baseValueList里面的值, 需要保证baseValueList为升序
    // returnType : 0 返回的列表里, value是传入的baseValue的值, 1 : 返回的是index
    function SplitValueToValueList(v, baseValueList, returnType) {
        if (returnType === void 0) { returnType = 0; }
        var ret = new Array();
        for (var i = baseValueList.length - 1; i >= 0; --i) {
            var baseValue = baseValueList[i];
            var tempFloat = v / baseValue;
            tempFloat = ApiUtil.formatNumber(tempFloat);
            var tempInt = tempFloat >> 0;
            // 除baseValue,大于1, 说明可以拆分为该分值
            if (tempFloat >= 1) {
                // 存放分值
                if (returnType == 0) {
                    for (var c = 0; c < tempInt; ++c) {
                        ret.push(baseValue);
                    }
                }
                else {
                    for (var c = 0; c < tempInt; ++c) {
                        ret.push(i);
                    }
                }
                // 更新v
                v = v % baseValue;
                v = ApiUtil.formatNumber(v);
            }
            // 已拆分完
            if (v <= 0) {
                break;
            }
        }
        return ret;
    }
    ApiUtil.SplitValueToValueList = SplitValueToValueList;
})(ApiUtil = exports.ApiUtil || (exports.ApiUtil = {}));
},{}],267:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lang_1 = require("../framework/Lang");
var CalendarUtil = /** @class */ (function () {
    function CalendarUtil() {
    }
    // month以1开始
    CalendarUtil.reduceDateFun = function (year, month) {
        ++month;
        var isOk = true;
        if (month - 1 > 0) {
            month -= 1;
        }
        else {
            if (year - 1 > 1980) {
                year -= 1;
                month = 12;
            }
            else {
                isOk = false;
            }
        }
        --month;
        return new CalendarData(year, month, 0, 0, isOk);
    };
    CalendarUtil.addDateFun = function (year, month) {
        ++month;
        if (month + 1 < 13) {
            month += 1;
        }
        else {
            year += 1;
            month = 1;
        }
        --month;
        return new CalendarData(year, month, 0, 0);
    };
    CalendarUtil.getTimeDataFun = function (year, month) {
        ++month;
        var temp = CalendarUtil.date;
        temp.setFullYear(year); // new Date(year, month, 0);
        temp.setMonth(month);
        temp.setDate(0);
        var date = temp.getDate();
        temp.setDate(1);
        var day = temp.getDay();
        var bol = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        if (bol) {
            if (month == 2) {
                date = 29;
            }
        }
        else {
            if (month == 2) {
                date = 28;
            }
        }
        --month;
        return new CalendarData(year, month, date, day);
    };
    CalendarUtil.getUpYearMonth = function (year, month) {
        ++month;
        var upYear = 0;
        var upMonth = 0;
        if (month == 1) {
            upYear = year - 1;
            upMonth = 12;
        }
        else {
            upYear = year;
            upMonth = month - 1;
        }
        --upMonth;
        return new CalendarData(upYear, upMonth, 0, 0);
    };
    CalendarUtil.getNextYearMonth = function (year, month) {
        ++month;
        var downYear = 0;
        var downMonth = 0;
        if (month == 12) {
            downYear = year + 1;
            downMonth = 1;
        }
        else {
            downYear = year;
            downMonth = month + 1;
        }
        --downMonth;
        return new CalendarData(downYear, downMonth, 0, 0);
    };
    Object.defineProperty(CalendarUtil, "date", {
        get: function () {
            if (!CalendarUtil.m_date) {
                CalendarUtil.m_date = new Date();
            }
            return CalendarUtil.m_date;
        },
        enumerable: true,
        configurable: true
    });
    // year : 1开始
    CalendarUtil.getYearName = function (year) {
        return Lang_1.default.Get('year_name', { v1: year });
    };
    // month : 0开始
    CalendarUtil.getMonthName = function (month) {
        month++;
        return Lang_1.default.Get('month_name', { v1: month });
    };
    // date : 1开始
    CalendarUtil.getDateName = function (date) {
        return Lang_1.default.Get('date_name', { v1: date });
    };
    return CalendarUtil;
}());
exports.CalendarUtil = CalendarUtil;
var CalendarData = /** @class */ (function () {
    function CalendarData(y, m, date, day, isOk) {
        if (isOk === void 0) { isOk = true; }
        this.year = 0;
        this.month = 0; // start 0
        this.date = 0; // 1-31
        this.day = 0; // 星期几
        this.isOk = true;
        this.year = y;
        this.month = m;
        this.date = date;
        this.day = day;
        this.isOk = isOk;
    }
    return CalendarData;
}());
exports.CalendarData = CalendarData;
},{"../framework/Lang":250}],268:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FuncUtil;
(function (FuncUtil) {
    /**
     * 在给定的最大值和最小值之间随机选出一个数字
     * @param min
     * @param max
     */
    function Rondom(min, max) {
        return (((Math.random() * (max - min + 1)) + min) >> 0);
    }
    FuncUtil.Rondom = Rondom;
    // object对象浅复制
    function shallowCopy(obj, cls) {
        var ret = new cls();
        for (var key in obj) {
            ret[key] = obj[key];
        }
        return ret;
    }
    FuncUtil.shallowCopy = shallowCopy;
    // object转成string, 目前只支持第一层
    function objToString(obj) {
        var ret = '';
        if (_isArray(obj)) {
            // 数组
            ret = _arrayToString(obj);
        }
        else {
            ret = _objToString(obj);
        }
        return ret;
    }
    FuncUtil.objToString = objToString;
    function _objToString(obj) {
        var ret = '{';
        var item;
        var type;
        for (var key in obj) {
            item = obj[key];
            type = typeof item;
            if ('string' == type || 'number' == type || 'boolean' == type) {
                ret += key + ":" + obj[key] + ',';
            }
            else if (_isArray(item)) {
                ret += _arrayToString(item);
            }
            else {
                ret += _objToString(item);
            }
        }
        ret += '},';
        return ret;
    }
    function _arrayToString(obj) {
        var ret = '[';
        var item;
        var type;
        for (var key in obj) {
            item = obj[key];
            type = typeof item;
            if ('string' == type || 'number' == type || 'boolean' == type) {
                ret += key + ":" + obj[key] + ',';
            }
            else if (_isArray(item)) {
                ret += _arrayToString(item);
            }
            else {
                ret += _objToString(item);
            }
        }
        ret += '],';
        return ret;
    }
    function _isArray(obj) {
        return obj.hasOwnProperty('length');
    }
    // 数字转为千位表示 12345.11 => 12,345.11
    function numToKStr(value, fixed) {
        var str = value.toFixed(fixed);
        var dotIndex = str.indexOf('.');
        var dotStr; // 小数点部分
        var numStr; // 数字部分
        if (-1 != dotIndex) {
            dotStr = str.substr(dotIndex);
            numStr = str.substring(0, dotIndex);
        }
        else {
            numStr = str;
        }
        // 
        var moveStep = 0;
        var arr = [];
        for (var index = numStr.length - 1; index >= 0; --index) {
            if (moveStep >= 3) {
                moveStep = 1;
                arr.unshift(',');
            }
            else {
                moveStep++;
            }
            arr.unshift(numStr.charAt(index));
        }
        var ret = arr.join(''); // arr.toString();
        if (dotStr) {
            // 加上这部分
            ret += dotStr;
        }
        return ret;
    }
    FuncUtil.numToKStr = numToKStr;
    // 省略字符串 xxxxxxxxxxxx => xxxxx...
    function toOmitString(str, showCharCount, omitFlag) {
        if (omitFlag === void 0) { omitFlag = '...'; }
        if (!str || str.length < showCharCount) {
            return str;
        }
        var ret;
        ret = str.substr(0, showCharCount);
        ret += omitFlag;
        return ret;
    }
    FuncUtil.toOmitString = toOmitString;
})(FuncUtil = exports.FuncUtil || (exports.FuncUtil = {}));
},{}],269:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimeUtil = /** @class */ (function () {
    function TimeUtil() {
    }
    // let nowdate:Date = new Date(); 
    // //创建新的日期对象，用来获取现在的时间 
    // let year:Number = nowdate.getFullYear(); 
    // //获取当前的年份 
    // let month:Number = nowdate.getMonth()+1; 
    // //获取当前的月份，因为数组从0开始用0-11表示1-12月，所以要加1 
    // let date:Number = nowdate.getDate(); 
    // //获取当前日期 
    // let day:Number = nowdate.getDay(); 
    // //获取当年的星期 
    // let hour:Number = nowdate.getHours(); 
    // //获取当前小时 
    // let minute:Number = nowdate.getMinutes(); 
    // //获取当前的分钟 
    // let second:Number = nowdate.getSeconds(); 
    // //获取当前的秒钟 
    TimeUtil.getCurY_M_D_H_M_S = function () {
        var ret = TimeUtil.getY_M_D_H_M_S(TimeUtil.curTimer);
        return ret;
    };
    TimeUtil.getY_M_D_H_M_S = function (time) {
        var ymd = TimeUtil.getY_M_D(time);
        var hms = TimeUtil.getH_M_S(time);
        return ymd + " " + hms;
    };
    TimeUtil.getCurY_M_D = function () {
        var ret = TimeUtil.getY_M_D(TimeUtil.curTimer);
        return ret;
    };
    TimeUtil.getY_M_D = function (timer) {
        var pDate = TimeUtil.date;
        pDate.setTime(timer);
        var ret = pDate.getFullYear() + '-' + (pDate.getMonth() + 1) + '-' + pDate.getDate();
        return ret;
    };
    TimeUtil.getCurH_M_S = function () {
        var ret = TimeUtil.getH_M_S(TimeUtil.curTimer);
        return ret;
    };
    TimeUtil.getH_M_S = function (timer) {
        var pDate = TimeUtil.date;
        pDate.setTime(timer);
        var ret = pDate.getHours() + ':' + (pDate.getMinutes()) + ':' + pDate.getSeconds();
        return ret;
    };
    // 判断
    // d1 : 时间cuo.  如果laya.timer.curtime;
    // 比较d1与d2的年月日, 如果d1>=d2, return true;
    TimeUtil.date1BigEqualDate2ByYmd = function (d1, d2) {
        var date = TimeUtil.date;
        date.setTime(d1);
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        var d1Timer = date.getTime();
        date.setTime(d2);
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        var d2Timer = date.getTime();
        var isOk = d1Timer >= d2Timer;
        return isOk;
    };
    Object.defineProperty(TimeUtil, "curTimer", {
        get: function () {
            return Laya.timer.currTimer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeUtil, "date", {
        get: function () {
            if (TimeUtil.s_date == null) {
                TimeUtil.s_date = new Date();
            }
            return TimeUtil.s_date;
        },
        enumerable: true,
        configurable: true
    });
    TimeUtil.getCurDate = function () {
        var d = TimeUtil.date;
        d.setTime(TimeUtil.curTimer);
        return d;
    };
    TimeUtil.getDate = function (year, month, date) {
        var d = TimeUtil.date;
        d.setFullYear(year);
        d.setMonth(month);
        d.setDate(date);
        return d;
    };
    return TimeUtil;
}());
exports.TimeUtil = TimeUtil;
},{}],270:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TweenUtil;
(function (TweenUtil) {
    // shakeV : 上下震
    // shakeH : 左右震
    // len : 震动强度
    // times : 震动次数
    // isResetPos : 是否恢复原来的坐标
    // isScalc : 是否缩放
    // scaleLen : 每次scaleLen大小
    function shakeObject(sp, shakeV, shakeH, len, times, isResetPos, isScalc, scaleLen) {
        if (len === void 0) { len = 4; }
        if (times === void 0) { times = 5; }
        if (isResetPos === void 0) { isResetPos = true; }
        if (isScalc === void 0) { isScalc = false; }
        if (scaleLen === void 0) { scaleLen = 0.05; }
        var baseX = sp.x;
        var baseY = sp.y;
        var baseScale = sp.scaleX;
        var count = 0;
        var isUp = Math.random() * 10 > 4;
        var mCount = 0;
        var MAX_COUNT = times * len;
        var pThis = this;
        Laya.timer.frameLoop(1, sp, function () {
            if (isUp) {
                if (shakeV) {
                    sp.y++;
                }
                if (shakeH) {
                    sp.x++;
                }
                if (isScalc) {
                    sp.scaleX += scaleLen;
                    sp.scaleY = sp.scaleX;
                }
                if (mCount > len) {
                    isUp = false;
                    mCount = 0;
                }
            }
            else {
                if (shakeV) {
                    sp.y--;
                }
                if (shakeH) {
                    sp.x--;
                }
                if (isScalc) {
                    sp.scaleX -= scaleLen;
                    sp.scaleY = sp.scaleX;
                }
                if (mCount > len) {
                    isUp = true;
                    mCount = 0;
                }
            }
            mCount++;
            count++;
            if (count > MAX_COUNT) {
                Laya.timer.clearAll(sp);
                if (isResetPos) {
                    if (shakeV) {
                        sp.y = baseY;
                    }
                    if (shakeH) {
                        sp.x = baseX;
                    }
                    if (isScalc) {
                        sp.scaleX = baseScale;
                        sp.scaleY = sp.scaleX;
                    }
                }
            }
        });
    }
    TweenUtil.shakeObject = shakeObject;
})(TweenUtil = exports.TweenUtil || (exports.TweenUtil = {}));
},{}],271:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui;
(function (ui) {
    var common;
    (function (common) {
        var BCBCoinUI = /** @class */ (function (_super) {
            __extends(BCBCoinUI, _super);
            function BCBCoinUI() {
                return _super.call(this) || this;
            }
            BCBCoinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/BCBCoin");
            };
            return BCBCoinUI;
        }(Laya.View));
        common.BCBCoinUI = BCBCoinUI;
        var BCBCoinBigUI = /** @class */ (function (_super) {
            __extends(BCBCoinBigUI, _super);
            function BCBCoinBigUI() {
                return _super.call(this) || this;
            }
            BCBCoinBigUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/BCBCoinBig");
            };
            return BCBCoinBigUI;
        }(Laya.View));
        common.BCBCoinBigUI = BCBCoinBigUI;
        var GameTopViewUI = /** @class */ (function (_super) {
            __extends(GameTopViewUI, _super);
            function GameTopViewUI() {
                return _super.call(this) || this;
            }
            GameTopViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/GameTopView");
            };
            return GameTopViewUI;
        }(Laya.View));
        common.GameTopViewUI = GameTopViewUI;
        var GameUserItemUI = /** @class */ (function (_super) {
            __extends(GameUserItemUI, _super);
            function GameUserItemUI() {
                return _super.call(this) || this;
            }
            GameUserItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/GameUserItem");
            };
            return GameUserItemUI;
        }(Laya.View));
        common.GameUserItemUI = GameUserItemUI;
        var GameUserItem2UI = /** @class */ (function (_super) {
            __extends(GameUserItem2UI, _super);
            function GameUserItem2UI() {
                return _super.call(this) || this;
            }
            GameUserItem2UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/GameUserItem2");
            };
            return GameUserItem2UI;
        }(Laya.View));
        common.GameUserItem2UI = GameUserItem2UI;
        var ImageNumber2UI = /** @class */ (function (_super) {
            __extends(ImageNumber2UI, _super);
            function ImageNumber2UI() {
                return _super.call(this) || this;
            }
            ImageNumber2UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/ImageNumber2");
            };
            return ImageNumber2UI;
        }(Laya.View));
        common.ImageNumber2UI = ImageNumber2UI;
        var MD5SimpleUI = /** @class */ (function (_super) {
            __extends(MD5SimpleUI, _super);
            function MD5SimpleUI() {
                return _super.call(this) || this;
            }
            MD5SimpleUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/MD5Simple");
            };
            return MD5SimpleUI;
        }(Laya.View));
        common.MD5SimpleUI = MD5SimpleUI;
        var MoneyViewUI = /** @class */ (function (_super) {
            __extends(MoneyViewUI, _super);
            function MoneyViewUI() {
                return _super.call(this) || this;
            }
            MoneyViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/MoneyView");
            };
            return MoneyViewUI;
        }(Laya.Scene));
        common.MoneyViewUI = MoneyViewUI;
        var PokerBiView2UI = /** @class */ (function (_super) {
            __extends(PokerBiView2UI, _super);
            function PokerBiView2UI() {
                return _super.call(this) || this;
            }
            PokerBiView2UI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/PokerBiView2");
            };
            return PokerBiView2UI;
        }(Laya.View));
        common.PokerBiView2UI = PokerBiView2UI;
        var PokerSmallViewUI = /** @class */ (function (_super) {
            __extends(PokerSmallViewUI, _super);
            function PokerSmallViewUI() {
                return _super.call(this) || this;
            }
            PokerSmallViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/PokerSmallView");
            };
            return PokerSmallViewUI;
        }(Laya.View));
        common.PokerSmallViewUI = PokerSmallViewUI;
        var PokerViewUI = /** @class */ (function (_super) {
            __extends(PokerViewUI, _super);
            function PokerViewUI() {
                return _super.call(this) || this;
            }
            PokerViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/PokerView");
            };
            return PokerViewUI;
        }(Laya.View));
        common.PokerViewUI = PokerViewUI;
        var TipsYype1ViewUI = /** @class */ (function (_super) {
            __extends(TipsYype1ViewUI, _super);
            function TipsYype1ViewUI() {
                return _super.call(this) || this;
            }
            TipsYype1ViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/TipsYype1View");
            };
            return TipsYype1ViewUI;
        }(Laya.View));
        common.TipsYype1ViewUI = TipsYype1ViewUI;
        var TopViewUI = /** @class */ (function (_super) {
            __extends(TopViewUI, _super);
            function TopViewUI() {
                return _super.call(this) || this;
            }
            TopViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/TopView");
            };
            return TopViewUI;
        }(Laya.View));
        common.TopViewUI = TopViewUI;
        var WarnViewUI = /** @class */ (function (_super) {
            __extends(WarnViewUI, _super);
            function WarnViewUI() {
                return _super.call(this) || this;
            }
            WarnViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("common/WarnView");
            };
            return WarnViewUI;
        }(Laya.View));
        common.WarnViewUI = WarnViewUI;
    })(common = ui.common || (ui.common = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var bjl;
        (function (bjl) {
            var BaijialeHallSceneUI = /** @class */ (function (_super) {
                __extends(BaijialeHallSceneUI, _super);
                function BaijialeHallSceneUI() {
                    return _super.call(this) || this;
                }
                BaijialeHallSceneUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/bjl/BaijialeHallScene");
                };
                return BaijialeHallSceneUI;
            }(Laya.Scene));
            bjl.BaijialeHallSceneUI = BaijialeHallSceneUI;
            var BaijialeSceneUI = /** @class */ (function (_super) {
                __extends(BaijialeSceneUI, _super);
                function BaijialeSceneUI() {
                    return _super.call(this) || this;
                }
                BaijialeSceneUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/bjl/BaijialeScene");
                };
                return BaijialeSceneUI;
            }(Laya.Scene));
            bjl.BaijialeSceneUI = BaijialeSceneUI;
        })(bjl = gamelist.bjl || (gamelist.bjl = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var bjl;
        (function (bjl) {
            var subView;
            (function (subView) {
                var BaijialeRecordViewUI = /** @class */ (function (_super) {
                    __extends(BaijialeRecordViewUI, _super);
                    function BaijialeRecordViewUI() {
                        return _super.call(this) || this;
                    }
                    BaijialeRecordViewUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/bjl/subView/BaijialeRecordView");
                    };
                    return BaijialeRecordViewUI;
                }(Laya.Scene));
                subView.BaijialeRecordViewUI = BaijialeRecordViewUI;
                var BaijialeRuleViewUI = /** @class */ (function (_super) {
                    __extends(BaijialeRuleViewUI, _super);
                    function BaijialeRuleViewUI() {
                        return _super.call(this) || this;
                    }
                    BaijialeRuleViewUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/bjl/subView/BaijialeRuleView");
                    };
                    return BaijialeRuleViewUI;
                }(Laya.View));
                subView.BaijialeRuleViewUI = BaijialeRuleViewUI;
            })(subView = bjl.subView || (bjl.subView = {}));
        })(bjl = gamelist.bjl || (gamelist.bjl = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var commonView;
        (function (commonView) {
            var BetsHistroyViewUI = /** @class */ (function (_super) {
                __extends(BetsHistroyViewUI, _super);
                function BetsHistroyViewUI() {
                    return _super.call(this) || this;
                }
                BetsHistroyViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/BetsHistroyView");
                };
                return BetsHistroyViewUI;
            }(Laya.View));
            commonView.BetsHistroyViewUI = BetsHistroyViewUI;
            var GameBottomUI = /** @class */ (function (_super) {
                __extends(GameBottomUI, _super);
                function GameBottomUI() {
                    return _super.call(this) || this;
                }
                GameBottomUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/GameBottom");
                };
                return GameBottomUI;
            }(Laya.View));
            commonView.GameBottomUI = GameBottomUI;
            var LookPokerViewUI = /** @class */ (function (_super) {
                __extends(LookPokerViewUI, _super);
                function LookPokerViewUI() {
                    return _super.call(this) || this;
                }
                LookPokerViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/LookPokerView");
                };
                return LookPokerViewUI;
            }(Laya.View));
            commonView.LookPokerViewUI = LookPokerViewUI;
            var MD5CheckUI = /** @class */ (function (_super) {
                __extends(MD5CheckUI, _super);
                function MD5CheckUI() {
                    return _super.call(this) || this;
                }
                MD5CheckUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/MD5Check");
                };
                return MD5CheckUI;
            }(Laya.View));
            commonView.MD5CheckUI = MD5CheckUI;
            var PaiCaiUI = /** @class */ (function (_super) {
                __extends(PaiCaiUI, _super);
                function PaiCaiUI() {
                    return _super.call(this) || this;
                }
                PaiCaiUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/PaiCai");
                };
                return PaiCaiUI;
            }(Laya.View));
            commonView.PaiCaiUI = PaiCaiUI;
            var TutorialViewUI = /** @class */ (function (_super) {
                __extends(TutorialViewUI, _super);
                function TutorialViewUI() {
                    return _super.call(this) || this;
                }
                TutorialViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/commonView/TutorialView");
                };
                return TutorialViewUI;
            }(Laya.View));
            commonView.TutorialViewUI = TutorialViewUI;
        })(commonView = gamelist.commonView || (gamelist.commonView = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var commonView;
        (function (commonView) {
            var road;
            (function (road) {
                var CRoadDetailViewUI = /** @class */ (function (_super) {
                    __extends(CRoadDetailViewUI, _super);
                    function CRoadDetailViewUI() {
                        return _super.call(this) || this;
                    }
                    CRoadDetailViewUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/commonView/road/CRoadDetailView");
                    };
                    return CRoadDetailViewUI;
                }(Laya.View));
                road.CRoadDetailViewUI = CRoadDetailViewUI;
                var RoadItemUI = /** @class */ (function (_super) {
                    __extends(RoadItemUI, _super);
                    function RoadItemUI() {
                        return _super.call(this) || this;
                    }
                    RoadItemUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/commonView/road/RoadItem");
                    };
                    return RoadItemUI;
                }(Laya.View));
                road.RoadItemUI = RoadItemUI;
                var RoadViewUI = /** @class */ (function (_super) {
                    __extends(RoadViewUI, _super);
                    function RoadViewUI() {
                        return _super.call(this) || this;
                    }
                    RoadViewUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/commonView/road/RoadView");
                    };
                    return RoadViewUI;
                }(Laya.View));
                road.RoadViewUI = RoadViewUI;
            })(road = commonView.road || (commonView.road = {}));
        })(commonView = gamelist.commonView || (gamelist.commonView = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var p21;
        (function (p21) {
            var P21HallSceneUI = /** @class */ (function (_super) {
                __extends(P21HallSceneUI, _super);
                function P21HallSceneUI() {
                    return _super.call(this) || this;
                }
                P21HallSceneUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/p21/P21HallScene");
                };
                return P21HallSceneUI;
            }(Laya.Scene));
            p21.P21HallSceneUI = P21HallSceneUI;
            var P21SceneUI = /** @class */ (function (_super) {
                __extends(P21SceneUI, _super);
                function P21SceneUI() {
                    return _super.call(this) || this;
                }
                P21SceneUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("gamelist/p21/P21Scene");
                };
                return P21SceneUI;
            }(Laya.Scene));
            p21.P21SceneUI = P21SceneUI;
        })(p21 = gamelist.p21 || (gamelist.p21 = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var gamelist;
    (function (gamelist) {
        var p21;
        (function (p21) {
            var subView;
            (function (subView) {
                var P21RuleViewUI = /** @class */ (function (_super) {
                    __extends(P21RuleViewUI, _super);
                    function P21RuleViewUI() {
                        return _super.call(this) || this;
                    }
                    P21RuleViewUI.prototype.createChildren = function () {
                        _super.prototype.createChildren.call(this);
                        this.loadScene("gamelist/p21/subView/P21RuleView");
                    };
                    return P21RuleViewUI;
                }(Laya.View));
                subView.P21RuleViewUI = P21RuleViewUI;
            })(subView = p21.subView || (p21.subView = {}));
        })(p21 = gamelist.p21 || (gamelist.p21 = {}));
    })(gamelist = ui.gamelist || (ui.gamelist = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var hall;
    (function (hall) {
        var HallSceneUI = /** @class */ (function (_super) {
            __extends(HallSceneUI, _super);
            function HallSceneUI() {
                return _super.call(this) || this;
            }
            HallSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("hall/HallScene");
            };
            return HallSceneUI;
        }(Laya.Scene));
        hall.HallSceneUI = HallSceneUI;
    })(hall = ui.hall || (ui.hall = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var hall;
    (function (hall) {
        var subView;
        (function (subView) {
            var AccountRecordUI = /** @class */ (function (_super) {
                __extends(AccountRecordUI, _super);
                function AccountRecordUI() {
                    return _super.call(this) || this;
                }
                AccountRecordUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("hall/subView/AccountRecord");
                };
                return AccountRecordUI;
            }(Laya.View));
            subView.AccountRecordUI = AccountRecordUI;
            var RuleViewUI = /** @class */ (function (_super) {
                __extends(RuleViewUI, _super);
                function RuleViewUI() {
                    return _super.call(this) || this;
                }
                RuleViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("hall/subView/RuleView");
                };
                return RuleViewUI;
            }(Laya.View));
            subView.RuleViewUI = RuleViewUI;
            var UserViewUI = /** @class */ (function (_super) {
                __extends(UserViewUI, _super);
                function UserViewUI() {
                    return _super.call(this) || this;
                }
                UserViewUI.prototype.createChildren = function () {
                    _super.prototype.createChildren.call(this);
                    this.loadScene("hall/subView/UserView");
                };
                return UserViewUI;
            }(Laya.View));
            subView.UserViewUI = UserViewUI;
        })(subView = hall.subView || (hall.subView = {}));
    })(hall = ui.hall || (ui.hall = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var loading;
    (function (loading) {
        var LoadingUI = /** @class */ (function (_super) {
            __extends(LoadingUI, _super);
            function LoadingUI() {
                return _super.call(this) || this;
            }
            LoadingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("loading/Loading");
            };
            return LoadingUI;
        }(Laya.View));
        loading.LoadingUI = LoadingUI;
    })(loading = ui.loading || (ui.loading = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var login;
    (function (login) {
        var ChoiceCoinUI = /** @class */ (function (_super) {
            __extends(ChoiceCoinUI, _super);
            function ChoiceCoinUI() {
                return _super.call(this) || this;
            }
            ChoiceCoinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("login/ChoiceCoin");
            };
            return ChoiceCoinUI;
        }(Laya.Scene));
        login.ChoiceCoinUI = ChoiceCoinUI;
        var LoginUI = /** @class */ (function (_super) {
            __extends(LoginUI, _super);
            function LoginUI() {
                return _super.call(this) || this;
            }
            LoginUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("login/Login");
            };
            return LoginUI;
        }(Laya.Scene));
        login.LoginUI = LoginUI;
    })(login = ui.login || (ui.login = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
