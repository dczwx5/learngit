Attribute VB_Name = "TableExport_Structure"

Sub WriteStructureFileUTF8(sFilename As String, sExt As String, sh As Worksheet)

    ' delete then create the file
    DeleteFile (sFilename)
    
    Dim iLastRowNum As Integer
    Dim iLastColNum As Integer
    iLastRowNum = sh.UsedRange.Row + sh.UsedRange.Rows.Count - 1
    iLastColNum = sh.UsedRange.Column + sh.UsedRange.Columns.Count - 1

    Dim iColumnRowNum As Integer
    iColumnRowNum = 0
    Dim iRuntimeTypeRowNum As Integer
    iRuntimeTypeRowNum = 0
    Dim iRuntimeStructRowNum As Integer
    iRuntimeStructRowNum = 0
    Dim iRuntimeEnumRowNum As Integer
    iRuntimeEnumRowNum = 0
    Dim iRuntimeEnumDefRowNum As Integer
    iRuntimeEnumDefRowNum = 0

    Dim sCell As String
    Dim sWarningMessage As String
    
    Dim iRowNum As Integer
    For iRowNum = 1 To iLastRowNum
        
        sCell = GetCellString(sh, iRowNum, 1, sWarningMessage)
        
        If sCell = "Column:" Then
            iColumnRowNum = iRowNum
        ElseIf sCell = "RuntimeType:" Then
            iRuntimeTypeRowNum = iRowNum
        ElseIf sCell = "RuntimeStruct:" Then
            iRuntimeStructRowNum = iRowNum
        ElseIf sCell = "RuntimeEnum:" Then
            iRuntimeEnumRowNum = iRowNum
        ElseIf sCell = "RuntimeEnumDef:" Then
            iRuntimeEnumDefRowNum = iRowNum
        End If
                                
    Next

    If sExt = ".cs" Then
    
        Call WriteStructureFileUTF8_CS(sFilename, sh, iLastColNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)
        
    ElseIf sExt = ".java" Then
    
        Call WriteStructureFileUTF8_Java(sFilename, sh, iLastColNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)
        
    ElseIf sExt = ".as" Then
    
        Call WriteStructureFileUTF8_AS(sFilename, sh, iLastColNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)        
    End If
    
End Sub

Private Sub WriteStructureFileUTF8_CS(sFilename As String, sh As Worksheet, iLastColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer)

    Dim sIndents As String
    sIndents = GetIndentString(1)
    
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
       
    Dim BinaryStream
    Set BinaryStream = CreateObject("ADODB.Stream")
    BinaryStream.Charset = "UTF-8"
    BinaryStream.Type = 2
    BinaryStream.Open

    'write BOM first
    'arrBytes = ChrW(&HFEFF)
    'Put #iOutputFileNum, , arrBytes

    Dim dict As New Scripting.Dictionary
    'Set dict = CreateObject("Scripting.Dictionary")
    
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "// Generated by Excel Table exporter in " & Date & " - " & Time, 1
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "", 1
    BinaryStream.WriteText "", 1
    
    Dim sTableDomain As String
    Dim sTableName As String
    Call GetTableDomainAndName(sh, sTableDomain, sTableName)
    
    BinaryStream.WriteText "namespace " & sTableDomain, 1
    BinaryStream.WriteText "{", 1
    
    Dim sLine As String
    
    'write class declaration
    sLine = sIndents & "[Serializable]" & Chr(10)
    sLine = sLine & sIndents & "public class " & sTableName & Chr(10) & sIndents & "{"
    BinaryStream.WriteText sLine, 1
    
    'write enum defines
    sLine = GetEnumDefineString_CS(2, sh, 2, iLastColumnNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)
    BinaryStream.WriteText sLine, 1
    
    'write struct defines
    sLine = GetStructDefineString_CS(2, sh, 2, iLastColumnNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum)
    If Len(sLine) <> 0 Then BinaryStream.WriteText sLine, 1
    
    Dim iColNum As Integer
    For iColNum = 2 To iLastColumnNum
                   
        sCaption = GetCellString(sh, iColumnRowNum, iColNum, sWarningMessage)
        
        If sCaption <> "" Then
        
            sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum, sWarningMessage)
            If sRuntimeType = "String" Then sRuntimeType = "string"
            
            sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum, sWarningMessage)
            sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)
            
            sLine = GetFieldString_CS_Java(2, sh, iColumnRowNum, dict, sCaption, 0, sRuntimeType, sRuntimeStruct, sRuntimeEnumType)
            If Len(sLine) <> 0 Then
            
                BinaryStream.WriteText sLine, 1
                
            End If
            
        End If
        
    Next

    sLine = sIndents & "}"
    BinaryStream.WriteText sLine, 1
    
    BinaryStream.WriteText "}", 1
    BinaryStream.WriteText "", 1
    
    BinaryStream.SaveToFile sFilename, 2
    BinaryStream.Close

    If Len(sWarningMessage) > 0 Then
        MsgBox ("In sheet: '" & sh.Name & "'," & Chr(10) & Chr(13) & "Replace " & Chr(34) & " with ' in cells:" & sWarningMessage)
    End If
    
End Sub

Private Sub WriteStructureFileUTF8_Java(sFilename As String, sh As Worksheet, iLastColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer)

    Dim sIndents As String
    sIndents = GetIndentString(0)
    
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
       
    Dim BinaryStream
    Set BinaryStream = CreateObject("ADODB.Stream")
    BinaryStream.Charset = "UTF-8"
    BinaryStream.Type = 2
    BinaryStream.Open

    'write BOM first
    'arrBytes = ChrW(&HFEFF)
    'Put #iOutputFileNum, , arrBytes

    Dim dict As New Scripting.Dictionary
    'Set dict = CreateObject("Scripting.Dictionary")
    
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "// Generated by Excel Table exporter in " & Date & " - " & Time, 1
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "", 1
    BinaryStream.WriteText "", 1
    
    Dim sTableDomain As String
    Dim sTableName As String
    Call GetTableDomainAndName(sh, sTableDomain, sTableName)
    
    BinaryStream.WriteText "package " & sTableDomain & ";", 1
    BinaryStream.WriteText "", 1
    
    Dim sLine As String
    
    'write class declaration
    sLine = sIndents & "public class " & sTableName & Chr(10) & sIndents & "{"
    BinaryStream.WriteText sLine, 1
    
    'write enum defines
    sLine = GetEnumDefineString_Java(1, sh, 2, iLastColumnNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)
    BinaryStream.WriteText sLine, 1
    
    'write struct defines
    sLine = GetStructDefineString_Java(1, sh, 2, iLastColumnNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum)
    If Len(sLine) <> 0 Then BinaryStream.WriteText sLine, 1
    
    Dim iColNum As Integer
    For iColNum = 2 To iLastColumnNum
                   
        sCaption = GetCellString(sh, iColumnRowNum, iColNum, sWarningMessage)
        
        If sCaption <> "" Then
            
            sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum, sWarningMessage)
            If sRuntimeType = "string" Then sRuntimeType = "String"
            
            sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum, sWarningMessage)
            sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)
            
            sLine = GetFieldString_CS_Java(1, sh, iColumnRowNum, dict, sCaption, 0, sRuntimeType, sRuntimeStruct, sRuntimeEnumType)
            If Len(sLine) <> 0 Then
            
                BinaryStream.WriteText sLine, 1
                
            End If
                        
        End If
    
    Next

    sLine = sIndents & "}"
    BinaryStream.WriteText sLine, 1
       
    BinaryStream.SaveToFile sFilename, 2
    BinaryStream.Close

    If Len(sWarningMessage) > 0 Then
        MsgBox ("In sheet: '" & sh.Name & "'," & Chr(10) & Chr(13) & "Replace " & Chr(34) & " with ' in cells:" & sWarningMessage)
    End If
    
End Sub

Private Sub WriteStructureFileUTF8_AS(sFilename As String, sh As Worksheet, iLastColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer)

    Dim sIndents As String
    sIndents = GetIndentString(1)
    
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
       
    Dim BinaryStream
    Set BinaryStream = CreateObject("ADODB.Stream")
    BinaryStream.Charset = "UTF-8"
    BinaryStream.Type = 2
    BinaryStream.Open

    'write BOM first
    'arrBytes = ChrW(&HFEFF)
    'Put #iOutputFileNum, , arrBytes

    Dim dict As New Scripting.Dictionary
    'Set dict = CreateObject("Scripting.Dictionary")
    
    
    Dim dictDefine As New Scripting.Dictionary
  
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "// Generated by Excel Table exporter in " & Date & " - " & Time, 1
    BinaryStream.WriteText "//----------------------------------------------------------------", 1
    BinaryStream.WriteText "", 1
    BinaryStream.WriteText "", 1
    
    Dim sTableDomain As String
   
    Dim sTableName As String
    Call GetTableDomainAndName(sh, sTableDomain, sTableName)
    
    
    Dim sNamespace As String
    sNamespace = sTableDomain & "." & sTableName
    
    
    BinaryStream.WriteText "package " & sTableDomain, 1
   
    
    BinaryStream.WriteText "{", 1
    
    Dim dictImport
    Set dictImport = GetImportDict_AS(sh, iLastColumnNum, iColumnRowNum, iRuntimeStructRowNum)
    k = dictImport.Keys
    For i = 0 To dictImport.Count - 1
      Key = k(i)
      BinaryStream.WriteText sIndents & "import " & sNamespace & "." & k(i), 1
    Next
    BinaryStream.WriteText sIndents, 1
    
    Dim sLine As String
    
    'write class declaration
    sLine = sIndents & "public class " & sTableName & Chr(10) & sIndents & "{"
    BinaryStream.WriteText sLine, 1
        
    Dim iColNum As Integer
    For iColNum = 2 To iLastColumnNum
                   
        sCaption = GetCellString(sh, iColumnRowNum, iColNum, sWarningMessage)
        
        If sCaption <> "" Then
            
            sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum, sWarningMessage)
            
            sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum, sWarningMessage)
            sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)

            
            sLine = GetFieldString_AS(2, sh, iColumnRowNum, dict, sCaption, 0, sRuntimeType, sRuntimeStruct, sRuntimeEnumType, dictDefine)
            If Len(sLine) <> 0 Then
            
                BinaryStream.WriteText sLine, 1
                
            End If
                        
        End If
    
    Next
    
    
    sIndents = sIndents + sIndents
    BinaryStream.WriteText sIndents & "private var _data:Object;", 1
    BinaryStream.WriteText sIndents, 1
    BinaryStream.WriteText sIndents & "public function " & sTableName & "( data:Object ) : void ", 1
    BinaryStream.WriteText sIndents & "{" & vbCrLf
    BinaryStream.WriteText sIndents & "  this._data = data;" & vbCrLf
    BinaryStream.WriteText sIndents, 1
    
    k = dictDefine.Keys
    Item = dictDefine.Items
    For i = 0 To dictDefine.Count - 1
       Key = k(i)
       Value = Item(i)
       BinaryStream.WriteText sIndents & "  this." & Key & " = new " & Value(0) & "(data." & Value(1) & ");" & vbCrLf
       BinaryStream.WriteText sIndents, 1
    Next

    
    BinaryStream.WriteText sIndents & "}" & vbCrLf

    sLine = "   }"
    BinaryStream.WriteText sLine, 1
       
    BinaryStream.WriteText "}", 1
    BinaryStream.WriteText "", 1
       
       
    strPath = Left(sFilename, InStrRev(sFilename, "\")) + Replace(sTableDomain, ".", "\")
    sFilename = strPath + "\" + Right(sFilename, Len(sFilename) - InStrRev(sFilename, "\"))
    CreatePath (strPath)
   
    BinaryStream.SaveToFile sFilename, 2

    BinaryStream.Close

    If Len(sWarningMessage) > 0 Then
        MsgBox ("In sheet: '" & sh.Name & "'," & Chr(10) & Chr(13) & "Replace " & Chr(34) & " with ' in cells:" & sWarningMessage)
    End If
    
    'get the struct or enum classes' path
    Dim objFSO As Scripting.FileSystemObject
    Set objFSO = New Scripting.FileSystemObject
    
    Dim sNewFilePath As String
    sNewFilePath = Left(sFilename, Len(sFilename) - Len(objFSO.GetExtensionName(sFilename)) - 1)
    sNewFilePath = sNewFilePath & "\"
    
   
    
    'write enum defines
    Call WriteEnumDefineFile_AS(sNewFilePath, sNamespace, sh, 2, iLastColumnNum, iRuntimeEnumRowNum, iRuntimeEnumDefRowNum)
    
    'write struct defines
    Call WriteStructDefineFile_AS(sNewFilePath, sNamespace, sh, 2, iLastColumnNum, iColumnRowNum, iRuntimeTypeRowNum, iRuntimeStructRowNum, iRuntimeEnumRowNum)
    
    

    
End Sub





Private Function GetEnumDefineString_CS(iIndentCounts As Integer, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer) As String

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
        
    Dim sEnum As String
    Dim sEnumDefine As String
    Dim sWarningMessage As String
           
    Dim dict
    Set dict = CreateObject("Scripting.Dictionary")
    
    'write enum declaration
    Dim sLine As String
    sLine = ""
   
    Dim iColNum As Integer
    For iColNum = iFromColumnNum To iToColumnNum
                   
        If iRuntimeEnumRowNum <> 0 Then
        
            sEnum = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)
                        
            Dim sDomain As String
            Dim sName As String
            Call SeparateDomainAndName(sEnum, sDomain, sName)
            
            If sDomain = "" And sEnum <> "" And iRuntimeEnumDefRowNum <> 0 And dict.Exists(sEnum) = False Then
            
                sLine = sLine & sIndents & "public enum " & sEnum & " { "
                
                sEnumDefine = GetCellString(sh, iRuntimeEnumDefRowNum, iColNum, sWarningMessage)
                    
                'unquote the '"'
                sEnumDefine = Replace(sEnumDefine, Chr(34), "")
                
                Dim sArray() As String
                sArray = Split(sEnumDefine, Chr(10))
    
                Dim iIdx As Integer
                For iIdx = 0 To UBound(sArray)
    
                    If iIdx <> 0 Then sLine = sLine & ", "
    
                    sLine = sLine & sArray(iIdx)
    
                Next
                    
                sLine = sLine & " }" & Chr(10)
                
                dict.Add sEnum, sEnumDefine
                
            End If
            
        End If
                        
    Next
    
    GetEnumDefineString_CS = sLine
    
End Function

Private Function GetEnumDefineString_Java(iIndentCounts As Integer, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer) As String

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
        
    Dim sEnum As String
    Dim sEnumDefine As String
    Dim sWarningMessage As String
           
    Dim dict
    Set dict = CreateObject("Scripting.Dictionary")
    
    'write enum declaration
    Dim sLine As String
    sLine = ""
   
    Dim iColNum As Integer
    For iColNum = iFromColumnNum To iToColumnNum
                   
        If iRuntimeEnumRowNum <> 0 Then
        
            sEnum = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)
                        
            Dim sDomain As String
            Dim sName As String
            Call SeparateDomainAndName(sEnum, sDomain, sName)
            
            If sDomain = "" And sEnum <> "" And iRuntimeEnumDefRowNum <> 0 And dict.Exists(sEnum) = False Then
            
                sLine = sLine & sIndents & "public enum " & sEnum & " { "
                
                sEnumDefine = GetCellString(sh, iRuntimeEnumDefRowNum, iColNum, sWarningMessage)
                
                
                'unquote the '"'
                sEnumDefine = Replace(sEnumDefine, Chr(34), "")
                
                Dim sArray() As String
                sArray = Split(sEnumDefine, Chr(10))
                
                Dim sDefineValue As String
                Dim sValue() As String
                Dim iCurValue As Integer
                iCurValue = 0
                
    
                Dim iIdx As Integer
                For iIdx = 0 To UBound(sArray)
    
                    If iIdx <> 0 Then sLine = sLine & ", "
    
                    'sLine = sLine & sArray(iIdx)

                    sDefineValue = sArray(iIdx)
 
                        If InStr(sDefineValue, "=") > 0 Then
                        
                            sValue = Split(sDefineValue, Chr(61))
                            
                            If sValue(1) <> "" Then
                 
                               sLine = sLine & sValue(0) & "(" & sValue(1) & ")"
                               iCurValue = CDbl(sValue(1))
                               
                            Else
                            
                               iCurValue = iCurValue + 1
                               sLine = sLine & sValue(0) & "(" & iCurValue & ")"
                            
                            End If

                        Else
                        
                           iCurValue = iCurValue + 1
                           sLine = sLine & sDefineValue & "(" & iCurValue & ")"

                        End If
    
                Next
                
                sLine = sLine & ";"
                    
                sLine = sLine & "public int type; " & Chr(10)
                sLine = sLine & sEnum & "(int type){ " & Chr(10)
                sLine = sLine & "this.type = type; " & Chr(10)
                sLine = sLine & "}" & Chr(10)
                sLine = sLine & " }" & Chr(10)
                
                dict.Add sEnum, sEnumDefine
                
            End If
            
        End If
                        
    Next
    
    GetEnumDefineString_Java = sLine
    
End Function


 

Private Sub WriteEnumDefineFile_AS(sfilePath As String, sNamespace As String, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iRuntimeEnumRowNum As Integer, iRuntimeEnumDefRowNum As Integer)

    Dim sIndents As String
    sIndents = GetIndentString(1)
        
    Dim sIndents_2 As String
    sIndents_2 = GetIndentString(2)
        
    Dim sEnum As String
    Dim sEnumDefine As String
    Dim sWarningMessage As String
           
    Dim dict
    Set dict = CreateObject("Scripting.Dictionary")
    
    'write enum declaration
    Dim sLine As String
   
    Dim iColNum As Integer
    For iColNum = iFromColumnNum To iToColumnNum
                   
        If iRuntimeEnumRowNum <> 0 Then
        
            sEnum = GetCellString(sh, iRuntimeEnumRowNum, iColNum, sWarningMessage)
                        
            Dim sDomain As String
            Dim sName As String
            Call SeparateDomainAndName(sEnum, sDomain, sName)
            
            If sDomain = "" And sEnum <> "" And iRuntimeEnumDefRowNum <> 0 And dict.Exists(sEnum) = False Then
            
                sLine = "package " & sNamespace & Chr(10) & " {" & Chr(10)
            
                sLine = sLine & sIndents & "public class " & sEnum & Chr(10)
                sLine = sLine & sIndents & "{" & Chr(10)
                
                sEnumDefine = GetCellString(sh, iRuntimeEnumDefRowNum, iColNum, sWarningMessage)
                
                'unquote the '"'
                sEnumDefine = Replace(sEnumDefine, Chr(34), "")
                    
                Dim sDefineValue As String
                    
                Dim sArray() As String
                sArray = Split(sEnumDefine, Chr(10))
 
                Dim sValue() As String
                
                Dim iCurValue As Integer
                iCurValue = 0
                
                Dim sDefault As String
                sDefault = "public static const "
    
                Dim iIdx As Integer
                For iIdx = 0 To UBound(sArray)
    
                    'If iIdx <> 0 Then
                    
                        sDefineValue = sArray(iIdx)
                        
                        'sLine = sLine & sIndents_2 & "public static const " & sDefineValue & " : String = " & Chr(34) & sDefineValue & Chr(34) & ";" & Chr(10)
                        
                        If InStr(sDefineValue, "=") > 0 Then
                        
                            sValue = Split(sDefineValue, Chr(61))
                            
                            If sValue(1) <> "" Then
                        
                               sLine = sLine & sIndents_2 & sDefault & sValue(0) & " : int = " & sValue(1) & ";" & Chr(10)
                               iCurValue = CDbl(sValue(1))
                               
                            Else
                            
                               iCurValue = iCurValue + 1
                               sLine = sLine & sIndents_2 & sDefault & sValue(0) & " : int = " & iCurValue & ";" & Chr(10)
                            
                            End If

                        Else
                        
                           iCurValue = iCurValue + 1
                           sLine = sLine & sIndents_2 & sDefault & sDefineValue & " : int = " & iCurValue & ";" & Chr(10)

                        End If
                        
                   ' End If
    
                Next
                    
                sLine = sLine & sIndents & "}" & Chr(10)
                sLine = sLine & "}" & Chr(10)
            
                dict.Add sEnum, sEnumDefine
                
                'output the struct to file
                Dim sFilename As String
                sFilename = sfilePath & sEnum & ".as"
                
                If Len(Dir(sfilePath, vbDirectory)) = 0 Then
                    MkDir sfilePath
                End If
                
                Dim BinaryStream
                Set BinaryStream = CreateObject("ADODB.Stream")
                BinaryStream.Charset = "UTF-8"
                BinaryStream.Type = 2
                BinaryStream.Open
                           
                BinaryStream.WriteText "//----------------------------------------------------------------", 1
                BinaryStream.WriteText "// Generated by Excel Table exporter in " & Date & " - " & Time, 1
                BinaryStream.WriteText "//----------------------------------------------------------------", 1
                BinaryStream.WriteText "", 1
                BinaryStream.WriteText "", 1
                
                BinaryStream.WriteText sLine, 1
                                     
                BinaryStream.SaveToFile sFilename, 2
                BinaryStream.Close
            
                If Len(sWarningMessage) > 0 Then
                    MsgBox ("In sheet: '" & sh.Name & "'," & Chr(10) & Chr(13) & "Replace " & Chr(34) & " with ' in cells:" & sWarningMessage)
                End If
            End If
            
        End If
                        
    Next
        
End Sub

Private Function GetStructDefineString_CS(iIndentCounts As Integer, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer) As String

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
        
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeStruct2 As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
           
    Dim bOutputStruct As Boolean
    bOutputStruct = False
    
    Dim dict1 As New Scripting.Dictionary
    
    Dim sLine As String
    sLine = ""
       
    Dim iColNum1 As Integer
    For iColNum1 = iFromColumnNum To iToColumnNum
    
        sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum1, sWarningMessage)
        
        Dim sDomain As String
        Dim sName As String
        Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
        
        If sDomain = "" And sRuntimeStruct <> "" And dict1.Exists(sRuntimeStruct) = False Then
        
            Dim dict2 As New Scripting.Dictionary
            
            'write struct declaration
            sLine = sLine & sIndents & "[Serializable]" & Chr(10)
            sLine = sLine & sIndents & "public class " & sRuntimeStruct & Chr(10)
            sLine = sLine & sIndents & "{ " & Chr(10)
            
            Dim iColNum2 As Integer
            For iColNum2 = iColNum1 To iToColumnNum
                           
                sRuntimeStruct2 = GetCellString(sh, iRuntimeStructRowNum, iColNum2, sWarningMessage)
                            
                Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
                
                If sDomain = "" And sRuntimeStruct = sRuntimeStruct2 Then
                
                    sCaption = GetCellString(sh, iColumnRowNum, iColNum2, sWarningMessage)
                    'sCaption = StripFront(sCaption, 1, ".")
                    
                    sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum2, sWarningMessage)
                    If sRuntimeType = "String" Then sRuntimeType = "string"
                    
                    sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum2, sWarningMessage)
                
                    Dim sLine2 As String
                    sLine2 = GetFieldString_CS_Java(iIndentCounts + 1, sh, iColumnRowNum, dict2, sCaption, 1, sRuntimeType, "", sRuntimeEnumType)
                    If Len(sLine2) <> 0 Then sLine2 = sLine2 & Chr(10)
                    
                    sLine = sLine & sLine2
                                                
                End If
                
            Next
            
            sLine = sLine & sIndents & "}" & Chr(10)
            dict1.Add sRuntimeStruct, sRuntimeStruct
            bOutputStruct = True
            
        End If
    
    Next
    
    If bOutputStruct Then
    
        GetStructDefineString_CS = sLine
        
    Else
    
        GetStructDefineString_CS = ""
    
    End If
    
End Function

Private Function GetStructDefineString_Java(iIndentCounts As Integer, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer) As String

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
        
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeStruct2 As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
           
    Dim bOutputStruct As Boolean
    bOutputStruct = False
    
    Dim dict1 As New Scripting.Dictionary
    
    Dim sLine As String
    sLine = ""
       
    Dim iColNum1 As Integer
    For iColNum1 = iFromColumnNum To iToColumnNum
    
        sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum1, sWarningMessage)
        
        Dim sDomain As String
        Dim sName As String
        Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
        
        If sDomain = "" And sRuntimeStruct <> "" And dict1.Exists(sRuntimeStruct) = False Then
        
            Dim dict2 As New Scripting.Dictionary
            
            'write struct declaration
            sLine = sLine & sIndents & "public class " & sRuntimeStruct & Chr(10)
            sLine = sLine & sIndents & "{ " & Chr(10)
            
            Dim iColNum2 As Integer
            For iColNum2 = iColNum1 To iToColumnNum
                           
                sRuntimeStruct2 = GetCellString(sh, iRuntimeStructRowNum, iColNum2, sWarningMessage)
                            
                Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
                
                If sDomain = "" And sRuntimeStruct = sRuntimeStruct2 Then
                
                    sCaption = GetCellString(sh, iColumnRowNum, iColNum2, sWarningMessage)
                    'sCaption = StripFront(sCaption, 1, ".")
                    
                    sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum2, sWarningMessage)
                    If sRuntimeType = "string" Then sRuntimeType = "String"
                    
                    sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum2, sWarningMessage)
                
                    Dim sLine2 As String
                    sLine2 = GetFieldString_CS_Java(iIndentCounts + 1, sh, iColumnRowNum, dict2, sCaption, 1, sRuntimeType, "", sRuntimeEnumType)
                    If Len(sLine2) <> 0 Then sLine2 = sLine2 & Chr(10)
                    
                    sLine = sLine & sLine2
                                                
                End If
                
            Next
            
            sLine = sLine & sIndents & "}" & Chr(10)
            dict1.Add sRuntimeStruct, sRuntimeStruct
            bOutputStruct = True
            
        End If
    
    Next
    
    If bOutputStruct Then
    
        GetStructDefineString_Java = sLine
        
    Else
    
        GetStructDefineString_Java = ""
    
    End If
    
End Function

Private Sub WriteStructDefineFile_AS(sfilePath As String, sNamespace As String, sh As Worksheet, iFromColumnNum As Integer, iToColumnNum As Integer, iColumnRowNum As Integer, iRuntimeTypeRowNum As Integer, iRuntimeStructRowNum As Integer, iRuntimeEnumRowNum As Integer)

    Dim sIndents As String
    sIndents = GetIndentString(1)
        
    Dim sCaption As String
    Dim sRuntimeType As String
    Dim sRuntimeStruct As String
    Dim sRuntimeStruct2 As String
    Dim sRuntimeEnumType As String
    Dim sWarningMessage As String
           
    Dim dict1 As New Scripting.Dictionary
    
    Dim sLine As String
       
    Dim iColNum1 As Integer
    For iColNum1 = iFromColumnNum To iToColumnNum
    
        sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum1, sWarningMessage)
        
        Dim sDomain As String
        Dim sName As String
        Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
        
        If sDomain = "" And sRuntimeStruct <> "" And dict1.Exists(sRuntimeStruct) = False Then
               
            sLine = "package " & sNamespace & " {" & vbCrLf
            sLine = sLine & vbCrLf
        
            Dim dict2 As New Scripting.Dictionary
            
            'write struct declaration
            sLine = sLine & sIndents & "public class " & sRuntimeStruct
            sLine = sLine & "{ " & vbCrLf
            sLine = sLine & vbCrLf
            
            Dim iColNum2 As Integer
            For iColNum2 = iColNum1 To iToColumnNum
                           
                sRuntimeStruct2 = GetCellString(sh, iRuntimeStructRowNum, iColNum2, sWarningMessage)
                            
                Call SeparateDomainAndName(sRuntimeStruct, sDomain, sName)
                
                If sDomain = "" And sRuntimeStruct = sRuntimeStruct2 Then
                
                    sCaption = GetCellString(sh, iColumnRowNum, iColNum2, sWarningMessage)
                    'sCaption = StripFront(sCaption, 1, ".")
                    
                    sRuntimeType = GetCellString(sh, iRuntimeTypeRowNum, iColNum2, sWarningMessage)
                   
                    sRuntimeEnumType = GetCellString(sh, iRuntimeEnumRowNum, iColNum2, sWarningMessage)
                
                    Dim sLine2 As String
                    Dim dictDefine As New Scripting.Dictionary
                    sLine2 = GetFieldString_AS(2, sh, iColumnRowNum, dict2, sCaption, 1, sRuntimeType, "", sRuntimeEnumType, dictDefine)
                    If Len(sLine2) <> 0 Then sLine2 = sLine2
                    
                    sLine = sLine & sLine2
                                                
                End If
                
            Next
            
            
            sLine = sLine & vbCrLf
            sLine = sLine & sIndents & "    private var _data:Object;" & vbCrLf
            sLine = sLine & sIndents & "    public function " & sRuntimeStruct & "( data:Object ) : void " & vbCrLf
            sLine = sLine & sIndents & "    {" & vbCrLf
            sLine = sLine & sIndents & "      this._data = data;" & vbCrLf
    
            sLine = sLine & sIndents & "    }" & vbCrLf
            sLine = sLine & "   }" & vbCrLf
            sLine = sLine & "}"

            dict1.Add sRuntimeStruct, sRuntimeStruct
            
            'output the struct to file
            Dim sFilename As String
            sFilename = sfilePath & sRuntimeStruct & ".as"
            
            If Len(Dir(sfilePath, vbDirectory)) = 0 Then
                MkDir sfilePath
            End If
            
            Dim BinaryStream
            Set BinaryStream = CreateObject("ADODB.Stream")
            BinaryStream.Charset = "UTF-8"
            BinaryStream.Type = 2
            BinaryStream.Open
        
            BinaryStream.WriteText "//----------------------------------------------------------------", 1
            BinaryStream.WriteText "// Generated by Excel Table exporter in " & Date & " - " & Time, 1
            BinaryStream.WriteText "//----------------------------------------------------------------", 1
            BinaryStream.WriteText "", 1
            BinaryStream.WriteText "", 1
            
            BinaryStream.WriteText sLine, 1
                                 
            BinaryStream.SaveToFile sFilename, 2
            BinaryStream.Close
        
            If Len(sWarningMessage) > 0 Then
                MsgBox ("In sheet: '" & sh.Name & "'," & Chr(10) & Chr(13) & "Replace " & Chr(34) & " with ' in cells:" & sWarningMessage)
            End If
            
        End If
    
    Next
        
End Sub

Function GetFieldString_CS_Java(iIndentCounts As Integer, sh As Worksheet, iColumnRowNum As Integer, dict As Scripting.Dictionary, sCaption As String, iStripCaptionLayer As Integer, sRuntimeType As String, sRuntimeStruct As String, sRuntimeEnumType As String)

    If sRuntimeType = "Boolean" Or sRuntimeType = "bool" Then sRuntimeType = "boolean"

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
        
    Dim sLine As String
    sLine = ""
    
    Dim bOutput As Boolean
    bOutput = False
       
    Dim sWarningMessage As String
    
    If sRuntimeStruct <> "" Then
    
        sCaption = StripBack(sCaption, 1, ".")
        
        If dict.Exists(sCaption) = False Then
        
            sRuntimeType = sRuntimeStruct
            dict.Add sCaption, sRuntimeType
            
            sCaption = sCaption & " = new " & sRuntimeType & "()"
            
            bOutput = True
                    
        End If
        
    Else
    
        If sRuntimeType = "enum" Then
            
            If sRuntimeEnumType = "" Then
                
                sRuntimeType = "int"
            
            Else
            
                sRuntimeType = sRuntimeEnumType
                
            End If
                   
        End If
        
        'get max array size
        Dim iPos As Integer
        iPos = InStr(sCaption, "[")
        If iPos > 0 Then
            
            Dim iSize As Integer
            iSize = CountArraySize(sh, iColumnRowNum, sCaption)
            
            sCaption = StripFront(sCaption, iStripCaptionLayer, ".")
        
            Dim sArrayName As String
            sArrayName = GetArrayName(sCaption)
            
            If dict.Exists(sArrayName) = False Then
                
                sCaption = "[] " & sArrayName & " = new " & sRuntimeType & "[ " & iSize & " ]"
                dict.Add sArrayName, iSize
                bOutput = True
                
            End If
            
        Else
        
            sCaption = StripFront(sCaption, iStripCaptionLayer, ".")
            bOutput = True

        End If
                    
    End If
    
    If bOutput Then
           
        sLine = sLine & sIndents
        sLine = sLine & "public " & sRuntimeType & " " & sCaption & ";"
        GetFieldString_CS_Java = sLine
        
    Else
    
        GetFieldString_CS_Java = ""
        
    End If
    
End Function



Function GetFieldString_AS(iIndentCounts As Integer, sh As Worksheet, iColumnRowNum As Integer, dict As Scripting.Dictionary, sCaption As String, iStripCaptionLayer As Integer, sRuntimeType As String, sRuntimeStruct As String, sRuntimeEnumType As String, dictDefine As Scripting.Dictionary)

    If sRuntimeType = "string" Then sRuntimeType = "String"
    If sRuntimeType = "float" Then sRuntimeType = "Number"
    If sRuntimeType = "enum" Then sRuntimeType = "int"
    If sRuntimeType = "boolean" Or sRuntimeType = "bool" Then sRuntimeType = "Boolean"

    Dim sIndents As String
    sIndents = GetIndentString(iIndentCounts)
    

        
    Dim sLine As String
    sLine = ""
    
    Dim sCaptionNew As String
    sCaptionNew = ""
    
    Dim sReturn As String
    sReturn = ""
    
    Dim sDefine As String
    sDefine = ""
    
    Dim sNote As String
    sNote = ""
    
    
    Dim bOutput As Boolean
    bOutput = False
       
    Dim sWarningMessage As String

    
    If sRuntimeStruct <> "" Then
    
    
        sCaptionReturn = StripFront(sCaption, iStripCaptionLayer, ".")
        sCaptionReturn = Left(sCaptionReturn, InStr(sCaptionReturn, ".") - 1)
       
        sCaption = StripBack(sCaption, 1, ".")
        
        If dict.Exists(sCaption) = False Then
                
            sRuntimeType = sRuntimeStruct
            dict.Add sCaption, sRuntimeType
            
            'sCaptionNew = " = new " & sRuntimeType & "()"
            sReturn = "_" & LCase(Left(sCaption, 1)) & Right(sCaption, Len(sCaption) - 1)
            sDefine = "private var " & sReturn & ":" & sRuntimeType & ";"
            
            
            Dim sValue(2) As String
            sValue(0) = sRuntimeType
            sValue(1) = sCaptionReturn
            
            If dictDefine.Exists(sReturn) = False Then
              dictDefine.Add sReturn, sValue
    
            End If
            
            bOutput = True
                    
        End If
        
    Else
            
        'get max array size
        Dim iPos As Integer
        iPos = InStr(sCaption, "[")
        If iPos > 0 Then
            
            Dim iSize As Integer
            iSize = CountArraySize(sh, iColumnRowNum, sCaption)
            
            sCaption = StripFront(sCaption, iStripCaptionLayer, ".")
        
            Dim sArrayName As String
            sArrayName = GetArrayName(sCaption)
            
            If dict.Exists(sArrayName) = False Then
                
                'sRuntimeType = "Vector.<" & sRuntimeType & ">"
                'sCaptionNew = " = new " & sRuntimeType & "( " & iSize & ", true )"
                
                sNote = sIndents & "/** @return vector.<int> */"
                sRuntimeType = " Array"
                sReturn = "_data." & sArrayName
                sCaption = sArrayName
                'sCaption = "[] " & sArrayName & " = new " & sRuntimeType & "[ " & iSize & " ]"
                dict.Add sArrayName, iSize
                bOutput = True
                
            End If
            
        Else
        
            sCaption = StripFront(sCaption, iStripCaptionLayer, ".")
            sReturn = "_data." & sCaption
        
            
            bOutput = True

        End If
                    
    End If
    
    If bOutput Then
           
        
        
        If sNote <> "" Then
           sLine = sLine & sNote & vbCrLf
        End If
        sLine = sLine & sIndents
        'sLine = sLine & "public " & "var " & sCaption & " : " & sRuntimeType & sCaptionNew & ";"
        sLine = sLine & "final public function get " & sCaption & "()" & " : " & sRuntimeType & " { " & vbCrLf
        sLine = sLine & sIndents & "  return " & sReturn & ";" & vbCrLf
        sLine = sLine & sIndents & "}" & vbCrLf
     
        If sDefine <> "" Then
           sLine = sLine & sIndents & sDefine & vbCrLf
        End If
         
        GetFieldString_AS = sLine
        
    Else
    
        GetFieldString_AS = ""
        
    End If
    
End Function

Function GetImportDict_AS(sh As Worksheet, iLastColumnNum As Integer, iColumnRowNum As Integer, iRuntimeStructRowNum As Integer) As Object

    Set GetImportDict_AS = CreateObject("Scripting.Dictionary")
    Dim sWarningMessage As String
    Dim sRuntimeStruct As String
    Dim iColNum As Integer
    Dim iSize As Integer
    
        For iColNum = 2 To iLastColumnNum
            sCaption = GetCellString(sh, iColumnRowNum, iColNum, sWarningMessage)
            
            If sCaption <> "" Then
                sRuntimeStruct = GetCellString(sh, iRuntimeStructRowNum, iColNum, sWarningMessage)
                
                If sRuntimeStruct <> "" Then
                   If GetImportDict_AS.Exists(sRuntimeStruct) = False Then
                   
                      GetImportDict_AS.Add sRuntimeStruct, iSize
                      iSize = iSize + 1
                
                  End If
                End If
            End If
        Next
    
End Function











