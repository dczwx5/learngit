0.Name
	.primitives : 图元 (三维模型中的点、线、面等等) 
			1.几何顶点被组合为图元（点，线段或多边形）
			2.然后图元被合成片元，最后片元被转换为帧缓存中的象素数据。
	.Fragment : 片元 (像素点，它比像素多一些位置啊、法向量等属性。)
		1.二维图象上每个点都包含了颜色、深度和纹理数据。将该点和相关信息叫做一个片元
		2.光栅化中纹理映射之后图元信息转化为了像素
	.Fragments : 片段(具有相同属性的一小部分像素区域)
	.HDD : 硬盘
	.RAM : 内存
	.VRAM : 显存
	.rendering primitives : 渲染图元
	.culling : 剔除
	.Vertex Shader : 顶点着色器
	.Geometry Shader : 几何着色器
	.Tessellation Shader : 曲面细分着色器
	.Fragment Shader : 片元着色器
	.Per-Primitive : 逐图元
	.Per-Fragment : 逐片元
	.Clipping : 裁剪
	.NDC : Normalized Device Coordiates 归一化的设备坐标(顶点坐标转到齐次裁剪坐标系后, 做透视除法得到)
	.Screen Coordinates : 屏幕坐标系
	.Screen Mapping 屏幕映射
	.Raster : 光栅
	.Rasterization : 光栅化

1.渲染流程
	0.渲染流水线 :
		(start)顶点数据 ->  
		(几何阶段)顶点着色器(齐次坐标)(图元) -> 曲面细分着色器 -> 几何着色器 -> 裁剪 -> 屏幕映射(屏幕坐标,z坐标,法线,视角) ->
		(光栅阶段)三角形设置 -> 三角形遍历(片元) -> 片元着色器 -> 逐片元操作 -> 
		(end) 屏幕图像
	1.应用阶段(Application Stage)(cpu)
		1.任务
			1.数据
				1.场景.摄像机.视椎机.模型.光源.etc数据
			2.减少渲染物体, 提高渲染性能
				1.粗粒度剔除
			3.设置渲染状态(每个模型)
				1.材质(漫反射颜色,高光反射颜色)
				2.纹理
				3.shader...etc
		2.输出
			1.渲染图元(rendering primitives)
				1.点, 线, 面等 
		3.实现阶段
			1.数据加载到显存
			2.设置渲染状态
				1.没有更改渲染状态前, 所有网格使用同一种 渲染状态
			3.调用Draw Call
	2.几何阶段(gpu)
		0.处理渲染图元, 进行逐顶点, 逐多边形操作
		1.输入
			1.渲染图元
		2.任务
			1.顶点坐标变换到屏幕坐标
		3.输出
			1.屏幕空间的二维顶点信息
				1.坐标
				2.深度值
				3.着色...etc
		4.流水线
			1.顶点着色器
				处理单位 : vertex
				每个vertex都会调用一次顶点着色器
				顶点着色器不可以创建或者销毁任何顶点
				也不可以得到顶点和顶点之间的关系
				处理速度很快
				将顶点坐标从模型空间转换到齐次裁剪空间(-1,-1,-1)(1,1,1)
				1.完全可编程
				2.顶点空间转换
				3.顶点着色
				4.可以实现顶点动画
				5.最后的坐标-1, 1之间, 所有顶点都在一个立方体内, 范围是-1-1-1, 111之间
			2.曲面细分着色器
				1.可选
				2.细分图元
			3.几何着色器
				1.执行逐图元的着色操作
				2.用于产生更多的图元
			4.裁剪
				1.可配置
				
				2.裁剪掉the vertex that not inside camera, 并剔除某些三角图元的面片
					1.使用裁剪平面配置 裁剪区域
					2.控制裁剪三角图元的正面还是背面
			5.屏幕映射
				1.不可配置和编程
				2.将图元的坐标(齐次坐标)转换到屏幕坐标系
	3.光栅阶段
		1.输入
			1.屏幕空间顶点信息
		2.任务 
			1.计算每个图元覆盖了哪些像素
			2.计算像素颜色
			1.对输入的顶点信息进行插值(3个顶点的3个颜色值，插值得到最终颜色值)
			2.逐像素处理
		3.输出
			1.最终图像
		4.流水线
			1.三角形设置
				1.计算3角形边界数据
			2.三角形遍历
				1.找出被三角形覆盖的像素
				2.根据3个顶点做插值
				3.输出片元序列
			3.片元着色器
				0.完全可编程
				1.Per-Fragment 着色操作
			4.逐片元操作
				0.不可编程, 可配置
				1.任务
					1.修改颜色
					2.深度缓冲
					3.混合etc
			
			
			