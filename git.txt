http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


====
git 密钥
$ ssh-keygen -t rsa -C "youremail@example.com" // 任意位置执行
一路回车
成功, 将会在C:\Users\Administrator\.ssh下创建id_rsa私钥和id_rsa.pub公钥
将公钥内容添加到github帐户中
1个帐号可以有多个公钥
这样就可以给github推送了
====
和svn 区别
reset ~= checkout // reset可以把所有修改全部回退, checkout 只能回退没add之前的
因此 相要像svn那样的效果, 需要
reset Head
再
checkout -- file.xx
====
工作区 : 没add/rm之前的   -- checkout 清除工作区
暂存区 : add之后的 -- reset 回退版本, 但是无法清除工作区
master : commit之后的
====
mkdir folder
cd folder
pwd // 显示当前路径
请使用utf-8
====
git init // 通过git init命令把这个目录变成Git可以管理的仓库：
git add read.txt // add单个文件
git rm read.txt // 删除一个文件
git add 1.txt 2.txt 3.txt // add 多个文件
git commit -m "add 4 files" // 提交
====
git status // 查看当前git状态, 是否有修改等
git diff read.txt // 查看read.txt 修改了哪些内容
git add read.txt
git commit -m "read.txt修改了, 要add再commit", 如果修改后没add, 不会被commit
====
git log // 显示提交日志
git log --pretty=oneline // 简易显示
git reset --hard HEAD 
	// 回退版本到HEAD, HEAD^是上一个版本, HEAD^^是上上个版本
	// 这里也可以填版本号
	// 从head版本回退到以前的版本号之后(过去), 记得最新的版本号。也可以回退回去(现在)
	// 如果不记得版本号, 可以通过git reflog, 查看命令历史记录
====
git checkout -- read.txt // 清除工作区的修改, 类似reset
git reset HEAD read.txt // 清除add
====
先有本地库, 再关联一个远程库
	git remote add origin git@github.com:dczwx5/learngit.git
	git remote add origin git@github.com:UserName/repo-name.git
git push -u origin master //第一次推送master分支的所有内容
git push origin master // 之后可以使用这个推送
git clone git@github.com:OSGame/RussiaSnakeTower.git
====
复制远程库到本地
git clone git@github.com:dczwx5/test2.git
复制下来之后, 可以进行修改提交推送, 前提是有权限